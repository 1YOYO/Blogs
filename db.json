{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/body.png","path":"img/body.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/jacman/.gitignore","hash":"0d5c2fdbdc974f10150baa12e1fc171a34960ed8","modified":1475906075381},{"_id":"themes/jacman/LICENSE","hash":"d8780b41bab4b87bdd21eca444cae11af72617f4","modified":1475906075381},{"_id":"themes/jacman/README.md","hash":"dd7b96d6c1c4dcffa61e37f76d5f0e4b4bca4d1b","modified":1475906075381},{"_id":"themes/jacman/README_zh.md","hash":"c7fa5c73edcdbc25aa57c12c1b3c71ebf96d2879","modified":1475906075381},{"_id":"themes/jacman/_config.yml","hash":"8cc6859aae5793bc143a2463653e82f779d52c92","modified":1524736516349},{"_id":"source/_posts/angularjs中的transclude及ng-transclude指令.md","hash":"4c2ce3723f5158273aca0f5d292fec4325014423","modified":1478315213000},{"_id":"source/_posts/gulp.md","hash":"84cfbfa80ca3c06b166e6cdaef2ab85dd834ade1","modified":1477634273000},{"_id":"source/_posts/hello-world.md","hash":"64efdb829a9a6280700ba8e926a51d2e3c7228ee","modified":1475907952000},{"_id":"source/_posts/jdk.md","hash":"c440577aa0aebc3e35f195aeec72f2686df89547","modified":1476770333000},{"_id":"source/_posts/jq基础2.md","hash":"2478a427940abf36ed4f9d1121d1a29cdaa2e5a5","modified":1478315213000},{"_id":"source/_posts/jsonp.md","hash":"b23bc607a9887415984dfa0580bce565c832c764","modified":1477630673000},{"_id":"source/_posts/js基础1.md","hash":"320c71a665ef78ec66a2689cd27b80d1b20e4f26","modified":1477465073000},{"_id":"source/_posts/slice.call.md","hash":"d87aa85c80f1a7d10a0c83a424c44e5e6fc79c8a","modified":1524711158969},{"_id":"source/_posts/vuejs学习资料.md","hash":"72a08ee8b2cef18ae812327f2795c814542fb7f5","modified":1479297353000},{"_id":"source/_posts/tools_contrast.md","hash":"16afd26280a2b06b950fb2017dce739414df1e51","modified":1476685552000},{"_id":"source/_posts/webpack.md","hash":"d9e92dd7b81778d6602e89a21d569ad51104f81b","modified":1479290813000},{"_id":"source/_posts/translate.md","hash":"6f0ec6c5a0128f4783d3d2d0966bb2299fc77a20","modified":1506149753000},{"_id":"source/_posts/键盘事件.md","hash":"13e7f0b64452027d7ea5090cb8953163ea06d54b","modified":1477630673000},{"_id":"source/_posts/数组去重的五种方法.md","hash":"681fc1699c63ed9b466debb635b5201468d55d67","modified":1524710727305},{"_id":"source/_posts/逻辑运算符.md","hash":"9b499dde92c58ad8838d4d0a4de10201e80acce4","modified":1479297353000},{"_id":"themes/jacman/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1475906075303},{"_id":"themes/jacman/.git/config","hash":"ca4e376c8d7a23354160ffad14567f8f7b3155e2","modified":1475906075319},{"_id":"themes/jacman/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1475906067617},{"_id":"themes/jacman/.git/index","hash":"433b0e7543a884a9eb4a6f814bdfda0355ea1858","modified":1524736950901},{"_id":"themes/jacman/.git/packed-refs","hash":"facb04d8a7e4221a4b0b3dc3062a8ca586ade15d","modified":1475906075258},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1475906075444},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1475906075444},{"_id":"themes/jacman/layout/index.ejs","hash":"b832b280ec0a2b741e73a2300f219f0075c99278","modified":1475906075444},{"_id":"themes/jacman/layout/layout.ejs","hash":"ceeb2a7410b96b81310ed9b1279f62e953b0a6ca","modified":1475906075444},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1475906075460},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1475906075444},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1475906075460},{"_id":"themes/jacman/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1475906075460},{"_id":"themes/jacman/languages/default.yml","hash":"966be0b585cd3e3b7f0e485c896c24dfdfee423a","modified":1475906075397},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"6e1460594fa50394ac6f11fe9d39dc59478ddd0c","modified":1524649650806},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"0e7912c6505592a10efe2db1c994ccc3ebf91239","modified":1475906075397},{"_id":"themes/jacman/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1475906067649},{"_id":"themes/jacman/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1475906067664},{"_id":"themes/jacman/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1475906067664},{"_id":"themes/jacman/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1475906067664},{"_id":"themes/jacman/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1475906067664},{"_id":"themes/jacman/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1475906067758},{"_id":"themes/jacman/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1475906067680},{"_id":"themes/jacman/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1475906067758},{"_id":"themes/jacman/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1475906067773},{"_id":"themes/jacman/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1475906067820},{"_id":"themes/jacman/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1475906067820},{"_id":"themes/jacman/.git/logs/HEAD","hash":"42b2478f378de723e72c9c875b03afdbd24b06f7","modified":1475906075319},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"f0772c9de0431384d4e852358ee425a1cdf3ea6d","modified":1475906075397},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"90502fc2f5b0a5681a6c6588a9ed6ad297e32890","modified":1475906075413},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"ebaec2ae044ada08825d8e8af9614821f779d3dd","modified":1475906075397},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"00c00b4a961ac1f7bc8ee688ce134fe0c454edc6","modified":1475906075413},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"2c1f1edfeaebaafe4265d58e0b8110e71673da40","modified":1475906075413},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"2b77ff6cbc8571cab27c3bdc4ad51a79510bbca2","modified":1475906075413},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"c4358de4ea1372ea68ff5dc0f4257c348d516990","modified":1475906075413},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"210bb4c1ec77d998dfd93baeb4e3a0b46a925cd1","modified":1475906075413},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"795435cc84c46a18e4ac597435a81f66eb86b0c4","modified":1475906075413},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"5636df1f2b6a8d02986d866e3824ec60430046e6","modified":1475906075428},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6cf37f844f150af4bbe212610da61e5140317de9","modified":1475906075428},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"732fcd909f6dac557629206dc7e93a7083cda084","modified":1475906075428},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"846d96ff73409b9a8b34f3cab691821096c03e1d","modified":1475906075428},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"67a55a4d94cca2db11a2636f1f2c92c208688b14","modified":1475906075428},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"c5c858742b29e6364da2e1d098e7d6cd8cef038f","modified":1475906075428},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"224d078ba1f2c33c52d5e867af71c5fe9f1bdf45","modified":1475906075428},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"b82d7fb0d1119738a9f9bb747d415e8c99e454ae","modified":1475906075444},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"6dcb532d02325d2a9f5fb92831401552a5540aa8","modified":1475906075444},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"2c1b9ac7666d7d5b9aaf8f33588e10451c4b7841","modified":1475906075444},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"c8a6fdb883be27f5e7daef6fa8899c17f51548a0","modified":1475906075444},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"ebfb11bdd603cd6e4dcf3949cc52e38009615c25","modified":1475906075444},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"bd73be669ddc47e1daab38736d1cecc3f37662e2","modified":1475906075444},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"317d420f5448c7452290e37f0ed8516cb73f4068","modified":1475906075444},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"43b1c29fea51f849ec0bf85a6d91fe0507f01503","modified":1475906075444},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"ff7db098608ba48752964cc67a51a04965ea927e","modified":1475906075444},{"_id":"themes/jacman/source/css/style.styl","hash":"4610c477560086880acc1ba71c3a72e7c89ecdb7","modified":1475906075475},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1475906075475},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1475906075475},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1475906075475},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1475906075475},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1475906075475},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1475906075475},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1475906075491},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1475906075475},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1475906075491},{"_id":"themes/jacman/source/img/banner.jpg","hash":"d7e1547997007deaa2b0aa00bde3a97bbbd6936a","modified":1524734152127},{"_id":"themes/jacman/source/img/body.png","hash":"1eaeb5d1886134d68321e38ae03f2ba1819c9f4c","modified":1524792765380},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1475906075506},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1475906075522},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1475906075522},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1475906075522},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1475906075522},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1475906075522},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1475906075522},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1475906075522},{"_id":"themes/jacman/source/img/logo.png","hash":"b8045991cd5affa5de7e8e93d5b7fd6a7750c8ec","modified":1475933214899},{"_id":"themes/jacman/source/img/logo.svg","hash":"85aa31ebe543572b4f9debd6c5f99271d89b5f30","modified":1475906075522},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1475906075522},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1475906075491},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1475906075491},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1475906075491},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1475906075491},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1475906075491},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1475906075506},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1475906075506},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1475906075506},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1475906075506},{"_id":"themes/jacman/source/js/gallery.js","hash":"735a714e54f0ac229f292a90df3a1f882904f6c7","modified":1475906075522},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"28ef4346743a60c896a9ae492a544c0854904350","modified":1475906075538},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"5f690e8588c8493eb9406aa68fbf1765aaff9476","modified":1475906075538},{"_id":"themes/jacman/source/js/totop.js","hash":"48648ec9c86e9ab491831e5a029e6f8864934149","modified":1475906075538},{"_id":"themes/jacman/source/img/author.jpg","hash":"f08c638f419244a403f5c40284db0e6e1c8d8eb7","modified":1473573067568},{"_id":"themes/jacman/source/img/favicon.ico","hash":"c31d0bad95613a99c5c8977159755cee424f9a6d","modified":1475931555085},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"739808e56a56e10a03bc93d03eb55abd19590942","modified":1475906075491},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1475906075506},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"50e0247e9d39756843b7e4f720503b37bfb6154b","modified":1475906075506},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"cd981db035ec1b6f502fca78fd394c5bd438aba1","modified":1475906075538},{"_id":"themes/jacman/.git/objects/pack/pack-4b3efbbf08e47593281dd3f9097d359f81ff809b.idx","hash":"bf74d6b125726fa8762956df9060d21f9292376a","modified":1475906074617},{"_id":"themes/jacman/.git/refs/heads/master","hash":"51d4013e66aa8b536ba9b382ed64385114d32d9a","modified":1475906075319},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"c01220f0af629f9e23bf125bdc1beef8afc206ef","modified":1475906075428},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"20349dcde9942885d5eae1c302ef26b1b8484f3f","modified":1475906075428},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"1be3335208bfdf36102fd5e9f2db8b5627865e99","modified":1524737756895},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"5b9f5ee6a2cc8bd557550bbdc1a03d237681114e","modified":1475906075428},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fc23ef9b5a412e05436f68ff47146b860d2d4225","modified":1475906075428},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"351e771b1b38244560fc52cf60d91263d3d63eef","modified":1475906075428},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"12b7360326691ebf06bea5d7ee4d54c41f64e2ec","modified":1475906075428},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"091512e19cfcf5bde2a699b211f99874f26587ad","modified":1475906075428},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"5699c270be7b28c5b2c36f453317ccd42789fd3d","modified":1475906075460},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"c536791c286be0b6f6eeba3a2cc300871a5369b7","modified":1524741407126},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"0635fd4a7eef02ed863617f5de996baac6bfd1fa","modified":1524792910402},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"4d2f0df743e1af659efe58fe9e7d60006213ffa5","modified":1524741673332},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"b90568b6b0d675039d4edaf71f4f1439978ec670","modified":1524741515605},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"3ec423b734639614fbd11ec2c3445d3a03f5231d","modified":1475906075460},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"0300d7d289eceb3933c1eebf38f8d10f425c1128","modified":1475906075460},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"75843d727319b1d07ad4b8c2e969036ce0d4f362","modified":1475906075460},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"f1ae52a4f41d4cfdd66cb186b0329af904fead4f","modified":1475906075460},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"3ca7266a44240093143d0c55c74bb6daf579e298","modified":1475906075475},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"b48360e757d501027b7dbe093859d03795476930","modified":1475906075475},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"0dd9c064af5f9c0bd1289cfa75d735f4fa05e57e","modified":1524741765597},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1475906075475},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1475906075475},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1475906075475},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1475906075475},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1475906075475},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1475906075475},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1475906075491},{"_id":"themes/jacman/.git/logs/refs/heads/master","hash":"42b2478f378de723e72c9c875b03afdbd24b06f7","modified":1475906075319},{"_id":"themes/jacman/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1475906075303},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"2aee0cdb80fce512cde66ad229b9e5ee42c0d7b4","modified":1475906075460},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"0766d37a5d51a816d93c5f196e4c2b115fb986c6","modified":1524742055204},{"_id":"themes/jacman/.git/logs/refs/remotes/origin/HEAD","hash":"42b2478f378de723e72c9c875b03afdbd24b06f7","modified":1475906075303},{"_id":"themes/jacman/.git/objects/pack/pack-4b3efbbf08e47593281dd3f9097d359f81ff809b.pack","hash":"87a3c9b270552bd977ceb279f536e7a882f59057","modified":1475906074789}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"transclude及ng-transclude","_content":"> 随笔，小记。。\n\n### transclude？\n\n嵌入的意思,也就是说你是否需要将你的指令（内部）的元素嵌入到你的（模板）中去，默认为false。如果你需要的话，那么就需要将transclude设置为true。如果将这个值设置为true的话，就要配合angular的ng-transclude指令来进行使用，\n\n------\n### 代码实现？\n1.html中的代码\n```\n<!--  指令a-transclude 内部含有元素-->\n<breadcrumb>指令（内部）内容</breadcrumb>\n```\n2.js中的代码\n```\nmyApp.directive('breadcrumb', ['$parse', function($parse) {\n\t\treturn {\n\t\t\ttemplateUrl: 'tmpls/breadcrumb.html',\n            transclude:true\n\t\t}\n}]);\n\n```\n\n3.tmpls/breadcrumb.html模板中的代码\n```\n<ol>\n  <li>\n  \t<a href=\"#\" ng-transclude>模板1</a>\n  \t<a href=\"#\">模板2</a>\n  </li>\n</ol>\n```\n备注：*** 模板由两部分组成，一部分是含有ng-transclude指令的，一部分是不含有这个指令的 ***\n\n*** 最后的结果是 ***\n\n(https://blog.yoyoyuan.top/img/transclude.png)\n\n------\n","source":"_posts/angularjs中的transclude及ng-transclude指令.md","raw":"---\ntitle: transclude及ng-transclude\n---\n> 随笔，小记。。\n\n### transclude？\n\n嵌入的意思,也就是说你是否需要将你的指令（内部）的元素嵌入到你的（模板）中去，默认为false。如果你需要的话，那么就需要将transclude设置为true。如果将这个值设置为true的话，就要配合angular的ng-transclude指令来进行使用，\n\n------\n### 代码实现？\n1.html中的代码\n```\n<!--  指令a-transclude 内部含有元素-->\n<breadcrumb>指令（内部）内容</breadcrumb>\n```\n2.js中的代码\n```\nmyApp.directive('breadcrumb', ['$parse', function($parse) {\n\t\treturn {\n\t\t\ttemplateUrl: 'tmpls/breadcrumb.html',\n            transclude:true\n\t\t}\n}]);\n\n```\n\n3.tmpls/breadcrumb.html模板中的代码\n```\n<ol>\n  <li>\n  \t<a href=\"#\" ng-transclude>模板1</a>\n  \t<a href=\"#\">模板2</a>\n  </li>\n</ol>\n```\n备注：*** 模板由两部分组成，一部分是含有ng-transclude指令的，一部分是不含有这个指令的 ***\n\n*** 最后的结果是 ***\n\n(https://blog.yoyoyuan.top/img/transclude.png)\n\n------\n","slug":"angularjs中的transclude及ng-transclude指令","published":1,"date":"2016-11-05T03:06:52.000Z","updated":"2016-11-05T03:06:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghao8ip0000w0uac3va51rc","content":"<blockquote>\n<p>随笔，小记。。</p>\n</blockquote>\n<h3 id=\"transclude？\"><a href=\"#transclude？\" class=\"headerlink\" title=\"transclude？\"></a>transclude？</h3><p>嵌入的意思,也就是说你是否需要将你的指令（内部）的元素嵌入到你的（模板）中去，默认为false。如果你需要的话，那么就需要将transclude设置为true。如果将这个值设置为true的话，就要配合angular的ng-transclude指令来进行使用，</p>\n<hr>\n<h3 id=\"代码实现？\"><a href=\"#代码实现？\" class=\"headerlink\" title=\"代码实现？\"></a>代码实现？</h3><p>1.html中的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--  指令a-transclude 内部含有元素--&gt;</span><br><span class=\"line\">&lt;breadcrumb&gt;指令（内部）内容&lt;/breadcrumb&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2.js中的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myApp.directive(&apos;breadcrumb&apos;, [&apos;$parse&apos;, function($parse) &#123;</span><br><span class=\"line\">\t\treturn &#123;</span><br><span class=\"line\">\t\t\ttemplateUrl: &apos;tmpls/breadcrumb.html&apos;,</span><br><span class=\"line\">            transclude:true</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure></p>\n<p>3.tmpls/breadcrumb.html模板中的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ol&gt;</span><br><span class=\"line\">  &lt;li&gt;</span><br><span class=\"line\">  \t&lt;a href=&quot;#&quot; ng-transclude&gt;模板1&lt;/a&gt;</span><br><span class=\"line\">  \t&lt;a href=&quot;#&quot;&gt;模板2&lt;/a&gt;</span><br><span class=\"line\">  &lt;/li&gt;</span><br><span class=\"line\">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></p>\n<p>备注：<strong><em> 模板由两部分组成，一部分是含有ng-transclude指令的，一部分是不含有这个指令的 </em></strong></p>\n<p><strong><em> 最后的结果是 </em></strong></p>\n<p>(<a href=\"https://blog.yoyoyuan.top/img/transclude.png\">https://blog.yoyoyuan.top/img/transclude.png</a>)</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>随笔，小记。。</p>\n</blockquote>\n<h3 id=\"transclude？\"><a href=\"#transclude？\" class=\"headerlink\" title=\"transclude？\"></a>transclude？</h3><p>嵌入的意思,也就是说你是否需要将你的指令（内部）的元素嵌入到你的（模板）中去，默认为false。如果你需要的话，那么就需要将transclude设置为true。如果将这个值设置为true的话，就要配合angular的ng-transclude指令来进行使用，</p>\n<hr>\n<h3 id=\"代码实现？\"><a href=\"#代码实现？\" class=\"headerlink\" title=\"代码实现？\"></a>代码实现？</h3><p>1.html中的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--  指令a-transclude 内部含有元素--&gt;</span><br><span class=\"line\">&lt;breadcrumb&gt;指令（内部）内容&lt;/breadcrumb&gt;</span><br></pre></td></tr></table></figure></p>\n<p>2.js中的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myApp.directive(&apos;breadcrumb&apos;, [&apos;$parse&apos;, function($parse) &#123;</span><br><span class=\"line\">\t\treturn &#123;</span><br><span class=\"line\">\t\t\ttemplateUrl: &apos;tmpls/breadcrumb.html&apos;,</span><br><span class=\"line\">            transclude:true</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;]);</span><br></pre></td></tr></table></figure></p>\n<p>3.tmpls/breadcrumb.html模板中的代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ol&gt;</span><br><span class=\"line\">  &lt;li&gt;</span><br><span class=\"line\">  \t&lt;a href=&quot;#&quot; ng-transclude&gt;模板1&lt;/a&gt;</span><br><span class=\"line\">  \t&lt;a href=&quot;#&quot;&gt;模板2&lt;/a&gt;</span><br><span class=\"line\">  &lt;/li&gt;</span><br><span class=\"line\">&lt;/ol&gt;</span><br></pre></td></tr></table></figure></p>\n<p>备注：<strong><em> 模板由两部分组成，一部分是含有ng-transclude指令的，一部分是不含有这个指令的 </em></strong></p>\n<p><strong><em> 最后的结果是 </em></strong></p>\n<p>(<a href=\"https://blog.yoyoyuan.top/img/transclude.png\">https://blog.yoyoyuan.top/img/transclude.png</a>)</p>\n<hr>\n"},{"title":"YOYO滴博客","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: YOYO滴博客\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-10-08T06:25:52.000Z","updated":"2016-10-08T06:25:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghao8it0001w0uarvarqypa","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"gulp搭建","_content":"\n  今天是我写hexo的开篇文章，主要是想初探一下hexo的流程，以及复习复习之前学习的基础东西，也为了以后自己方便观看和分享学习成果。初学者，基础知识不是太官方。。见谅。。直奔主题。\n  今天主要想说的是gulp的搭建，但是在gulp搭建前，需要搭配好相关环境，主要内容为：\n\n> * Node简介及Node的环境搭建\n> * gulp的搭建\n\n------\n>## 一、Node简介及搭建\n\n### **1.1Node.js是什么？**\nNode.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。\n\n注意：Node.js 的包管理器 npm，是全球最大的开源库生态系统。node中只能运行ECMAScript，无法使用 BOM 和 DOM，所以说到底，他就是一个js运行环境。\n\n### ***1.2Node环境的搭建***\nNode版本发展很快，版本前后差异性大，老系统用新版本node跑不过，\t全局安装的第三方组件和node版本相关造成全局版本混乱。然而nvm是解决这一问题的利器。\nnvm是node版本管理工具。它的主要特点是：\n\n 1. 可安装多版本的node。\n 2. 灵活切换当前的node版本。\n 3. 全局安装第三方组件到对应版本的node中。\n\n#### ***1.2.1使用nvm安装Node.js***\nnvm 是 Mac 下的 node 管理工具,如果是需要管理 Windows 下的 node，官方推荐是使用 nvmw 或 nvm-windows\n**下载 nvm 包 地址：https://github.com/coreybutler/nvm-windows/releases**\n下载安装nvm这里就不在赘述了(需要注意最好不要将其安装在中文目录下)。\n安装 nvm 之前最好先删除下已安装的 node 和全局 node 模块\n#### ***1.2.2配置相关的环境变量***\n1. 先使用管理员权限运行install.cmd，\n2. 根目录生成一个settings.txt的文本文件,将其剪切到nvm目录下。\n然后我们把他修改成这样：\n\n    root: D:\\dev\\nvm      //这里表示的是当前文件夹路径\n    path: D:\\dev\\nodejs   //这里表示配置后要要生成的目录\n    arch: 64              //这里为自己电脑的机器位数\n    proxy: none\n3. 先***配置nvm的环境变量***，让其能够在cmd中使用其命令\n我们还会发现，在Path中也会自动添加上D:\\dev\\nvm;或者是D:\\dev\\nodejs，如果有的话，把他们删掉，没有的话更好。\n->先添加：NVM_HOME的变量值为：D:\\dev\\nvm\n->再在Path的最前面输入： ;%NVM_HOME%;\n->打开一个cmd窗口输入命令：nvm v,如果我们会看到当前nvm的版本信息。然后我们可以安装nodejs了\n4. ***安装nodejs**并**配置相关环境***\n配置node环境:先添加：NVM_HOME的变量值为：D:\\dev\\nodejs,再在Path的最前面输入： ;%NVM_SYMLINK%;\n继续输入命令：nvm install latest 我们会看到正在下载的提示，下载完成后 会让你use那个最新的node版本。\n如果你是第一次下载，在use之前，D:\\dev目录下是没有nodejs这个文件夹的，在输入比如： nvm use 5.11.0之后，你会发现，D:\\dev目录下多了一个nodejs文件夹，这个文件夹不是单纯的文件夹，它是一个快捷方式，指向了 D:\\dev\\nvm 里的 v5.11.0 文件夹。\n同样的咱们可以下载其他版本的nodejs，这样通过命令:nvm use 版本号 比如：nvm use 5.11.0就可以轻松实现版本切换了。\n**备注**： 如果你的电脑系统是32位的，那么在下载nodejs版本的时候，一定要指明 32 如： nvm install 5.11.0 32这样在32位的电脑系统中，才可以使用，默认是64位的。\n\n5. ***安装npm及相关指令***\n1. npm 是 nodejs 的包管理和分发工具。它可以让javascript 开发者能够更加轻松的共享代码和共用代码片段，并且通过 npm 管理你分享的代码也很方便快捷和简单。\n**备注**：在每个版本的nodejs中，都会自带npm，为了统一起见，我们安装一个全局的npm工具，这个操作很有必要，因为我们需要安装一些全局的其他包,不会因为切换node版本造成原来下载过的包不可用。\n2. 首先我们进入命令模式,输入 npm config set prefix \"D:\\dev\\nvm\\npm\" 回车，这是在配置npm的全局安装路径,然后在用户文件夹下会生成一个。npmrc的文件,用记事本打开后可以看到如下内容：\n                    prefix=D:\\dev\\nvm\\npm\n3. 然后继续在命令中输入： npm install npm -g 回车后会发现正在下载npm包,在D:\\dev\\nvm\\npm目录中可以看到下载中的文件,以后我们只要用npm安装包的时候加上 -g 就可以把包安装在我们刚刚配置的全局路径下了。\n4. 我们为这个npm配置环境变量： 变量名为：NPM_HOME，变量值为 ：D:\\dev\\nvm\\npm在Path的最前面添加;%NPM_HOME%，注意了，这个一定要添加在 %NVM_SYMLINK%之前，所以我们直接把它放到Path的最前面.最后我们新打开一个命令窗口，输入npm -v ,此时我们使用的就是我们统一下载的npm包了。\n5. 相关指令：\n初始化：npm init\n安装： npm install PackageName --save-dev\n卸载： npm uninstall PackageName --save-dev\n\n\n-------\n\n>## 二、gulp\n\n###***2.1gulp是什么***\ngulp是前端开发过程中一种基于流的代码构建工具，是自动化项目的构建利器。它能自动化地完成 javascript、coffee、sass、less、html/image、css 等文件的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。\n\n\n### ***2.2gulp安装及搭建工作流程***\n\n 1. 创建一个工程文件夹，打开cmd进入该文件夹目录，输入npm init初始化，之后会形成一个packa.json文件用来管理一些下载的依赖包。\n 2. 下载gulp。npm installgulp --save-dev.\n 3. 手动建立一个gulpfiles.js,和开发用到的文件夹：*.css、*.js、*.html、*.img、*.fonts等。\n 4. 下面所有的代码都需要写在gulpfiles.js文件夹里，主要的功能是压缩sass,js,html，监听等\n 5. scss-->css并压缩\n    * 先下载gulp-sass用来将**sass转化成css**：npm install gulp-sass --save-dev\n    * 下载gulp-cssnano用来将**css文件压缩**：npm install gulp-cssnano --save-dev\n    * 然后再gulpfiles.js中写一下代码，后面有注释。\n```python\nvar gulp = require('gulp');         //下载gulp后需要引入gulp包\nvar sass = require('gulp-sass');    //引入gulp-sass包\nvar cssnano = reguire('gulp-cssnano')  //引包\n\ngulp.task('style',function(){       //task()是gulp里的一个方法\n    gulp.src(css/*.scss)            //src()是写scss格式的路径\n    .pipe(sass())               //然后执行sass()函数进行压缩\n    .pipe(cssnano())\n    .pipe(gulp.dest('dest(\"dist/css/\")'))//dest()将压缩的css放到要发布的目录\n})\n```\n然后在cmd中执行: gulp style就可以看到目录中生成一个dest文件夹里面有*.css,而且是压缩过的\n    6. 将js代码压缩并发送到要发布的文件：\n   \n* 将多个js合并的包gulp-concat:npm install --save-dev gulp-concat\n* 将js压缩的包：gulp-uglify:npm install --save-dev gulp-uglify\n* 然后再上面的基础上再添加如下代码：\n```python\nvar concat = require('gulp-concat');\nvar uglify = reguire('gulp-uglify')\ngulp.task('script',function(){\n    gulp.src('js/*.js')\n    .pipe(concat())\n    .pipe(uglify())\n    .pipe(gulp.dest('dist/js'))\n})\n```\n* 在cmd中执行：gulp script就可以看到生成的js的文件\n    7.对html进行压缩\n* 下载htmlmin:npm install --save-dev htmlmin\n```python\nvar htmlmin = require('gulp-htmlmin');\ngulp.task('html',function(){\n    var options = {\n        collapseWhitespace:true,\n        collapseBooleanAttributes:true,\n        removeComments:true,\n        removeEmptyAttributes:true,\n        removeStyleLinkTypeAttributes:true,\n    };\n    gulp.src('*.js')\n    .pipe(htmlmin(options))\n    .pipe(gulp.dest('dist/'))\n})\n```\n* 然后再cmd中执行：gulp html\n**备注：**\n1.collapseWhitespace:清除空格，压缩html\n2.collapseBooleanAttributes:省略布尔属性的值\n3.removeComments:清除html中注释的部分\n4.removeEmptyAttributes:清除所有的空属性\n还没写上的参数：\n5.removeSciptTypeAttributes:清除所有script标签中的type=\"text/javascript\"属性。\n6.removeStyleLinkTypeAttributes:清楚所有Link标签上的type属性。\n7.minifyJS:压缩html中的javascript代码。\n8.minifyCSS:压缩html中的css代码。\n\n        8. 将图片拷入到dist下：\n```pathy\ngulp.task('img',function(){\n    pipe.src('img/*.*')\n    .pipe(gulp.dest(\"dist/img\"))\n})\n```\n        9. 将fonts移入dist文件，同理，不在赘述。\n        10. 构建服务器，这里用的是browser-syncbrowser-sync,下载npm install --save-dev browser-sync \n```pathy\nvar = require ('browser-sync');\ngulp.task('serve',function(){\n    browserSync.init({\n        server:{baseDir:\"dist/\"}\n    })\n})\n``` \n可以在在cmd中执行以下，gulp serve然后再自己本的浏览器输入本地地址。\n        11.设置监听\n```pathy\ngulp.watch(\"*.html\",[\"html\"]);\ngulp.watch(\"css/*.scss\",[\"style\"]);\ngulp.watch(\"js/*js\",[\"script\"]);\ngulp.watch(\"img/*.*\",[\"img\"]);\n```    \n12. 刷新前需要重载：\n```pathy\nvar reload = browserSync.reload;\n\n```   \n13. 在每一个task中都需要添加这一句：\n```pathy\n    .pipe(reload({steam:true}))\n```\n呼啦啦,让我大喘气一下，写了好久啊，凭记忆和各种资料，终于完结。。","source":"_posts/gulp.md","raw":"---\ntitle: gulp搭建\n---\n\n  今天是我写hexo的开篇文章，主要是想初探一下hexo的流程，以及复习复习之前学习的基础东西，也为了以后自己方便观看和分享学习成果。初学者，基础知识不是太官方。。见谅。。直奔主题。\n  今天主要想说的是gulp的搭建，但是在gulp搭建前，需要搭配好相关环境，主要内容为：\n\n> * Node简介及Node的环境搭建\n> * gulp的搭建\n\n------\n>## 一、Node简介及搭建\n\n### **1.1Node.js是什么？**\nNode.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。\n\n注意：Node.js 的包管理器 npm，是全球最大的开源库生态系统。node中只能运行ECMAScript，无法使用 BOM 和 DOM，所以说到底，他就是一个js运行环境。\n\n### ***1.2Node环境的搭建***\nNode版本发展很快，版本前后差异性大，老系统用新版本node跑不过，\t全局安装的第三方组件和node版本相关造成全局版本混乱。然而nvm是解决这一问题的利器。\nnvm是node版本管理工具。它的主要特点是：\n\n 1. 可安装多版本的node。\n 2. 灵活切换当前的node版本。\n 3. 全局安装第三方组件到对应版本的node中。\n\n#### ***1.2.1使用nvm安装Node.js***\nnvm 是 Mac 下的 node 管理工具,如果是需要管理 Windows 下的 node，官方推荐是使用 nvmw 或 nvm-windows\n**下载 nvm 包 地址：https://github.com/coreybutler/nvm-windows/releases**\n下载安装nvm这里就不在赘述了(需要注意最好不要将其安装在中文目录下)。\n安装 nvm 之前最好先删除下已安装的 node 和全局 node 模块\n#### ***1.2.2配置相关的环境变量***\n1. 先使用管理员权限运行install.cmd，\n2. 根目录生成一个settings.txt的文本文件,将其剪切到nvm目录下。\n然后我们把他修改成这样：\n\n    root: D:\\dev\\nvm      //这里表示的是当前文件夹路径\n    path: D:\\dev\\nodejs   //这里表示配置后要要生成的目录\n    arch: 64              //这里为自己电脑的机器位数\n    proxy: none\n3. 先***配置nvm的环境变量***，让其能够在cmd中使用其命令\n我们还会发现，在Path中也会自动添加上D:\\dev\\nvm;或者是D:\\dev\\nodejs，如果有的话，把他们删掉，没有的话更好。\n->先添加：NVM_HOME的变量值为：D:\\dev\\nvm\n->再在Path的最前面输入： ;%NVM_HOME%;\n->打开一个cmd窗口输入命令：nvm v,如果我们会看到当前nvm的版本信息。然后我们可以安装nodejs了\n4. ***安装nodejs**并**配置相关环境***\n配置node环境:先添加：NVM_HOME的变量值为：D:\\dev\\nodejs,再在Path的最前面输入： ;%NVM_SYMLINK%;\n继续输入命令：nvm install latest 我们会看到正在下载的提示，下载完成后 会让你use那个最新的node版本。\n如果你是第一次下载，在use之前，D:\\dev目录下是没有nodejs这个文件夹的，在输入比如： nvm use 5.11.0之后，你会发现，D:\\dev目录下多了一个nodejs文件夹，这个文件夹不是单纯的文件夹，它是一个快捷方式，指向了 D:\\dev\\nvm 里的 v5.11.0 文件夹。\n同样的咱们可以下载其他版本的nodejs，这样通过命令:nvm use 版本号 比如：nvm use 5.11.0就可以轻松实现版本切换了。\n**备注**： 如果你的电脑系统是32位的，那么在下载nodejs版本的时候，一定要指明 32 如： nvm install 5.11.0 32这样在32位的电脑系统中，才可以使用，默认是64位的。\n\n5. ***安装npm及相关指令***\n1. npm 是 nodejs 的包管理和分发工具。它可以让javascript 开发者能够更加轻松的共享代码和共用代码片段，并且通过 npm 管理你分享的代码也很方便快捷和简单。\n**备注**：在每个版本的nodejs中，都会自带npm，为了统一起见，我们安装一个全局的npm工具，这个操作很有必要，因为我们需要安装一些全局的其他包,不会因为切换node版本造成原来下载过的包不可用。\n2. 首先我们进入命令模式,输入 npm config set prefix \"D:\\dev\\nvm\\npm\" 回车，这是在配置npm的全局安装路径,然后在用户文件夹下会生成一个。npmrc的文件,用记事本打开后可以看到如下内容：\n                    prefix=D:\\dev\\nvm\\npm\n3. 然后继续在命令中输入： npm install npm -g 回车后会发现正在下载npm包,在D:\\dev\\nvm\\npm目录中可以看到下载中的文件,以后我们只要用npm安装包的时候加上 -g 就可以把包安装在我们刚刚配置的全局路径下了。\n4. 我们为这个npm配置环境变量： 变量名为：NPM_HOME，变量值为 ：D:\\dev\\nvm\\npm在Path的最前面添加;%NPM_HOME%，注意了，这个一定要添加在 %NVM_SYMLINK%之前，所以我们直接把它放到Path的最前面.最后我们新打开一个命令窗口，输入npm -v ,此时我们使用的就是我们统一下载的npm包了。\n5. 相关指令：\n初始化：npm init\n安装： npm install PackageName --save-dev\n卸载： npm uninstall PackageName --save-dev\n\n\n-------\n\n>## 二、gulp\n\n###***2.1gulp是什么***\ngulp是前端开发过程中一种基于流的代码构建工具，是自动化项目的构建利器。它能自动化地完成 javascript、coffee、sass、less、html/image、css 等文件的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。\n\n\n### ***2.2gulp安装及搭建工作流程***\n\n 1. 创建一个工程文件夹，打开cmd进入该文件夹目录，输入npm init初始化，之后会形成一个packa.json文件用来管理一些下载的依赖包。\n 2. 下载gulp。npm installgulp --save-dev.\n 3. 手动建立一个gulpfiles.js,和开发用到的文件夹：*.css、*.js、*.html、*.img、*.fonts等。\n 4. 下面所有的代码都需要写在gulpfiles.js文件夹里，主要的功能是压缩sass,js,html，监听等\n 5. scss-->css并压缩\n    * 先下载gulp-sass用来将**sass转化成css**：npm install gulp-sass --save-dev\n    * 下载gulp-cssnano用来将**css文件压缩**：npm install gulp-cssnano --save-dev\n    * 然后再gulpfiles.js中写一下代码，后面有注释。\n```python\nvar gulp = require('gulp');         //下载gulp后需要引入gulp包\nvar sass = require('gulp-sass');    //引入gulp-sass包\nvar cssnano = reguire('gulp-cssnano')  //引包\n\ngulp.task('style',function(){       //task()是gulp里的一个方法\n    gulp.src(css/*.scss)            //src()是写scss格式的路径\n    .pipe(sass())               //然后执行sass()函数进行压缩\n    .pipe(cssnano())\n    .pipe(gulp.dest('dest(\"dist/css/\")'))//dest()将压缩的css放到要发布的目录\n})\n```\n然后在cmd中执行: gulp style就可以看到目录中生成一个dest文件夹里面有*.css,而且是压缩过的\n    6. 将js代码压缩并发送到要发布的文件：\n   \n* 将多个js合并的包gulp-concat:npm install --save-dev gulp-concat\n* 将js压缩的包：gulp-uglify:npm install --save-dev gulp-uglify\n* 然后再上面的基础上再添加如下代码：\n```python\nvar concat = require('gulp-concat');\nvar uglify = reguire('gulp-uglify')\ngulp.task('script',function(){\n    gulp.src('js/*.js')\n    .pipe(concat())\n    .pipe(uglify())\n    .pipe(gulp.dest('dist/js'))\n})\n```\n* 在cmd中执行：gulp script就可以看到生成的js的文件\n    7.对html进行压缩\n* 下载htmlmin:npm install --save-dev htmlmin\n```python\nvar htmlmin = require('gulp-htmlmin');\ngulp.task('html',function(){\n    var options = {\n        collapseWhitespace:true,\n        collapseBooleanAttributes:true,\n        removeComments:true,\n        removeEmptyAttributes:true,\n        removeStyleLinkTypeAttributes:true,\n    };\n    gulp.src('*.js')\n    .pipe(htmlmin(options))\n    .pipe(gulp.dest('dist/'))\n})\n```\n* 然后再cmd中执行：gulp html\n**备注：**\n1.collapseWhitespace:清除空格，压缩html\n2.collapseBooleanAttributes:省略布尔属性的值\n3.removeComments:清除html中注释的部分\n4.removeEmptyAttributes:清除所有的空属性\n还没写上的参数：\n5.removeSciptTypeAttributes:清除所有script标签中的type=\"text/javascript\"属性。\n6.removeStyleLinkTypeAttributes:清楚所有Link标签上的type属性。\n7.minifyJS:压缩html中的javascript代码。\n8.minifyCSS:压缩html中的css代码。\n\n        8. 将图片拷入到dist下：\n```pathy\ngulp.task('img',function(){\n    pipe.src('img/*.*')\n    .pipe(gulp.dest(\"dist/img\"))\n})\n```\n        9. 将fonts移入dist文件，同理，不在赘述。\n        10. 构建服务器，这里用的是browser-syncbrowser-sync,下载npm install --save-dev browser-sync \n```pathy\nvar = require ('browser-sync');\ngulp.task('serve',function(){\n    browserSync.init({\n        server:{baseDir:\"dist/\"}\n    })\n})\n``` \n可以在在cmd中执行以下，gulp serve然后再自己本的浏览器输入本地地址。\n        11.设置监听\n```pathy\ngulp.watch(\"*.html\",[\"html\"]);\ngulp.watch(\"css/*.scss\",[\"style\"]);\ngulp.watch(\"js/*js\",[\"script\"]);\ngulp.watch(\"img/*.*\",[\"img\"]);\n```    \n12. 刷新前需要重载：\n```pathy\nvar reload = browserSync.reload;\n\n```   \n13. 在每一个task中都需要添加这一句：\n```pathy\n    .pipe(reload({steam:true}))\n```\n呼啦啦,让我大喘气一下，写了好久啊，凭记忆和各种资料，终于完结。。","slug":"gulp","published":1,"date":"2016-10-28T05:54:52.000Z","updated":"2016-10-28T05:57:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghao8iw0002w0uazaxvmy35","content":"<p>  今天是我写hexo的开篇文章，主要是想初探一下hexo的流程，以及复习复习之前学习的基础东西，也为了以后自己方便观看和分享学习成果。初学者，基础知识不是太官方。。见谅。。直奔主题。<br>  今天主要想说的是gulp的搭建，但是在gulp搭建前，需要搭配好相关环境，主要内容为：</p>\n<blockquote>\n<ul>\n<li>Node简介及Node的环境搭建</li>\n<li>gulp的搭建</li>\n</ul>\n</blockquote>\n<hr>\n<blockquote>\n<h2 id=\"一、Node简介及搭建\"><a href=\"#一、Node简介及搭建\" class=\"headerlink\" title=\"一、Node简介及搭建\"></a>一、Node简介及搭建</h2></blockquote>\n<h3 id=\"1-1Node-js是什么？\"><a href=\"#1-1Node-js是什么？\" class=\"headerlink\" title=\"1.1Node.js是什么？\"></a><strong>1.1Node.js是什么？</strong></h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。</p>\n<p>注意：Node.js 的包管理器 npm，是全球最大的开源库生态系统。node中只能运行ECMAScript，无法使用 BOM 和 DOM，所以说到底，他就是一个js运行环境。</p>\n<h3 id=\"1-2Node环境的搭建\"><a href=\"#1-2Node环境的搭建\" class=\"headerlink\" title=\"1.2Node环境的搭建\"></a><strong><em>1.2Node环境的搭建</em></strong></h3><p>Node版本发展很快，版本前后差异性大，老系统用新版本node跑不过，    全局安装的第三方组件和node版本相关造成全局版本混乱。然而nvm是解决这一问题的利器。<br>nvm是node版本管理工具。它的主要特点是：</p>\n<ol>\n<li>可安装多版本的node。</li>\n<li>灵活切换当前的node版本。</li>\n<li>全局安装第三方组件到对应版本的node中。</li>\n</ol>\n<h4 id=\"1-2-1使用nvm安装Node-js\"><a href=\"#1-2-1使用nvm安装Node-js\" class=\"headerlink\" title=\"1.2.1使用nvm安装Node.js\"></a><strong><em>1.2.1使用nvm安装Node.js</em></strong></h4><p>nvm 是 Mac 下的 node 管理工具,如果是需要管理 Windows 下的 node，官方推荐是使用 nvmw 或 nvm-windows<br><strong>下载 nvm 包 地址：<a href=\"https://github.com/coreybutler/nvm-windows/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/coreybutler/nvm-windows/releases</a></strong><br>下载安装nvm这里就不在赘述了(需要注意最好不要将其安装在中文目录下)。<br>安装 nvm 之前最好先删除下已安装的 node 和全局 node 模块</p>\n<h4 id=\"1-2-2配置相关的环境变量\"><a href=\"#1-2-2配置相关的环境变量\" class=\"headerlink\" title=\"1.2.2配置相关的环境变量\"></a><strong><em>1.2.2配置相关的环境变量</em></strong></h4><ol>\n<li>先使用管理员权限运行install.cmd，</li>\n<li><p>根目录生成一个settings.txt的文本文件,将其剪切到nvm目录下。<br>然后我们把他修改成这样：</p>\n<p> root: D:\\dev\\nvm      //这里表示的是当前文件夹路径<br> path: D:\\dev\\nodejs   //这里表示配置后要要生成的目录<br> arch: 64              //这里为自己电脑的机器位数<br> proxy: none</p>\n</li>\n<li>先<strong><em>配置nvm的环境变量</em></strong>，让其能够在cmd中使用其命令<br>我们还会发现，在Path中也会自动添加上D:\\dev\\nvm;或者是D:\\dev\\nodejs，如果有的话，把他们删掉，没有的话更好。<br>-&gt;先添加：NVM_HOME的变量值为：D:\\dev\\nvm<br>-&gt;再在Path的最前面输入： ;%NVM_HOME%;<br>-&gt;打开一个cmd窗口输入命令：nvm v,如果我们会看到当前nvm的版本信息。然后我们可以安装nodejs了</li>\n<li><p><strong>*安装nodejs</strong>并<strong>配置相关环境*</strong><br>配置node环境:先添加：NVM_HOME的变量值为：D:\\dev\\nodejs,再在Path的最前面输入： ;%NVM_SYMLINK%;<br>继续输入命令：nvm install latest 我们会看到正在下载的提示，下载完成后 会让你use那个最新的node版本。<br>如果你是第一次下载，在use之前，D:\\dev目录下是没有nodejs这个文件夹的，在输入比如： nvm use 5.11.0之后，你会发现，D:\\dev目录下多了一个nodejs文件夹，这个文件夹不是单纯的文件夹，它是一个快捷方式，指向了 D:\\dev\\nvm 里的 v5.11.0 文件夹。<br>同样的咱们可以下载其他版本的nodejs，这样通过命令:nvm use 版本号 比如：nvm use 5.11.0就可以轻松实现版本切换了。<br><strong>备注</strong>： 如果你的电脑系统是32位的，那么在下载nodejs版本的时候，一定要指明 32 如： nvm install 5.11.0 32这样在32位的电脑系统中，才可以使用，默认是64位的。</p>\n</li>\n<li><p><strong><em>安装npm及相关指令</em></strong></p>\n</li>\n<li>npm 是 nodejs 的包管理和分发工具。它可以让javascript 开发者能够更加轻松的共享代码和共用代码片段，并且通过 npm 管理你分享的代码也很方便快捷和简单。<br><strong>备注</strong>：在每个版本的nodejs中，都会自带npm，为了统一起见，我们安装一个全局的npm工具，这个操作很有必要，因为我们需要安装一些全局的其他包,不会因为切换node版本造成原来下载过的包不可用。</li>\n<li>首先我们进入命令模式,输入 npm config set prefix “D:\\dev\\nvm\\npm” 回车，这是在配置npm的全局安装路径,然后在用户文件夹下会生成一个。npmrc的文件,用记事本打开后可以看到如下内容：<pre><code>prefix=D:\\dev\\nvm\\npm\n</code></pre></li>\n<li>然后继续在命令中输入： npm install npm -g 回车后会发现正在下载npm包,在D:\\dev\\nvm\\npm目录中可以看到下载中的文件,以后我们只要用npm安装包的时候加上 -g 就可以把包安装在我们刚刚配置的全局路径下了。</li>\n<li>我们为这个npm配置环境变量： 变量名为：NPM_HOME，变量值为 ：D:\\dev\\nvm\\npm在Path的最前面添加;%NPM_HOME%，注意了，这个一定要添加在 %NVM_SYMLINK%之前，所以我们直接把它放到Path的最前面.最后我们新打开一个命令窗口，输入npm -v ,此时我们使用的就是我们统一下载的npm包了。</li>\n<li>相关指令：<br>初始化：npm init<br>安装： npm install PackageName –save-dev<br>卸载： npm uninstall PackageName –save-dev</li>\n</ol>\n<hr>\n<blockquote>\n<h2 id=\"二、gulp\"><a href=\"#二、gulp\" class=\"headerlink\" title=\"二、gulp\"></a>二、gulp</h2></blockquote>\n<p>###<strong><em>2.1gulp是什么</em></strong><br>gulp是前端开发过程中一种基于流的代码构建工具，是自动化项目的构建利器。它能自动化地完成 javascript、coffee、sass、less、html/image、css 等文件的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。</p>\n<h3 id=\"2-2gulp安装及搭建工作流程\"><a href=\"#2-2gulp安装及搭建工作流程\" class=\"headerlink\" title=\"2.2gulp安装及搭建工作流程\"></a><strong><em>2.2gulp安装及搭建工作流程</em></strong></h3><ol>\n<li>创建一个工程文件夹，打开cmd进入该文件夹目录，输入npm init初始化，之后会形成一个packa.json文件用来管理一些下载的依赖包。</li>\n<li>下载gulp。npm installgulp –save-dev.</li>\n<li>手动建立一个gulpfiles.js,和开发用到的文件夹：<em>.css、</em>.js、<em>.html、</em>.img、*.fonts等。</li>\n<li>下面所有的代码都需要写在gulpfiles.js文件夹里，主要的功能是压缩sass,js,html，监听等</li>\n<li>scss–&gt;css并压缩<ul>\n<li>先下载gulp-sass用来将<strong>sass转化成css</strong>：npm install gulp-sass –save-dev</li>\n<li>下载gulp-cssnano用来将<strong>css文件压缩</strong>：npm install gulp-cssnano –save-dev</li>\n<li>然后再gulpfiles.js中写一下代码，后面有注释。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(<span class=\"string\">'gulp'</span>);         //下载gulp后需要引入gulp包</span><br><span class=\"line\">var sass = require(<span class=\"string\">'gulp-sass'</span>);    //引入gulp-sass包</span><br><span class=\"line\">var cssnano = reguire(<span class=\"string\">'gulp-cssnano'</span>)  //引包</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'style'</span>,function()&#123;       //task()是gulp里的一个方法</span><br><span class=\"line\">    gulp.src(css/*.scss)            //src()是写scss格式的路径</span><br><span class=\"line\">    .pipe(sass())               //然后执行sass()函数进行压缩</span><br><span class=\"line\">    .pipe(cssnano())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dest(\"dist/css/\")'</span>))//dest()将压缩的css放到要发布的目录</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p>然后在cmd中执行: gulp style就可以看到目录中生成一个dest文件夹里面有*.css,而且是压缩过的</p>\n<pre><code>6. 将js代码压缩并发送到要发布的文件：\n</code></pre><ul>\n<li>将多个js合并的包gulp-concat:npm install –save-dev gulp-concat</li>\n<li>将js压缩的包：gulp-uglify:npm install –save-dev gulp-uglify</li>\n<li><p>然后再上面的基础上再添加如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var concat = require(<span class=\"string\">'gulp-concat'</span>);</span><br><span class=\"line\">var uglify = reguire(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\">gulp.task(<span class=\"string\">'script'</span>,function()&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'js/*.js'</span>)</span><br><span class=\"line\">    .pipe(concat())</span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/js'</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在cmd中执行：gulp script就可以看到生成的js的文件<br>  7.对html进行压缩</p>\n</li>\n<li><p>下载htmlmin:npm install –save-dev htmlmin</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var htmlmin = require(<span class=\"string\">'gulp-htmlmin'</span>);</span><br><span class=\"line\">gulp.task(<span class=\"string\">'html'</span>,function()&#123;</span><br><span class=\"line\">    var options = &#123;</span><br><span class=\"line\">        collapseWhitespace:true,</span><br><span class=\"line\">        collapseBooleanAttributes:true,</span><br><span class=\"line\">        removeComments:true,</span><br><span class=\"line\">        removeEmptyAttributes:true,</span><br><span class=\"line\">        removeStyleLinkTypeAttributes:true,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'*.js'</span>)</span><br><span class=\"line\">    .pipe(htmlmin(options))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/'</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后再cmd中执行：gulp html<br><strong>备注：</strong><br>1.collapseWhitespace:清除空格，压缩html<br>2.collapseBooleanAttributes:省略布尔属性的值<br>3.removeComments:清除html中注释的部分<br>4.removeEmptyAttributes:清除所有的空属性<br>还没写上的参数：<br>5.removeSciptTypeAttributes:清除所有script标签中的type=”text/javascript”属性。<br>6.removeStyleLinkTypeAttributes:清楚所有Link标签上的type属性。<br>7.minifyJS:压缩html中的javascript代码。<br>8.minifyCSS:压缩html中的css代码。</p>\n<pre><code>8. 将图片拷入到dist下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(&apos;img&apos;,function()&#123;</span><br><span class=\"line\">    pipe.src(&apos;img/*.*&apos;)</span><br><span class=\"line\">    .pipe(gulp.dest(&quot;dist/img&quot;))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<pre><code>9. 将fonts移入dist文件，同理，不在赘述。\n10. 构建服务器，这里用的是browser-syncbrowser-sync,下载npm install --save-dev browser-sync \n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var = require (&apos;browser-sync&apos;);</span><br><span class=\"line\">gulp.task(&apos;serve&apos;,function()&#123;</span><br><span class=\"line\">    browserSync.init(&#123;</span><br><span class=\"line\">        server:&#123;baseDir:&quot;dist/&quot;&#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">``` </span><br><span class=\"line\">可以在在cmd中执行以下，gulp serve然后再自己本的浏览器输入本地地址。</span><br><span class=\"line\">        11.设置监听</span><br><span class=\"line\">```pathy</span><br><span class=\"line\">gulp.watch(&quot;*.html&quot;,[&quot;html&quot;]);</span><br><span class=\"line\">gulp.watch(&quot;css/*.scss&quot;,[&quot;style&quot;]);</span><br><span class=\"line\">gulp.watch(&quot;js/*js&quot;,[&quot;script&quot;]);</span><br><span class=\"line\">gulp.watch(&quot;img/*.*&quot;,[&quot;img&quot;]);</span><br><span class=\"line\">```    </span><br><span class=\"line\">12. 刷新前需要重载：</span><br><span class=\"line\">```pathy</span><br><span class=\"line\">var reload = browserSync.reload;</span><br><span class=\"line\"></span><br><span class=\"line\">```   </span><br><span class=\"line\">13. 在每一个task中都需要添加这一句：</span><br><span class=\"line\">```pathy</span><br><span class=\"line\">    .pipe(reload(&#123;steam:true&#125;))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>呼啦啦,让我大喘气一下，写了好久啊，凭记忆和各种资料，终于完结。。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>  今天是我写hexo的开篇文章，主要是想初探一下hexo的流程，以及复习复习之前学习的基础东西，也为了以后自己方便观看和分享学习成果。初学者，基础知识不是太官方。。见谅。。直奔主题。<br>  今天主要想说的是gulp的搭建，但是在gulp搭建前，需要搭配好相关环境，主要内容为：</p>\n<blockquote>\n<ul>\n<li>Node简介及Node的环境搭建</li>\n<li>gulp的搭建</li>\n</ul>\n</blockquote>\n<hr>\n<blockquote>\n<h2 id=\"一、Node简介及搭建\"><a href=\"#一、Node简介及搭建\" class=\"headerlink\" title=\"一、Node简介及搭建\"></a>一、Node简介及搭建</h2></blockquote>\n<h3 id=\"1-1Node-js是什么？\"><a href=\"#1-1Node-js是什么？\" class=\"headerlink\" title=\"1.1Node.js是什么？\"></a><strong>1.1Node.js是什么？</strong></h3><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。</p>\n<p>注意：Node.js 的包管理器 npm，是全球最大的开源库生态系统。node中只能运行ECMAScript，无法使用 BOM 和 DOM，所以说到底，他就是一个js运行环境。</p>\n<h3 id=\"1-2Node环境的搭建\"><a href=\"#1-2Node环境的搭建\" class=\"headerlink\" title=\"1.2Node环境的搭建\"></a><strong><em>1.2Node环境的搭建</em></strong></h3><p>Node版本发展很快，版本前后差异性大，老系统用新版本node跑不过，    全局安装的第三方组件和node版本相关造成全局版本混乱。然而nvm是解决这一问题的利器。<br>nvm是node版本管理工具。它的主要特点是：</p>\n<ol>\n<li>可安装多版本的node。</li>\n<li>灵活切换当前的node版本。</li>\n<li>全局安装第三方组件到对应版本的node中。</li>\n</ol>\n<h4 id=\"1-2-1使用nvm安装Node-js\"><a href=\"#1-2-1使用nvm安装Node-js\" class=\"headerlink\" title=\"1.2.1使用nvm安装Node.js\"></a><strong><em>1.2.1使用nvm安装Node.js</em></strong></h4><p>nvm 是 Mac 下的 node 管理工具,如果是需要管理 Windows 下的 node，官方推荐是使用 nvmw 或 nvm-windows<br><strong>下载 nvm 包 地址：<a href=\"https://github.com/coreybutler/nvm-windows/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/coreybutler/nvm-windows/releases</a></strong><br>下载安装nvm这里就不在赘述了(需要注意最好不要将其安装在中文目录下)。<br>安装 nvm 之前最好先删除下已安装的 node 和全局 node 模块</p>\n<h4 id=\"1-2-2配置相关的环境变量\"><a href=\"#1-2-2配置相关的环境变量\" class=\"headerlink\" title=\"1.2.2配置相关的环境变量\"></a><strong><em>1.2.2配置相关的环境变量</em></strong></h4><ol>\n<li>先使用管理员权限运行install.cmd，</li>\n<li><p>根目录生成一个settings.txt的文本文件,将其剪切到nvm目录下。<br>然后我们把他修改成这样：</p>\n<p> root: D:\\dev\\nvm      //这里表示的是当前文件夹路径<br> path: D:\\dev\\nodejs   //这里表示配置后要要生成的目录<br> arch: 64              //这里为自己电脑的机器位数<br> proxy: none</p>\n</li>\n<li>先<strong><em>配置nvm的环境变量</em></strong>，让其能够在cmd中使用其命令<br>我们还会发现，在Path中也会自动添加上D:\\dev\\nvm;或者是D:\\dev\\nodejs，如果有的话，把他们删掉，没有的话更好。<br>-&gt;先添加：NVM_HOME的变量值为：D:\\dev\\nvm<br>-&gt;再在Path的最前面输入： ;%NVM_HOME%;<br>-&gt;打开一个cmd窗口输入命令：nvm v,如果我们会看到当前nvm的版本信息。然后我们可以安装nodejs了</li>\n<li><p><strong>*安装nodejs</strong>并<strong>配置相关环境*</strong><br>配置node环境:先添加：NVM_HOME的变量值为：D:\\dev\\nodejs,再在Path的最前面输入： ;%NVM_SYMLINK%;<br>继续输入命令：nvm install latest 我们会看到正在下载的提示，下载完成后 会让你use那个最新的node版本。<br>如果你是第一次下载，在use之前，D:\\dev目录下是没有nodejs这个文件夹的，在输入比如： nvm use 5.11.0之后，你会发现，D:\\dev目录下多了一个nodejs文件夹，这个文件夹不是单纯的文件夹，它是一个快捷方式，指向了 D:\\dev\\nvm 里的 v5.11.0 文件夹。<br>同样的咱们可以下载其他版本的nodejs，这样通过命令:nvm use 版本号 比如：nvm use 5.11.0就可以轻松实现版本切换了。<br><strong>备注</strong>： 如果你的电脑系统是32位的，那么在下载nodejs版本的时候，一定要指明 32 如： nvm install 5.11.0 32这样在32位的电脑系统中，才可以使用，默认是64位的。</p>\n</li>\n<li><p><strong><em>安装npm及相关指令</em></strong></p>\n</li>\n<li>npm 是 nodejs 的包管理和分发工具。它可以让javascript 开发者能够更加轻松的共享代码和共用代码片段，并且通过 npm 管理你分享的代码也很方便快捷和简单。<br><strong>备注</strong>：在每个版本的nodejs中，都会自带npm，为了统一起见，我们安装一个全局的npm工具，这个操作很有必要，因为我们需要安装一些全局的其他包,不会因为切换node版本造成原来下载过的包不可用。</li>\n<li>首先我们进入命令模式,输入 npm config set prefix “D:\\dev\\nvm\\npm” 回车，这是在配置npm的全局安装路径,然后在用户文件夹下会生成一个。npmrc的文件,用记事本打开后可以看到如下内容：<pre><code>prefix=D:\\dev\\nvm\\npm\n</code></pre></li>\n<li>然后继续在命令中输入： npm install npm -g 回车后会发现正在下载npm包,在D:\\dev\\nvm\\npm目录中可以看到下载中的文件,以后我们只要用npm安装包的时候加上 -g 就可以把包安装在我们刚刚配置的全局路径下了。</li>\n<li>我们为这个npm配置环境变量： 变量名为：NPM_HOME，变量值为 ：D:\\dev\\nvm\\npm在Path的最前面添加;%NPM_HOME%，注意了，这个一定要添加在 %NVM_SYMLINK%之前，所以我们直接把它放到Path的最前面.最后我们新打开一个命令窗口，输入npm -v ,此时我们使用的就是我们统一下载的npm包了。</li>\n<li>相关指令：<br>初始化：npm init<br>安装： npm install PackageName –save-dev<br>卸载： npm uninstall PackageName –save-dev</li>\n</ol>\n<hr>\n<blockquote>\n<h2 id=\"二、gulp\"><a href=\"#二、gulp\" class=\"headerlink\" title=\"二、gulp\"></a>二、gulp</h2></blockquote>\n<p>###<strong><em>2.1gulp是什么</em></strong><br>gulp是前端开发过程中一种基于流的代码构建工具，是自动化项目的构建利器。它能自动化地完成 javascript、coffee、sass、less、html/image、css 等文件的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。</p>\n<h3 id=\"2-2gulp安装及搭建工作流程\"><a href=\"#2-2gulp安装及搭建工作流程\" class=\"headerlink\" title=\"2.2gulp安装及搭建工作流程\"></a><strong><em>2.2gulp安装及搭建工作流程</em></strong></h3><ol>\n<li>创建一个工程文件夹，打开cmd进入该文件夹目录，输入npm init初始化，之后会形成一个packa.json文件用来管理一些下载的依赖包。</li>\n<li>下载gulp。npm installgulp –save-dev.</li>\n<li>手动建立一个gulpfiles.js,和开发用到的文件夹：<em>.css、</em>.js、<em>.html、</em>.img、*.fonts等。</li>\n<li>下面所有的代码都需要写在gulpfiles.js文件夹里，主要的功能是压缩sass,js,html，监听等</li>\n<li>scss–&gt;css并压缩<ul>\n<li>先下载gulp-sass用来将<strong>sass转化成css</strong>：npm install gulp-sass –save-dev</li>\n<li>下载gulp-cssnano用来将<strong>css文件压缩</strong>：npm install gulp-cssnano –save-dev</li>\n<li>然后再gulpfiles.js中写一下代码，后面有注释。<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var gulp = require(<span class=\"string\">'gulp'</span>);         //下载gulp后需要引入gulp包</span><br><span class=\"line\">var sass = require(<span class=\"string\">'gulp-sass'</span>);    //引入gulp-sass包</span><br><span class=\"line\">var cssnano = reguire(<span class=\"string\">'gulp-cssnano'</span>)  //引包</span><br><span class=\"line\"></span><br><span class=\"line\">gulp.task(<span class=\"string\">'style'</span>,function()&#123;       //task()是gulp里的一个方法</span><br><span class=\"line\">    gulp.src(css/*.scss)            //src()是写scss格式的路径</span><br><span class=\"line\">    .pipe(sass())               //然后执行sass()函数进行压缩</span><br><span class=\"line\">    .pipe(cssnano())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dest(\"dist/css/\")'</span>))//dest()将压缩的css放到要发布的目录</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<p>然后在cmd中执行: gulp style就可以看到目录中生成一个dest文件夹里面有*.css,而且是压缩过的</p>\n<pre><code>6. 将js代码压缩并发送到要发布的文件：\n</code></pre><ul>\n<li>将多个js合并的包gulp-concat:npm install –save-dev gulp-concat</li>\n<li>将js压缩的包：gulp-uglify:npm install –save-dev gulp-uglify</li>\n<li><p>然后再上面的基础上再添加如下代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var concat = require(<span class=\"string\">'gulp-concat'</span>);</span><br><span class=\"line\">var uglify = reguire(<span class=\"string\">'gulp-uglify'</span>)</span><br><span class=\"line\">gulp.task(<span class=\"string\">'script'</span>,function()&#123;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'js/*.js'</span>)</span><br><span class=\"line\">    .pipe(concat())</span><br><span class=\"line\">    .pipe(uglify())</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/js'</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在cmd中执行：gulp script就可以看到生成的js的文件<br>  7.对html进行压缩</p>\n</li>\n<li><p>下载htmlmin:npm install –save-dev htmlmin</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var htmlmin = require(<span class=\"string\">'gulp-htmlmin'</span>);</span><br><span class=\"line\">gulp.task(<span class=\"string\">'html'</span>,function()&#123;</span><br><span class=\"line\">    var options = &#123;</span><br><span class=\"line\">        collapseWhitespace:true,</span><br><span class=\"line\">        collapseBooleanAttributes:true,</span><br><span class=\"line\">        removeComments:true,</span><br><span class=\"line\">        removeEmptyAttributes:true,</span><br><span class=\"line\">        removeStyleLinkTypeAttributes:true,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    gulp.src(<span class=\"string\">'*.js'</span>)</span><br><span class=\"line\">    .pipe(htmlmin(options))</span><br><span class=\"line\">    .pipe(gulp.dest(<span class=\"string\">'dist/'</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>然后再cmd中执行：gulp html<br><strong>备注：</strong><br>1.collapseWhitespace:清除空格，压缩html<br>2.collapseBooleanAttributes:省略布尔属性的值<br>3.removeComments:清除html中注释的部分<br>4.removeEmptyAttributes:清除所有的空属性<br>还没写上的参数：<br>5.removeSciptTypeAttributes:清除所有script标签中的type=”text/javascript”属性。<br>6.removeStyleLinkTypeAttributes:清楚所有Link标签上的type属性。<br>7.minifyJS:压缩html中的javascript代码。<br>8.minifyCSS:压缩html中的css代码。</p>\n<pre><code>8. 将图片拷入到dist下：\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gulp.task(&apos;img&apos;,function()&#123;</span><br><span class=\"line\">    pipe.src(&apos;img/*.*&apos;)</span><br><span class=\"line\">    .pipe(gulp.dest(&quot;dist/img&quot;))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<pre><code>9. 将fonts移入dist文件，同理，不在赘述。\n10. 构建服务器，这里用的是browser-syncbrowser-sync,下载npm install --save-dev browser-sync \n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var = require (&apos;browser-sync&apos;);</span><br><span class=\"line\">gulp.task(&apos;serve&apos;,function()&#123;</span><br><span class=\"line\">    browserSync.init(&#123;</span><br><span class=\"line\">        server:&#123;baseDir:&quot;dist/&quot;&#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">``` </span><br><span class=\"line\">可以在在cmd中执行以下，gulp serve然后再自己本的浏览器输入本地地址。</span><br><span class=\"line\">        11.设置监听</span><br><span class=\"line\">```pathy</span><br><span class=\"line\">gulp.watch(&quot;*.html&quot;,[&quot;html&quot;]);</span><br><span class=\"line\">gulp.watch(&quot;css/*.scss&quot;,[&quot;style&quot;]);</span><br><span class=\"line\">gulp.watch(&quot;js/*js&quot;,[&quot;script&quot;]);</span><br><span class=\"line\">gulp.watch(&quot;img/*.*&quot;,[&quot;img&quot;]);</span><br><span class=\"line\">```    </span><br><span class=\"line\">12. 刷新前需要重载：</span><br><span class=\"line\">```pathy</span><br><span class=\"line\">var reload = browserSync.reload;</span><br><span class=\"line\"></span><br><span class=\"line\">```   </span><br><span class=\"line\">13. 在每一个task中都需要添加这一句：</span><br><span class=\"line\">```pathy</span><br><span class=\"line\">    .pipe(reload(&#123;steam:true&#125;))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>呼啦啦,让我大喘气一下，写了好久啊，凭记忆和各种资料，终于完结。。</p>\n"},{"title":"关于安装jdk后没有javac文件的小结","_content":"今天在用ionic的时候遇到了这个让人恶心的问题，我也是没谁了，折腾了一上午的时间，总算解决了，在这里总结一下我通过查看各种资料和自己遇到的问题，希望对大家有帮助。\n\n\n* 第一种情况\n首先要确保环境变量是否搭建好，有的电脑在安装好后会自动搭建好环境的，但是有的电脑需要自己去搭建，\n解决方案：在属性--->高级下有个环境变量---->在系统环境变量path后面加；D:\\Program Files\\Java\\jdk1.8.0_102\\bin;JAVA_HOME,是可以不用配置的。classpath是跑项目的时候用到的不重要。\n* 第二种情况：\n可能是因为你之前安装过一个不完整的JDK导致的，你又新安装了已个JDK，建议 把你的JAVA_HOME , path清理一下 ,把JDK卸载干净,重新安装, 在系统环境变量path后面加；D:\\Program Files\\Java\\jdk1.8.0_102\\bin;  \n* 第三种情况\n这是我遇到的令人抓狂的事，JDK和JRE一定不能安装在同一文件夹中，（jdk自带的那个jre除外）否则运行的时候会找不到javac命令。JRE晚于JDK安装，而JRE只是提供Java运行环境，不需要javac编译命令的。JRE安装前你会发现它会自动删除一些无关文件，如果同JDK安装在同一目录下，原本JDK中完好的javac命令就会被删除！！\n解决方案：重新安装一次JDK 你会发现系统会安装两次文件 第一次的是jdk 第二次的是jre 只要保证你两次安装的目录不是同一个就OK","source":"_posts/jdk.md","raw":"---\ntitle: 关于安装jdk后没有javac文件的小结\n---\n今天在用ionic的时候遇到了这个让人恶心的问题，我也是没谁了，折腾了一上午的时间，总算解决了，在这里总结一下我通过查看各种资料和自己遇到的问题，希望对大家有帮助。\n\n\n* 第一种情况\n首先要确保环境变量是否搭建好，有的电脑在安装好后会自动搭建好环境的，但是有的电脑需要自己去搭建，\n解决方案：在属性--->高级下有个环境变量---->在系统环境变量path后面加；D:\\Program Files\\Java\\jdk1.8.0_102\\bin;JAVA_HOME,是可以不用配置的。classpath是跑项目的时候用到的不重要。\n* 第二种情况：\n可能是因为你之前安装过一个不完整的JDK导致的，你又新安装了已个JDK，建议 把你的JAVA_HOME , path清理一下 ,把JDK卸载干净,重新安装, 在系统环境变量path后面加；D:\\Program Files\\Java\\jdk1.8.0_102\\bin;  \n* 第三种情况\n这是我遇到的令人抓狂的事，JDK和JRE一定不能安装在同一文件夹中，（jdk自带的那个jre除外）否则运行的时候会找不到javac命令。JRE晚于JDK安装，而JRE只是提供Java运行环境，不需要javac编译命令的。JRE安装前你会发现它会自动删除一些无关文件，如果同JDK安装在同一目录下，原本JDK中完好的javac命令就会被删除！！\n解决方案：重新安装一次JDK 你会发现系统会安装两次文件 第一次的是jdk 第二次的是jre 只要保证你两次安装的目录不是同一个就OK","slug":"jdk","published":1,"date":"2016-10-18T04:25:52.000Z","updated":"2016-10-18T05:58:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghao8ix0003w0uau69py1hx","content":"<p>今天在用ionic的时候遇到了这个让人恶心的问题，我也是没谁了，折腾了一上午的时间，总算解决了，在这里总结一下我通过查看各种资料和自己遇到的问题，希望对大家有帮助。</p>\n<ul>\n<li>第一种情况<br>首先要确保环境变量是否搭建好，有的电脑在安装好后会自动搭建好环境的，但是有的电脑需要自己去搭建，<br>解决方案：在属性—&gt;高级下有个环境变量—-&gt;在系统环境变量path后面加；D:\\Program Files\\Java\\jdk1.8.0_102\\bin;JAVA_HOME,是可以不用配置的。classpath是跑项目的时候用到的不重要。</li>\n<li>第二种情况：<br>可能是因为你之前安装过一个不完整的JDK导致的，你又新安装了已个JDK，建议 把你的JAVA_HOME , path清理一下 ,把JDK卸载干净,重新安装, 在系统环境变量path后面加；D:\\Program Files\\Java\\jdk1.8.0_102\\bin;  </li>\n<li>第三种情况<br>这是我遇到的令人抓狂的事，JDK和JRE一定不能安装在同一文件夹中，（jdk自带的那个jre除外）否则运行的时候会找不到javac命令。JRE晚于JDK安装，而JRE只是提供Java运行环境，不需要javac编译命令的。JRE安装前你会发现它会自动删除一些无关文件，如果同JDK安装在同一目录下，原本JDK中完好的javac命令就会被删除！！<br>解决方案：重新安装一次JDK 你会发现系统会安装两次文件 第一次的是jdk 第二次的是jre 只要保证你两次安装的目录不是同一个就OK</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>今天在用ionic的时候遇到了这个让人恶心的问题，我也是没谁了，折腾了一上午的时间，总算解决了，在这里总结一下我通过查看各种资料和自己遇到的问题，希望对大家有帮助。</p>\n<ul>\n<li>第一种情况<br>首先要确保环境变量是否搭建好，有的电脑在安装好后会自动搭建好环境的，但是有的电脑需要自己去搭建，<br>解决方案：在属性—&gt;高级下有个环境变量—-&gt;在系统环境变量path后面加；D:\\Program Files\\Java\\jdk1.8.0_102\\bin;JAVA_HOME,是可以不用配置的。classpath是跑项目的时候用到的不重要。</li>\n<li>第二种情况：<br>可能是因为你之前安装过一个不完整的JDK导致的，你又新安装了已个JDK，建议 把你的JAVA_HOME , path清理一下 ,把JDK卸载干净,重新安装, 在系统环境变量path后面加；D:\\Program Files\\Java\\jdk1.8.0_102\\bin;  </li>\n<li>第三种情况<br>这是我遇到的令人抓狂的事，JDK和JRE一定不能安装在同一文件夹中，（jdk自带的那个jre除外）否则运行的时候会找不到javac命令。JRE晚于JDK安装，而JRE只是提供Java运行环境，不需要javac编译命令的。JRE安装前你会发现它会自动删除一些无关文件，如果同JDK安装在同一目录下，原本JDK中完好的javac命令就会被删除！！<br>解决方案：重新安装一次JDK 你会发现系统会安装两次文件 第一次的是jdk 第二次的是jre 只要保证你两次安装的目录不是同一个就OK</li>\n</ul>\n"},{"title":"js中的集合","_content":"\n方法语法：map()\nmap(callback)\n为包装集中的每一个元素调用回调函数，并将返回值收集到jQuery对象的实例中。\n参数\ncallback （函数）回调函数，为包装集中的每个元素调用该函数。\n比如，下面的代码将页面上所有div元素的id值收集到一个javascript数组中：\n复制代码 代码如下:\n\nvar iDs = $(\"div\").map(function(){\n    return (this.id==undefined) ? null :this.id;\n}).get();\n再看如下的表单中包含的一组 checkbox 框：\n复制代码 代码如下:\n```\n\n<form method=\"post\" action=\"\">\n<fieldset>\n<div>\n<label for=\"two\">2</label>\n<input type=\"checkbox\" value=\"2\" id=\"two\" name=\"number[]\">\n</div>\n<div>\n<label for=\"four\">4</label>\n<input type=\"checkbox\" value=\"4\" id=\"four\" name=\"number[]\">\n</div>\n<div>\n<label for=\"six\">6</label>\n<input type=\"checkbox\" value=\"6\" id=\"six\" name=\"number[]\">\n</div>\n<div>\n<label for=\"eight\">8</label>\n<input type=\"text\" value=\"8\" id=\"eight\" name=\"number[]\">\n</div>\n</fieldset>\n</form>\n\n```\n我们可以得到一个用逗号分隔的复选框 ID:\n复制代码 代码如下:\n\n$(':checkbox').map(function() {\nreturn this.id;\n}).get().join();\n此调用的结果是字符串， \"two,four,six\".\n在回调函数中，this指向每次迭代中的当前DOM元素。\n方法语法：each()\neach(iterator)\n遍历匹配集里所有的元素，为每一个元素调用传入的迭代函数\niterator （函数）回调函数，为匹配集中的每个元素调用\neach()方法也可以用来遍历javascript数组对象甚至单个对象，举个栗子：\n复制代码 代码如下:\n\n$([a,b,c,d]).each(function(){\n    alert(this);\n})\n这个语句会为传入$()中数组的每个元素调用迭代函数，函数中的this指向单独的数组项。\n每次回调函数执行时，会传递当前循环次数作为参数(从0开始计数)。更重要的是，回调函数是在当前DOM元素为上下文的语境中触发的。因此关键字 this 总是指向这个元素。\n假设页面上有这样一个简单的无序列表。\n复制代码 代码如下:\n\n<ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n你可以选中并迭代这些列表：\n复制代码 代码如下:\n\n$( \"li\" ).each(function( index ) {\nconsole.log( index + \": \"\" + $(this).text() );\n});\n列表中每一项会显示在下面的消息中：\n0: foo\n1: bar \n两者的区别\nmap()方法主要用来遍历操作数组和对象，each()主要用于遍历jquery对象。\neach()返回的是原来的数组，并不会新创建一个数组。\nmap()方法会返回一个新的数组。如果在没有必要的情况下使用map，则有可能造成内存浪费。","source":"_posts/jq基础2.md","raw":"---\n\ntitle: js中的集合\n\n---\n\n方法语法：map()\nmap(callback)\n为包装集中的每一个元素调用回调函数，并将返回值收集到jQuery对象的实例中。\n参数\ncallback （函数）回调函数，为包装集中的每个元素调用该函数。\n比如，下面的代码将页面上所有div元素的id值收集到一个javascript数组中：\n复制代码 代码如下:\n\nvar iDs = $(\"div\").map(function(){\n    return (this.id==undefined) ? null :this.id;\n}).get();\n再看如下的表单中包含的一组 checkbox 框：\n复制代码 代码如下:\n```\n\n<form method=\"post\" action=\"\">\n<fieldset>\n<div>\n<label for=\"two\">2</label>\n<input type=\"checkbox\" value=\"2\" id=\"two\" name=\"number[]\">\n</div>\n<div>\n<label for=\"four\">4</label>\n<input type=\"checkbox\" value=\"4\" id=\"four\" name=\"number[]\">\n</div>\n<div>\n<label for=\"six\">6</label>\n<input type=\"checkbox\" value=\"6\" id=\"six\" name=\"number[]\">\n</div>\n<div>\n<label for=\"eight\">8</label>\n<input type=\"text\" value=\"8\" id=\"eight\" name=\"number[]\">\n</div>\n</fieldset>\n</form>\n\n```\n我们可以得到一个用逗号分隔的复选框 ID:\n复制代码 代码如下:\n\n$(':checkbox').map(function() {\nreturn this.id;\n}).get().join();\n此调用的结果是字符串， \"two,four,six\".\n在回调函数中，this指向每次迭代中的当前DOM元素。\n方法语法：each()\neach(iterator)\n遍历匹配集里所有的元素，为每一个元素调用传入的迭代函数\niterator （函数）回调函数，为匹配集中的每个元素调用\neach()方法也可以用来遍历javascript数组对象甚至单个对象，举个栗子：\n复制代码 代码如下:\n\n$([a,b,c,d]).each(function(){\n    alert(this);\n})\n这个语句会为传入$()中数组的每个元素调用迭代函数，函数中的this指向单独的数组项。\n每次回调函数执行时，会传递当前循环次数作为参数(从0开始计数)。更重要的是，回调函数是在当前DOM元素为上下文的语境中触发的。因此关键字 this 总是指向这个元素。\n假设页面上有这样一个简单的无序列表。\n复制代码 代码如下:\n\n<ul>\n<li>foo</li>\n<li>bar</li>\n</ul>\n你可以选中并迭代这些列表：\n复制代码 代码如下:\n\n$( \"li\" ).each(function( index ) {\nconsole.log( index + \": \"\" + $(this).text() );\n});\n列表中每一项会显示在下面的消息中：\n0: foo\n1: bar \n两者的区别\nmap()方法主要用来遍历操作数组和对象，each()主要用于遍历jquery对象。\neach()返回的是原来的数组，并不会新创建一个数组。\nmap()方法会返回一个新的数组。如果在没有必要的情况下使用map，则有可能造成内存浪费。","slug":"jq基础2","published":1,"date":"2016-11-05T01:06:52.000Z","updated":"2016-11-05T03:06:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghao8iy0004w0uaqzrnc1n4","content":"<p>方法语法：map()<br>map(callback)<br>为包装集中的每一个元素调用回调函数，并将返回值收集到jQuery对象的实例中。<br>参数<br>callback （函数）回调函数，为包装集中的每个元素调用该函数。<br>比如，下面的代码将页面上所有div元素的id值收集到一个javascript数组中：<br>复制代码 代码如下:</p>\n<p>var iDs = $(“div”).map(function(){<br>    return (this.id==undefined) ? null :this.id;<br>}).get();<br>再看如下的表单中包含的一组 checkbox 框：<br>复制代码 代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;form method=&quot;post&quot; action=&quot;&quot;&gt;</span><br><span class=\"line\">&lt;fieldset&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;label for=&quot;two&quot;&gt;2&lt;/label&gt;</span><br><span class=\"line\">&lt;input type=&quot;checkbox&quot; value=&quot;2&quot; id=&quot;two&quot; name=&quot;number[]&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;label for=&quot;four&quot;&gt;4&lt;/label&gt;</span><br><span class=\"line\">&lt;input type=&quot;checkbox&quot; value=&quot;4&quot; id=&quot;four&quot; name=&quot;number[]&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;label for=&quot;six&quot;&gt;6&lt;/label&gt;</span><br><span class=\"line\">&lt;input type=&quot;checkbox&quot; value=&quot;6&quot; id=&quot;six&quot; name=&quot;number[]&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;label for=&quot;eight&quot;&gt;8&lt;/label&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot; value=&quot;8&quot; id=&quot;eight&quot; name=&quot;number[]&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/fieldset&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p>\n<p>我们可以得到一个用逗号分隔的复选框 ID:<br>复制代码 代码如下:</p>\n<p>$(‘:checkbox’).map(function() {<br>return this.id;<br>}).get().join();<br>此调用的结果是字符串， “two,four,six”.<br>在回调函数中，this指向每次迭代中的当前DOM元素。<br>方法语法：each()<br>each(iterator)<br>遍历匹配集里所有的元素，为每一个元素调用传入的迭代函数<br>iterator （函数）回调函数，为匹配集中的每个元素调用<br>each()方法也可以用来遍历javascript数组对象甚至单个对象，举个栗子：<br>复制代码 代码如下:</p>\n<p>$([a,b,c,d]).each(function(){<br>    alert(this);<br>})<br>这个语句会为传入$()中数组的每个元素调用迭代函数，函数中的this指向单独的数组项。<br>每次回调函数执行时，会传递当前循环次数作为参数(从0开始计数)。更重要的是，回调函数是在当前DOM元素为上下文的语境中触发的。因此关键字 this 总是指向这个元素。<br>假设页面上有这样一个简单的无序列表。<br>复制代码 代码如下:</p>\n<p><ul></ul></p>\n<p><li>foo</li></p>\n<p><li>bar</li><br><br>你可以选中并迭代这些列表：<br>复制代码 代码如下:</p>\n<p>$( “li” ).each(function( index ) {<br>console.log( index + “: “” + $(this).text() );<br>});<br>列表中每一项会显示在下面的消息中：<br>0: foo<br>1: bar<br>两者的区别<br>map()方法主要用来遍历操作数组和对象，each()主要用于遍历jquery对象。<br>each()返回的是原来的数组，并不会新创建一个数组。<br>map()方法会返回一个新的数组。如果在没有必要的情况下使用map，则有可能造成内存浪费。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>方法语法：map()<br>map(callback)<br>为包装集中的每一个元素调用回调函数，并将返回值收集到jQuery对象的实例中。<br>参数<br>callback （函数）回调函数，为包装集中的每个元素调用该函数。<br>比如，下面的代码将页面上所有div元素的id值收集到一个javascript数组中：<br>复制代码 代码如下:</p>\n<p>var iDs = $(“div”).map(function(){<br>    return (this.id==undefined) ? null :this.id;<br>}).get();<br>再看如下的表单中包含的一组 checkbox 框：<br>复制代码 代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;form method=&quot;post&quot; action=&quot;&quot;&gt;</span><br><span class=\"line\">&lt;fieldset&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;label for=&quot;two&quot;&gt;2&lt;/label&gt;</span><br><span class=\"line\">&lt;input type=&quot;checkbox&quot; value=&quot;2&quot; id=&quot;two&quot; name=&quot;number[]&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;label for=&quot;four&quot;&gt;4&lt;/label&gt;</span><br><span class=\"line\">&lt;input type=&quot;checkbox&quot; value=&quot;4&quot; id=&quot;four&quot; name=&quot;number[]&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;label for=&quot;six&quot;&gt;6&lt;/label&gt;</span><br><span class=\"line\">&lt;input type=&quot;checkbox&quot; value=&quot;6&quot; id=&quot;six&quot; name=&quot;number[]&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;label for=&quot;eight&quot;&gt;8&lt;/label&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot; value=&quot;8&quot; id=&quot;eight&quot; name=&quot;number[]&quot;&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/fieldset&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure></p>\n<p>我们可以得到一个用逗号分隔的复选框 ID:<br>复制代码 代码如下:</p>\n<p>$(‘:checkbox’).map(function() {<br>return this.id;<br>}).get().join();<br>此调用的结果是字符串， “two,four,six”.<br>在回调函数中，this指向每次迭代中的当前DOM元素。<br>方法语法：each()<br>each(iterator)<br>遍历匹配集里所有的元素，为每一个元素调用传入的迭代函数<br>iterator （函数）回调函数，为匹配集中的每个元素调用<br>each()方法也可以用来遍历javascript数组对象甚至单个对象，举个栗子：<br>复制代码 代码如下:</p>\n<p>$([a,b,c,d]).each(function(){<br>    alert(this);<br>})<br>这个语句会为传入$()中数组的每个元素调用迭代函数，函数中的this指向单独的数组项。<br>每次回调函数执行时，会传递当前循环次数作为参数(从0开始计数)。更重要的是，回调函数是在当前DOM元素为上下文的语境中触发的。因此关键字 this 总是指向这个元素。<br>假设页面上有这样一个简单的无序列表。<br>复制代码 代码如下:</p>\n<p><ul></ul></p>\n<p><li>foo</li></p>\n<p><li>bar</li><br><br>你可以选中并迭代这些列表：<br>复制代码 代码如下:</p>\n<p>$( “li” ).each(function( index ) {<br>console.log( index + “: “” + $(this).text() );<br>});<br>列表中每一项会显示在下面的消息中：<br>0: foo<br>1: bar<br>两者的区别<br>map()方法主要用来遍历操作数组和对象，each()主要用于遍历jquery对象。<br>each()返回的是原来的数组，并不会新创建一个数组。<br>map()方法会返回一个新的数组。如果在没有必要的情况下使用map，则有可能造成内存浪费。</p>\n"},{"title":"JSONP","_content":"版权声明：转载自 http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html 博客园\n## 先说说JSONP是怎么产生的：\n\n其实网上关于JSONP的讲解有很多，但却千篇一律，而且云里雾里，对于很多刚接触的人来讲理解起来有些困难，小可不才，试着用自己的方式来阐释一下这个问题，看看是否有帮助。\n\n1、一个众所周知的问题，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准；\n\n2、不过我们又发现，Web页面上调用js文件时则不受是否跨域的影响（不仅如此，我们还发现凡是拥有\"src\"这个属性的标签都拥有跨域的能力，比如script、img、iframe标签）；\n\n3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；\n\n4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；\n\n5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。\n\n6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。\n\n7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。\n\n如果对于callback参数如何使用还有些模糊的话，我们后面会有具体的实例来讲解。\n\n\n------\nJSONP的客户端具体实现：\n\n不管jQuery也好，extjs也罢，又或者是其他支持jsonp的框架，他们幕后所做的工作都是一样的，下面我来循序渐进的说明一下jsonp在客户端的实现：\n\n \n\n1、我们知道，哪怕跨域js文件中的代码（当然指符合web脚本安全策略的），web页面也是可以无条件执行的。\n\n远程服务器remoteserver.com根目录下有个remote.js文件代码如下：\n\nalert('我是远程文件');\n本地服务器localserver.com下有个jsonp.html页面代码如下：\n\n```payth\n\n    <script type=\"text/javascript\" src=\"http://remoteserver.com/remote.js\"></script>\n\n```\n毫无疑问，页面将会弹出一个提示窗体，显示跨域调用成功。\n\n2、现在我们在jsonp.html页面定义一个函数，然后在远程remote.js中传入数据进行调用。\n\njsonp.html页面代码如下：\n\n```payth\n\n    <script type=\"text/javascript\">\n    var localHandler = function(data){\n        alert('我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：' + data.result);\n    };\n    </script>\n    <script type=\"text/javascript\" src=\"http://remoteserver.com/remote.js\"></script>\n\n```\nremote.js文件代码如下：\n\nlocalHandler({\"result\":\"我是远程js带来的数据\"});\n运行之后查看结果，页面成功弹出提示窗口，显示本地函数被跨域的远程js调用成功，并且还接收到了远程js带来的数据。很欣喜，跨域远程获取数据的目的基本实现了，但是又一个问题出现了，我怎么让远程js知道它应该调用的本地函数叫什么名字呢？毕竟是jsonp的服务者都要面对很多服务对象，而这些服务对象各自的本地函数都不相同啊？我们接着往下看。\n\n \n\n3、聪明的开发者很容易想到，只要服务端提供的js脚本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端“我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并响应了。\n\n看jsonp.html页面的代码：\n\n```payth\n\n    <script type=\"text/javascript\">\n    // 得到航班信息查询结果后的回调函数\n    var flightHandler = function(data){\n        alert('你查询的航班结果是：票价 ' + data.price + ' 元，' + '余票 ' + data.tickets + ' 张。');\n    };\n    // 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）\n    var url = \"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&callback=flightHandler\";\n    // 创建script标签，设置其属性\n    var script = document.createElement('script');\n    script.setAttribute('src', url);\n    // 把script标签加入head，此时调用开始\n    document.getElementsByTagName('head')[0].appendChild(script); \n    </script>\n\n```\n这次的代码变化比较大，不再直接把远程js文件写死，而是编码实现动态查询，而这也正是jsonp客户端实现的核心部分，本例中的重点也就在于如何完成jsonp调用的全过程。\n\n我们看到调用的url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我的本地回调函数叫做flightHandler，所以请把查询结果传入这个函数中进行调用。\n\nOK，服务器很聪明，这个叫做flightResult.aspx的页面生成了一段这样的代码提供给jsonp.html（服务端的实现这里就不演示了，与你选用的语言无关，说到底就是拼接字符串）：\n```payth\nflightHandler({\n    \"code\": \"CA1998\",\n    \"price\": 1780,\n    \"tickets\": 5\n});\n```\n我们看到，传递给flightHandler函数的是一个json，它描述了航班的基本信息。运行一下页面，成功弹出提示窗口，jsonp的执行全过程顺利完成！\n\n \n\n4、到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。\n\n什么？你用的是jQuery，想知道jQuery如何实现jsonp调用？好吧，那我就好人做到底，再给你一段jQuery使用jsonp的代码（我们依然沿用上面那个航班信息查询的例子，假定返回jsonp结果不变）：\n\n```\n      <script type=\"text/javascript\" src=jquery.min.js\"></script>\n      <script type=\"text/javascript\">\n     jQuery(document).ready(function(){ \n        $.ajax({\n             type: \"get\",\n             async: false,\n             url: \"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998\",\n             dataType: \"jsonp\",\n             jsonp: \"callback\",//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)\n             jsonpCallback:\"flightHandler\",//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写\"?\"，jQuery会自动为你处理数据\n             success: function(json){\n                 alert('您查询到航班信息：票价： ' + json.price + ' 元，余票： ' + json.tickets + ' 张。');\n             },\n             error: function(){\n                 alert('fail');\n             }\n         });\n     });\n     </script>\n\n```\n是不是有点奇怪？为什么我这次没有写flightHandler这个函数呢？而且竟然也运行成功了！哈哈，这就是jQuery的功劳了，jquery在处理jsonp类型的ajax时（还是忍不住吐槽，虽然jquery也把jsonp归入了ajax，但其实它们真的不是一回事儿），自动帮你生成回调函数并把数据取出来供success属性方法来调用，是不是很爽呀？\n    \n------\n\n对ajax与jsonp的异同再做一些补充说明：\n\n1、ajax和jsonp这两种技术在调用方式上“看起来”很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装；\n\n2、但ajax和jsonp其实本质上是不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加script标签来调用服务器提供的js脚本。\n\n3、所以说，其实ajax与jsonp的区别不在于是否跨域，ajax通过服务端代理一样可以实现跨域，jsonp本身也不排斥同域的数据的获取。\n\n4、还有就是，jsonp是一种方式或者说非强制性协议，如同ajax一样，它也不一定非要用json格式来传递数据，如果你愿意，字符串都行，只不过这样不利于用jsonp提供公开服务。\n\n总而言之，jsonp不是ajax的一个特例，哪怕jquery等巨头把jsonp封装进了ajax，也不能改变着一点！","source":"_posts/jsonp.md","raw":"---\ntitle: JSONP\n---\n版权声明：转载自 http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html 博客园\n## 先说说JSONP是怎么产生的：\n\n其实网上关于JSONP的讲解有很多，但却千篇一律，而且云里雾里，对于很多刚接触的人来讲理解起来有些困难，小可不才，试着用自己的方式来阐释一下这个问题，看看是否有帮助。\n\n1、一个众所周知的问题，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准；\n\n2、不过我们又发现，Web页面上调用js文件时则不受是否跨域的影响（不仅如此，我们还发现凡是拥有\"src\"这个属性的标签都拥有跨域的能力，比如script、img、iframe标签）；\n\n3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；\n\n4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；\n\n5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。\n\n6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。\n\n7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。\n\n如果对于callback参数如何使用还有些模糊的话，我们后面会有具体的实例来讲解。\n\n\n------\nJSONP的客户端具体实现：\n\n不管jQuery也好，extjs也罢，又或者是其他支持jsonp的框架，他们幕后所做的工作都是一样的，下面我来循序渐进的说明一下jsonp在客户端的实现：\n\n \n\n1、我们知道，哪怕跨域js文件中的代码（当然指符合web脚本安全策略的），web页面也是可以无条件执行的。\n\n远程服务器remoteserver.com根目录下有个remote.js文件代码如下：\n\nalert('我是远程文件');\n本地服务器localserver.com下有个jsonp.html页面代码如下：\n\n```payth\n\n    <script type=\"text/javascript\" src=\"http://remoteserver.com/remote.js\"></script>\n\n```\n毫无疑问，页面将会弹出一个提示窗体，显示跨域调用成功。\n\n2、现在我们在jsonp.html页面定义一个函数，然后在远程remote.js中传入数据进行调用。\n\njsonp.html页面代码如下：\n\n```payth\n\n    <script type=\"text/javascript\">\n    var localHandler = function(data){\n        alert('我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：' + data.result);\n    };\n    </script>\n    <script type=\"text/javascript\" src=\"http://remoteserver.com/remote.js\"></script>\n\n```\nremote.js文件代码如下：\n\nlocalHandler({\"result\":\"我是远程js带来的数据\"});\n运行之后查看结果，页面成功弹出提示窗口，显示本地函数被跨域的远程js调用成功，并且还接收到了远程js带来的数据。很欣喜，跨域远程获取数据的目的基本实现了，但是又一个问题出现了，我怎么让远程js知道它应该调用的本地函数叫什么名字呢？毕竟是jsonp的服务者都要面对很多服务对象，而这些服务对象各自的本地函数都不相同啊？我们接着往下看。\n\n \n\n3、聪明的开发者很容易想到，只要服务端提供的js脚本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端“我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并响应了。\n\n看jsonp.html页面的代码：\n\n```payth\n\n    <script type=\"text/javascript\">\n    // 得到航班信息查询结果后的回调函数\n    var flightHandler = function(data){\n        alert('你查询的航班结果是：票价 ' + data.price + ' 元，' + '余票 ' + data.tickets + ' 张。');\n    };\n    // 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）\n    var url = \"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&callback=flightHandler\";\n    // 创建script标签，设置其属性\n    var script = document.createElement('script');\n    script.setAttribute('src', url);\n    // 把script标签加入head，此时调用开始\n    document.getElementsByTagName('head')[0].appendChild(script); \n    </script>\n\n```\n这次的代码变化比较大，不再直接把远程js文件写死，而是编码实现动态查询，而这也正是jsonp客户端实现的核心部分，本例中的重点也就在于如何完成jsonp调用的全过程。\n\n我们看到调用的url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我的本地回调函数叫做flightHandler，所以请把查询结果传入这个函数中进行调用。\n\nOK，服务器很聪明，这个叫做flightResult.aspx的页面生成了一段这样的代码提供给jsonp.html（服务端的实现这里就不演示了，与你选用的语言无关，说到底就是拼接字符串）：\n```payth\nflightHandler({\n    \"code\": \"CA1998\",\n    \"price\": 1780,\n    \"tickets\": 5\n});\n```\n我们看到，传递给flightHandler函数的是一个json，它描述了航班的基本信息。运行一下页面，成功弹出提示窗口，jsonp的执行全过程顺利完成！\n\n \n\n4、到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。\n\n什么？你用的是jQuery，想知道jQuery如何实现jsonp调用？好吧，那我就好人做到底，再给你一段jQuery使用jsonp的代码（我们依然沿用上面那个航班信息查询的例子，假定返回jsonp结果不变）：\n\n```\n      <script type=\"text/javascript\" src=jquery.min.js\"></script>\n      <script type=\"text/javascript\">\n     jQuery(document).ready(function(){ \n        $.ajax({\n             type: \"get\",\n             async: false,\n             url: \"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998\",\n             dataType: \"jsonp\",\n             jsonp: \"callback\",//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)\n             jsonpCallback:\"flightHandler\",//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写\"?\"，jQuery会自动为你处理数据\n             success: function(json){\n                 alert('您查询到航班信息：票价： ' + json.price + ' 元，余票： ' + json.tickets + ' 张。');\n             },\n             error: function(){\n                 alert('fail');\n             }\n         });\n     });\n     </script>\n\n```\n是不是有点奇怪？为什么我这次没有写flightHandler这个函数呢？而且竟然也运行成功了！哈哈，这就是jQuery的功劳了，jquery在处理jsonp类型的ajax时（还是忍不住吐槽，虽然jquery也把jsonp归入了ajax，但其实它们真的不是一回事儿），自动帮你生成回调函数并把数据取出来供success属性方法来调用，是不是很爽呀？\n    \n------\n\n对ajax与jsonp的异同再做一些补充说明：\n\n1、ajax和jsonp这两种技术在调用方式上“看起来”很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装；\n\n2、但ajax和jsonp其实本质上是不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加script标签来调用服务器提供的js脚本。\n\n3、所以说，其实ajax与jsonp的区别不在于是否跨域，ajax通过服务端代理一样可以实现跨域，jsonp本身也不排斥同域的数据的获取。\n\n4、还有就是，jsonp是一种方式或者说非强制性协议，如同ajax一样，它也不一定非要用json格式来传递数据，如果你愿意，字符串都行，只不过这样不利于用jsonp提供公开服务。\n\n总而言之，jsonp不是ajax的一个特例，哪怕jquery等巨头把jsonp封装进了ajax，也不能改变着一点！","slug":"jsonp","published":1,"date":"2016-10-28T04:54:52.000Z","updated":"2016-10-28T04:57:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghao8iz0005w0uaowkkobkr","content":"<p>版权声明：转载自 <a href=\"http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html</a> 博客园</p>\n<h2 id=\"先说说JSONP是怎么产生的：\"><a href=\"#先说说JSONP是怎么产生的：\" class=\"headerlink\" title=\"先说说JSONP是怎么产生的：\"></a>先说说JSONP是怎么产生的：</h2><p>其实网上关于JSONP的讲解有很多，但却千篇一律，而且云里雾里，对于很多刚接触的人来讲理解起来有些困难，小可不才，试着用自己的方式来阐释一下这个问题，看看是否有帮助。</p>\n<p>1、一个众所周知的问题，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准；</p>\n<p>2、不过我们又发现，Web页面上调用js文件时则不受是否跨域的影响（不仅如此，我们还发现凡是拥有”src”这个属性的标签都拥有跨域的能力，比如script、img、iframe标签）；</p>\n<p>3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；</p>\n<p>4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；</p>\n<p>5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。</p>\n<p>6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。</p>\n<p>7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</p>\n<p>如果对于callback参数如何使用还有些模糊的话，我们后面会有具体的实例来讲解。</p>\n<hr>\n<p>JSONP的客户端具体实现：</p>\n<p>不管jQuery也好，extjs也罢，又或者是其他支持jsonp的框架，他们幕后所做的工作都是一样的，下面我来循序渐进的说明一下jsonp在客户端的实现：</p>\n<p>1、我们知道，哪怕跨域js文件中的代码（当然指符合web脚本安全策略的），web页面也是可以无条件执行的。</p>\n<p>远程服务器remoteserver.com根目录下有个remote.js文件代码如下：</p>\n<p>alert(‘我是远程文件’);<br>本地服务器localserver.com下有个jsonp.html页面代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;http://remoteserver.com/remote.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>毫无疑问，页面将会弹出一个提示窗体，显示跨域调用成功。</p>\n<p>2、现在我们在jsonp.html页面定义一个函数，然后在远程remote.js中传入数据进行调用。</p>\n<p>jsonp.html页面代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">var localHandler = function(data)&#123;</span><br><span class=\"line\">    alert(&apos;我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：&apos; + data.result);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;http://remoteserver.com/remote.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>remote.js文件代码如下：</p>\n<p>localHandler({“result”:”我是远程js带来的数据”});<br>运行之后查看结果，页面成功弹出提示窗口，显示本地函数被跨域的远程js调用成功，并且还接收到了远程js带来的数据。很欣喜，跨域远程获取数据的目的基本实现了，但是又一个问题出现了，我怎么让远程js知道它应该调用的本地函数叫什么名字呢？毕竟是jsonp的服务者都要面对很多服务对象，而这些服务对象各自的本地函数都不相同啊？我们接着往下看。</p>\n<p>3、聪明的开发者很容易想到，只要服务端提供的js脚本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端“我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并响应了。</p>\n<p>看jsonp.html页面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">// 得到航班信息查询结果后的回调函数</span><br><span class=\"line\">var flightHandler = function(data)&#123;</span><br><span class=\"line\">    alert(&apos;你查询的航班结果是：票价 &apos; + data.price + &apos; 元，&apos; + &apos;余票 &apos; + data.tickets + &apos; 张。&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span><br><span class=\"line\">var url = &quot;http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler&quot;;</span><br><span class=\"line\">// 创建script标签，设置其属性</span><br><span class=\"line\">var script = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">script.setAttribute(&apos;src&apos;, url);</span><br><span class=\"line\">// 把script标签加入head，此时调用开始</span><br><span class=\"line\">document.getElementsByTagName(&apos;head&apos;)[0].appendChild(script); </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>这次的代码变化比较大，不再直接把远程js文件写死，而是编码实现动态查询，而这也正是jsonp客户端实现的核心部分，本例中的重点也就在于如何完成jsonp调用的全过程。</p>\n<p>我们看到调用的url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我的本地回调函数叫做flightHandler，所以请把查询结果传入这个函数中进行调用。</p>\n<p>OK，服务器很聪明，这个叫做flightResult.aspx的页面生成了一段这样的代码提供给jsonp.html（服务端的实现这里就不演示了，与你选用的语言无关，说到底就是拼接字符串）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flightHandler(&#123;</span><br><span class=\"line\">    &quot;code&quot;: &quot;CA1998&quot;,</span><br><span class=\"line\">    &quot;price&quot;: 1780,</span><br><span class=\"line\">    &quot;tickets&quot;: 5</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>我们看到，传递给flightHandler函数的是一个json，它描述了航班的基本信息。运行一下页面，成功弹出提示窗口，jsonp的执行全过程顺利完成！</p>\n<p>4、到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。</p>\n<p>什么？你用的是jQuery，想知道jQuery如何实现jsonp调用？好吧，那我就好人做到底，再给你一段jQuery使用jsonp的代码（我们依然沿用上面那个航班信息查询的例子，假定返回jsonp结果不变）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;script type=&quot;text/javascript&quot; src=jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"> &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">jQuery(document).ready(function()&#123; </span><br><span class=\"line\">   $.ajax(&#123;</span><br><span class=\"line\">        type: &quot;get&quot;,</span><br><span class=\"line\">        async: false,</span><br><span class=\"line\">        url: &quot;http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&quot;,</span><br><span class=\"line\">        dataType: &quot;jsonp&quot;,</span><br><span class=\"line\">        jsonp: &quot;callback&quot;,//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span><br><span class=\"line\">        jsonpCallback:&quot;flightHandler&quot;,//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写&quot;?&quot;，jQuery会自动为你处理数据</span><br><span class=\"line\">        success: function(json)&#123;</span><br><span class=\"line\">            alert(&apos;您查询到航班信息：票价： &apos; + json.price + &apos; 元，余票： &apos; + json.tickets + &apos; 张。&apos;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error: function()&#123;</span><br><span class=\"line\">            alert(&apos;fail&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>是不是有点奇怪？为什么我这次没有写flightHandler这个函数呢？而且竟然也运行成功了！哈哈，这就是jQuery的功劳了，jquery在处理jsonp类型的ajax时（还是忍不住吐槽，虽然jquery也把jsonp归入了ajax，但其实它们真的不是一回事儿），自动帮你生成回调函数并把数据取出来供success属性方法来调用，是不是很爽呀？</p>\n<hr>\n<p>对ajax与jsonp的异同再做一些补充说明：</p>\n<p>1、ajax和jsonp这两种技术在调用方式上“看起来”很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装；</p>\n<p>2、但ajax和jsonp其实本质上是不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加script标签来调用服务器提供的js脚本。</p>\n<p>3、所以说，其实ajax与jsonp的区别不在于是否跨域，ajax通过服务端代理一样可以实现跨域，jsonp本身也不排斥同域的数据的获取。</p>\n<p>4、还有就是，jsonp是一种方式或者说非强制性协议，如同ajax一样，它也不一定非要用json格式来传递数据，如果你愿意，字符串都行，只不过这样不利于用jsonp提供公开服务。</p>\n<p>总而言之，jsonp不是ajax的一个特例，哪怕jquery等巨头把jsonp封装进了ajax，也不能改变着一点！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>版权声明：转载自 <a href=\"http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html\" target=\"_blank\" rel=\"noopener\">http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html</a> 博客园</p>\n<h2 id=\"先说说JSONP是怎么产生的：\"><a href=\"#先说说JSONP是怎么产生的：\" class=\"headerlink\" title=\"先说说JSONP是怎么产生的：\"></a>先说说JSONP是怎么产生的：</h2><p>其实网上关于JSONP的讲解有很多，但却千篇一律，而且云里雾里，对于很多刚接触的人来讲理解起来有些困难，小可不才，试着用自己的方式来阐释一下这个问题，看看是否有帮助。</p>\n<p>1、一个众所周知的问题，Ajax直接请求普通文件存在跨域无权限访问的问题，甭管你是静态页面、动态网页、web服务、WCF，只要是跨域请求，一律不准；</p>\n<p>2、不过我们又发现，Web页面上调用js文件时则不受是否跨域的影响（不仅如此，我们还发现凡是拥有”src”这个属性的标签都拥有跨域的能力，比如script、img、iframe标签）；</p>\n<p>3、于是可以判断，当前阶段如果想通过纯web端（ActiveX控件、服务端代理、属于未来的HTML5之Websocket等方式不算）跨域访问数据就只有一种可能，那就是在远程服务器上设法把数据装进js格式的文件里，供客户端调用和进一步处理；</p>\n<p>4、恰巧我们已经知道有一种叫做JSON的纯字符数据格式可以简洁的描述复杂数据，更妙的是JSON还被js原生支持，所以在客户端几乎可以随心所欲的处理这种格式的数据；</p>\n<p>5、这样子解决方案就呼之欲出了，web客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。</p>\n<p>6、客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。</p>\n<p>7、为了便于客户端使用数据，逐渐形成了一种非正式传输协议，人们把它称作JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。</p>\n<p>如果对于callback参数如何使用还有些模糊的话，我们后面会有具体的实例来讲解。</p>\n<hr>\n<p>JSONP的客户端具体实现：</p>\n<p>不管jQuery也好，extjs也罢，又或者是其他支持jsonp的框架，他们幕后所做的工作都是一样的，下面我来循序渐进的说明一下jsonp在客户端的实现：</p>\n<p>1、我们知道，哪怕跨域js文件中的代码（当然指符合web脚本安全策略的），web页面也是可以无条件执行的。</p>\n<p>远程服务器remoteserver.com根目录下有个remote.js文件代码如下：</p>\n<p>alert(‘我是远程文件’);<br>本地服务器localserver.com下有个jsonp.html页面代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;http://remoteserver.com/remote.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>毫无疑问，页面将会弹出一个提示窗体，显示跨域调用成功。</p>\n<p>2、现在我们在jsonp.html页面定义一个函数，然后在远程remote.js中传入数据进行调用。</p>\n<p>jsonp.html页面代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">var localHandler = function(data)&#123;</span><br><span class=\"line\">    alert(&apos;我是本地函数，可以被跨域的remote.js文件调用，远程js带来的数据是：&apos; + data.result);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;http://remoteserver.com/remote.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>remote.js文件代码如下：</p>\n<p>localHandler({“result”:”我是远程js带来的数据”});<br>运行之后查看结果，页面成功弹出提示窗口，显示本地函数被跨域的远程js调用成功，并且还接收到了远程js带来的数据。很欣喜，跨域远程获取数据的目的基本实现了，但是又一个问题出现了，我怎么让远程js知道它应该调用的本地函数叫什么名字呢？毕竟是jsonp的服务者都要面对很多服务对象，而这些服务对象各自的本地函数都不相同啊？我们接着往下看。</p>\n<p>3、聪明的开发者很容易想到，只要服务端提供的js脚本是动态生成的就行了呗，这样调用者可以传一个参数过去告诉服务端“我想要一段调用XXX函数的js代码，请你返回给我”，于是服务器就可以按照客户端的需求来生成js脚本并响应了。</p>\n<p>看jsonp.html页面的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">// 得到航班信息查询结果后的回调函数</span><br><span class=\"line\">var flightHandler = function(data)&#123;</span><br><span class=\"line\">    alert(&apos;你查询的航班结果是：票价 &apos; + data.price + &apos; 元，&apos; + &apos;余票 &apos; + data.tickets + &apos; 张。&apos;);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span><br><span class=\"line\">var url = &quot;http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler&quot;;</span><br><span class=\"line\">// 创建script标签，设置其属性</span><br><span class=\"line\">var script = document.createElement(&apos;script&apos;);</span><br><span class=\"line\">script.setAttribute(&apos;src&apos;, url);</span><br><span class=\"line\">// 把script标签加入head，此时调用开始</span><br><span class=\"line\">document.getElementsByTagName(&apos;head&apos;)[0].appendChild(script); </span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>这次的代码变化比较大，不再直接把远程js文件写死，而是编码实现动态查询，而这也正是jsonp客户端实现的核心部分，本例中的重点也就在于如何完成jsonp调用的全过程。</p>\n<p>我们看到调用的url中传递了一个code参数，告诉服务器我要查的是CA1998次航班的信息，而callback参数则告诉服务器，我的本地回调函数叫做flightHandler，所以请把查询结果传入这个函数中进行调用。</p>\n<p>OK，服务器很聪明，这个叫做flightResult.aspx的页面生成了一段这样的代码提供给jsonp.html（服务端的实现这里就不演示了，与你选用的语言无关，说到底就是拼接字符串）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flightHandler(&#123;</span><br><span class=\"line\">    &quot;code&quot;: &quot;CA1998&quot;,</span><br><span class=\"line\">    &quot;price&quot;: 1780,</span><br><span class=\"line\">    &quot;tickets&quot;: 5</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>我们看到，传递给flightHandler函数的是一个json，它描述了航班的基本信息。运行一下页面，成功弹出提示窗口，jsonp的执行全过程顺利完成！</p>\n<p>4、到这里为止的话，相信你已经能够理解jsonp的客户端实现原理了吧？剩下的就是如何把代码封装一下，以便于与用户界面交互，从而实现多次和重复调用。</p>\n<p>什么？你用的是jQuery，想知道jQuery如何实现jsonp调用？好吧，那我就好人做到底，再给你一段jQuery使用jsonp的代码（我们依然沿用上面那个航班信息查询的例子，假定返回jsonp结果不变）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;script type=&quot;text/javascript&quot; src=jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"> &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">jQuery(document).ready(function()&#123; </span><br><span class=\"line\">   $.ajax(&#123;</span><br><span class=\"line\">        type: &quot;get&quot;,</span><br><span class=\"line\">        async: false,</span><br><span class=\"line\">        url: &quot;http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&quot;,</span><br><span class=\"line\">        dataType: &quot;jsonp&quot;,</span><br><span class=\"line\">        jsonp: &quot;callback&quot;,//传递给请求处理程序或页面的，用以获得jsonp回调函数名的参数名(一般默认为:callback)</span><br><span class=\"line\">        jsonpCallback:&quot;flightHandler&quot;,//自定义的jsonp回调函数名称，默认为jQuery自动生成的随机函数名，也可以写&quot;?&quot;，jQuery会自动为你处理数据</span><br><span class=\"line\">        success: function(json)&#123;</span><br><span class=\"line\">            alert(&apos;您查询到航班信息：票价： &apos; + json.price + &apos; 元，余票： &apos; + json.tickets + &apos; 张。&apos;);</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        error: function()&#123;</span><br><span class=\"line\">            alert(&apos;fail&apos;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>是不是有点奇怪？为什么我这次没有写flightHandler这个函数呢？而且竟然也运行成功了！哈哈，这就是jQuery的功劳了，jquery在处理jsonp类型的ajax时（还是忍不住吐槽，虽然jquery也把jsonp归入了ajax，但其实它们真的不是一回事儿），自动帮你生成回调函数并把数据取出来供success属性方法来调用，是不是很爽呀？</p>\n<hr>\n<p>对ajax与jsonp的异同再做一些补充说明：</p>\n<p>1、ajax和jsonp这两种技术在调用方式上“看起来”很像，目的也一样，都是请求一个url，然后把服务器返回的数据进行处理，因此jquery和ext等框架都把jsonp作为ajax的一种形式进行了封装；</p>\n<p>2、但ajax和jsonp其实本质上是不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加script标签来调用服务器提供的js脚本。</p>\n<p>3、所以说，其实ajax与jsonp的区别不在于是否跨域，ajax通过服务端代理一样可以实现跨域，jsonp本身也不排斥同域的数据的获取。</p>\n<p>4、还有就是，jsonp是一种方式或者说非强制性协议，如同ajax一样，它也不一定非要用json格式来传递数据，如果你愿意，字符串都行，只不过这样不利于用jsonp提供公开服务。</p>\n<p>总而言之，jsonp不是ajax的一个特例，哪怕jquery等巨头把jsonp封装进了ajax，也不能改变着一点！</p>\n"},{"title":"js超基础","_content":"\n突然发现对js的一些细节知识点记忆几乎遗忘，所以从今天开始我想从新\n把js基础给过一边，来来巩固一下。\n\n> * JavaScript和ECMAScript的关系\n> * 程序书写的位置、简单语句\n> * 类型、值、变量\n> * 表达式、运算符\n\n\n------\n>## 一、JavaScript和ECMAScript的关系\n\n对于他们的比较，只要知道一句就好了：简单来说ECMAScript不是一门语言，而是一个标准，是js的一个标准。而javascript是一种轻量级语言。\n-------\n\n>## 二、程序书写的位置、简单语句\n\n### ***2.1程序书写的位置***\n1. 行内式：\n```pathy\n    <button onclick=\"alert('你好吗')\">点击我</button>\n```\n    一般情况，单双引号是一样的,但是出现了包裹的情况,所以要严格处理这种情况，我们一般采取的是 外双内单的格式。\n```pathy\n<a href=\"javascript:void(0);\"></a>  // 防止跳转\n```\n2. 内联式：\n```pathy\n<script type=\"text/javascript\"></script>  //任何一个地方\n```\n最好放在body标签下面，否则会出现加载顺序的问题。如果要写在head标签里的话需要些一个入口函数：\n```pathy\n  <script type=\"text/javascript\">\n        window.onload = function(){ \n            alert(\"hello\")\n        }\n  </script> \n```\n3. 外链式：\n另外建立一个文件，然后以.js为后缀名，里面放你要写的js代码。然后再html里面引入一下代码：\n```pathy\n<script type=”text/javascript” src=”js的路径.js”></script>\n```\n\n### ***2.2简单语句***\n1. alert（）语句：\n```pathy\n        <script type=\"text/javascript\">\n      window.alert(\"今天真好\");\n            /* 这里说明一下window是可以省略的 */\n    </script>    /*（内联式）*/\n```\n这是一个弹出框语句，打开页面后，会有一个弹出框。alert就是英语里面的“警报”的意思，用途就是弹出“警告框”。\n2. prompt（）语句：\n```pathy\n    <script type=\"text/javascript\">\n    var a = prompt(\"请输入\");\n    alert(a);\n  </script>   \n```\nprompt就是专门用来弹出能够让用户输入的对话框\n3. confirm（）\n\n  comfirm(“你好吗？”);//消息对话框通常用于允许用户做选择的动作\n消息对话框通常用于允许用户做选择的动作，点击确定，返回true,点击返回，返回false.\n4. console控制台输出\n\nConsole.log() 控制台输出 普通输出语句\nConsole.warn()  控制台警示\nConsole.error() 控制台错误提示\nConsole.info()  一般\nConsole.debug() 除错信息\n5. document.write()\ndocument.write()直接在HTML文档中写入内容并显示\n\n------\n\n>## 三、 类型、值、变量\n### ***3.1类型***\n1.  * 简单的数据类型：\n     * number     数字类型       \n     * string     字符串类型     \n     * boolean    布尔类型  \n\n     * undefined \n在使用var声明变量，但未对其加以初始化时，这个变量的类型就是undefined，且其默认初始化值为undefined。\n对未声明与初始化的变量，直接使用，那么这个变量的类型也是undefined，但是没有默认初始化值。\n     * null\nnull类型的默认值是null，从逻辑角度讲，是表示一个空对象指针。\njs高级程序上有讲到，undefined类型是派生自null的，不严格的说二者都是指没有明确赋值的类型，但是细分之后，undefined类型，被用来形容未经初始化的变量，null类型被用来形容空对象指针。\n所以，如果定义的变量准备在将来用于保存对象（即复杂的数据类型object），那么就该将该变量初始化为null。\n区分，当一个变量声明后，未初始化，则该值为undefined，如果这个值是为了保存对象，则修改其默认初始化的值，改为null。 所以当检测其类型时，会显示类型为object。\n\n文／Miss____Du（简书作者）\n原文链接：http://www.jianshu.com/p/4841fcc6b4e7\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。\n    * 复杂的数据类型\n     * object   对象\n2. 数据类型转换：\n### 隐式类型转换\n    数字-->字符串：\n```pathy\n   var a = 123;\n   a  = a + \"\";\n   console.log(typeof(a))\n```\n字符串-->数字\n```pathy\n   var a = \"123\";\n   a  = a - 0 ;\n   console.log(typeof(a))\n```\n### 强制类型转换\n数字-->字符串\n```pathy\nvar a = 123;\nvar b = string(a)\n   console.log(typeof(b))\n //或用a.toString();\n```\n字符串-->数字\n```pathy\nvar a = \"123\";\nvar b = Number(a)\n   console.log(typeof(b))\n```\n转换成整型：parseInt()；\n转换成浮点型： parseFloat();\n### ***3.2变量***\n1.  变量的命名规范：\n只能由字母、数字、下划线、美元符号$构成，且不能以数字开头，并且不能是JavaScript关键字保留字。\n比如：\nvar a ;\nvar $ab123;\n2. 注意要点，\n    * 变量用var来定义。只有定义之后，这个变量才能够使用，而且不需要考虑他到底是什么类型的，尽管用var来第一即可。\n    * 后面代码要用到变量的时候一定不要加引号，加引号就变成了字符串了，而不是变量。\n    * 大写字母是可以使用的，并且大小写敏感。也就是说A和a是两个变量。\n    * 变量名不能超过255个字符，一半也不会写那么长。。\n    * 如果在声明时没有写var被认为是全局变量。\n    * javascript里面声明的变量，会提升至函数顶部。\n    \n------\n\n>## 四、语句\n* if语句\n```pathy\n  if(表达式){\n    console.log(我就出去玩)；\n  }else{\n    console.log(我就在家写作业); \n    }\n\n```\n* for循环语句\n```pathy\n  for(var i = 1 ; i <= 100 ; i++){\n    console.log(i);\n  }\n\n```\n* switch语句\n```pathy\nvar n = null;\nswitch(n){\n    case 1:\n      执行的代码;\n        break;\n    case 2:\n      执行的代码;\n        break;\n        ......\n    default:\n      执行的代码;\n        break;\n  }\n\n```\n* while语句\n```pathy\nvar i = 1；\nwhile（i<10）{\n    console.log(i)\n    i ++ ;\n}\n```\n* Do..while循环语句\n```pathy\nvar i = 1；\ndo{\n console.log(i)\n    i ++ ;\n}while(i<10)\n```\n* break 语句 和 continue语句\nbreak语句：它是结束当前整个这个循环体，跳出该循环体；\ncontinue语句：它是结束当前的一个循环，后面的内容不执行，跳入本循环的下一个循环。\n\n>## (扩展小知识点)序列化和反序列化\n主要用于存储对象状态为另一种通用格式，比如存储为二进制、xml、json等等，把对象转换成这种格式就叫序列化，而反序列化通常是从这种格式转换回来。\n使用序列化主要是因为跨平台和对象存储的需求，因为网络上只允许字符串或者二进制格式，而文件需要使用二进制流格式，如果想把一个内存中的对象存储下来就必须使用序列化转换为xml（字符串）、json（字符串）或二进制（流）\n","source":"_posts/js基础1.md","raw":"---\ntitle: js超基础\n---\n\n突然发现对js的一些细节知识点记忆几乎遗忘，所以从今天开始我想从新\n把js基础给过一边，来来巩固一下。\n\n> * JavaScript和ECMAScript的关系\n> * 程序书写的位置、简单语句\n> * 类型、值、变量\n> * 表达式、运算符\n\n\n------\n>## 一、JavaScript和ECMAScript的关系\n\n对于他们的比较，只要知道一句就好了：简单来说ECMAScript不是一门语言，而是一个标准，是js的一个标准。而javascript是一种轻量级语言。\n-------\n\n>## 二、程序书写的位置、简单语句\n\n### ***2.1程序书写的位置***\n1. 行内式：\n```pathy\n    <button onclick=\"alert('你好吗')\">点击我</button>\n```\n    一般情况，单双引号是一样的,但是出现了包裹的情况,所以要严格处理这种情况，我们一般采取的是 外双内单的格式。\n```pathy\n<a href=\"javascript:void(0);\"></a>  // 防止跳转\n```\n2. 内联式：\n```pathy\n<script type=\"text/javascript\"></script>  //任何一个地方\n```\n最好放在body标签下面，否则会出现加载顺序的问题。如果要写在head标签里的话需要些一个入口函数：\n```pathy\n  <script type=\"text/javascript\">\n        window.onload = function(){ \n            alert(\"hello\")\n        }\n  </script> \n```\n3. 外链式：\n另外建立一个文件，然后以.js为后缀名，里面放你要写的js代码。然后再html里面引入一下代码：\n```pathy\n<script type=”text/javascript” src=”js的路径.js”></script>\n```\n\n### ***2.2简单语句***\n1. alert（）语句：\n```pathy\n        <script type=\"text/javascript\">\n      window.alert(\"今天真好\");\n            /* 这里说明一下window是可以省略的 */\n    </script>    /*（内联式）*/\n```\n这是一个弹出框语句，打开页面后，会有一个弹出框。alert就是英语里面的“警报”的意思，用途就是弹出“警告框”。\n2. prompt（）语句：\n```pathy\n    <script type=\"text/javascript\">\n    var a = prompt(\"请输入\");\n    alert(a);\n  </script>   \n```\nprompt就是专门用来弹出能够让用户输入的对话框\n3. confirm（）\n\n  comfirm(“你好吗？”);//消息对话框通常用于允许用户做选择的动作\n消息对话框通常用于允许用户做选择的动作，点击确定，返回true,点击返回，返回false.\n4. console控制台输出\n\nConsole.log() 控制台输出 普通输出语句\nConsole.warn()  控制台警示\nConsole.error() 控制台错误提示\nConsole.info()  一般\nConsole.debug() 除错信息\n5. document.write()\ndocument.write()直接在HTML文档中写入内容并显示\n\n------\n\n>## 三、 类型、值、变量\n### ***3.1类型***\n1.  * 简单的数据类型：\n     * number     数字类型       \n     * string     字符串类型     \n     * boolean    布尔类型  \n\n     * undefined \n在使用var声明变量，但未对其加以初始化时，这个变量的类型就是undefined，且其默认初始化值为undefined。\n对未声明与初始化的变量，直接使用，那么这个变量的类型也是undefined，但是没有默认初始化值。\n     * null\nnull类型的默认值是null，从逻辑角度讲，是表示一个空对象指针。\njs高级程序上有讲到，undefined类型是派生自null的，不严格的说二者都是指没有明确赋值的类型，但是细分之后，undefined类型，被用来形容未经初始化的变量，null类型被用来形容空对象指针。\n所以，如果定义的变量准备在将来用于保存对象（即复杂的数据类型object），那么就该将该变量初始化为null。\n区分，当一个变量声明后，未初始化，则该值为undefined，如果这个值是为了保存对象，则修改其默认初始化的值，改为null。 所以当检测其类型时，会显示类型为object。\n\n文／Miss____Du（简书作者）\n原文链接：http://www.jianshu.com/p/4841fcc6b4e7\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。\n    * 复杂的数据类型\n     * object   对象\n2. 数据类型转换：\n### 隐式类型转换\n    数字-->字符串：\n```pathy\n   var a = 123;\n   a  = a + \"\";\n   console.log(typeof(a))\n```\n字符串-->数字\n```pathy\n   var a = \"123\";\n   a  = a - 0 ;\n   console.log(typeof(a))\n```\n### 强制类型转换\n数字-->字符串\n```pathy\nvar a = 123;\nvar b = string(a)\n   console.log(typeof(b))\n //或用a.toString();\n```\n字符串-->数字\n```pathy\nvar a = \"123\";\nvar b = Number(a)\n   console.log(typeof(b))\n```\n转换成整型：parseInt()；\n转换成浮点型： parseFloat();\n### ***3.2变量***\n1.  变量的命名规范：\n只能由字母、数字、下划线、美元符号$构成，且不能以数字开头，并且不能是JavaScript关键字保留字。\n比如：\nvar a ;\nvar $ab123;\n2. 注意要点，\n    * 变量用var来定义。只有定义之后，这个变量才能够使用，而且不需要考虑他到底是什么类型的，尽管用var来第一即可。\n    * 后面代码要用到变量的时候一定不要加引号，加引号就变成了字符串了，而不是变量。\n    * 大写字母是可以使用的，并且大小写敏感。也就是说A和a是两个变量。\n    * 变量名不能超过255个字符，一半也不会写那么长。。\n    * 如果在声明时没有写var被认为是全局变量。\n    * javascript里面声明的变量，会提升至函数顶部。\n    \n------\n\n>## 四、语句\n* if语句\n```pathy\n  if(表达式){\n    console.log(我就出去玩)；\n  }else{\n    console.log(我就在家写作业); \n    }\n\n```\n* for循环语句\n```pathy\n  for(var i = 1 ; i <= 100 ; i++){\n    console.log(i);\n  }\n\n```\n* switch语句\n```pathy\nvar n = null;\nswitch(n){\n    case 1:\n      执行的代码;\n        break;\n    case 2:\n      执行的代码;\n        break;\n        ......\n    default:\n      执行的代码;\n        break;\n  }\n\n```\n* while语句\n```pathy\nvar i = 1；\nwhile（i<10）{\n    console.log(i)\n    i ++ ;\n}\n```\n* Do..while循环语句\n```pathy\nvar i = 1；\ndo{\n console.log(i)\n    i ++ ;\n}while(i<10)\n```\n* break 语句 和 continue语句\nbreak语句：它是结束当前整个这个循环体，跳出该循环体；\ncontinue语句：它是结束当前的一个循环，后面的内容不执行，跳入本循环的下一个循环。\n\n>## (扩展小知识点)序列化和反序列化\n主要用于存储对象状态为另一种通用格式，比如存储为二进制、xml、json等等，把对象转换成这种格式就叫序列化，而反序列化通常是从这种格式转换回来。\n使用序列化主要是因为跨平台和对象存储的需求，因为网络上只允许字符串或者二进制格式，而文件需要使用二进制流格式，如果想把一个内存中的对象存储下来就必须使用序列化转换为xml（字符串）、json（字符串）或二进制（流）\n","slug":"js基础1","published":1,"date":"2016-10-26T06:25:52.000Z","updated":"2016-10-26T06:57:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghao8j10006w0uarqr3l0uv","content":"<p>突然发现对js的一些细节知识点记忆几乎遗忘，所以从今天开始我想从新<br>把js基础给过一边，来来巩固一下。</p>\n<blockquote>\n<ul>\n<li>JavaScript和ECMAScript的关系</li>\n<li>程序书写的位置、简单语句</li>\n<li>类型、值、变量</li>\n<li>表达式、运算符</li>\n</ul>\n</blockquote>\n<hr>\n<blockquote>\n<h2 id=\"一、JavaScript和ECMAScript的关系\"><a href=\"#一、JavaScript和ECMAScript的关系\" class=\"headerlink\" title=\"一、JavaScript和ECMAScript的关系\"></a>一、JavaScript和ECMAScript的关系</h2></blockquote>\n<h2 id=\"对于他们的比较，只要知道一句就好了：简单来说ECMAScript不是一门语言，而是一个标准，是js的一个标准。而javascript是一种轻量级语言。\"><a href=\"#对于他们的比较，只要知道一句就好了：简单来说ECMAScript不是一门语言，而是一个标准，是js的一个标准。而javascript是一种轻量级语言。\" class=\"headerlink\" title=\"对于他们的比较，只要知道一句就好了：简单来说ECMAScript不是一门语言，而是一个标准，是js的一个标准。而javascript是一种轻量级语言。\"></a>对于他们的比较，只要知道一句就好了：简单来说ECMAScript不是一门语言，而是一个标准，是js的一个标准。而javascript是一种轻量级语言。</h2><blockquote>\n<h2 id=\"二、程序书写的位置、简单语句\"><a href=\"#二、程序书写的位置、简单语句\" class=\"headerlink\" title=\"二、程序书写的位置、简单语句\"></a>二、程序书写的位置、简单语句</h2></blockquote>\n<h3 id=\"2-1程序书写的位置\"><a href=\"#2-1程序书写的位置\" class=\"headerlink\" title=\"2.1程序书写的位置\"></a><strong><em>2.1程序书写的位置</em></strong></h3><ol>\n<li><p>行内式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onclick=&quot;alert(&apos;你好吗&apos;)&quot;&gt;点击我&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n<p> 一般情况，单双引号是一样的,但是出现了包裹的情况,所以要严格处理这种情况，我们一般采取的是 外双内单的格式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;javascript:void(0);&quot;&gt;&lt;/a&gt;  // 防止跳转</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>内联式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;  //任何一个地方</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>最好放在body标签下面，否则会出现加载顺序的问题。如果要写在head标签里的话需要些一个入口函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">      window.onload = function()&#123; </span><br><span class=\"line\">          alert(&quot;hello&quot;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>外链式：<br>另外建立一个文件，然后以.js为后缀名，里面放你要写的js代码。然后再html里面引入一下代码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=”text/javascript” src=”js的路径.js”&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"2-2简单语句\"><a href=\"#2-2简单语句\" class=\"headerlink\" title=\"2.2简单语句\"></a><strong><em>2.2简单语句</em></strong></h3><ol>\n<li>alert（）语句：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  window.alert(&quot;今天真好&quot;);</span><br><span class=\"line\">        /* 这里说明一下window是可以省略的 */</span><br><span class=\"line\">&lt;/script&gt;    /*（内联式）*/</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这是一个弹出框语句，打开页面后，会有一个弹出框。alert就是英语里面的“警报”的意思，用途就是弹出“警告框”。</p>\n<ol start=\"2\">\n<li>prompt（）语句：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  var a = prompt(&quot;请输入&quot;);</span><br><span class=\"line\">  alert(a);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>prompt就是专门用来弹出能够让用户输入的对话框</p>\n<ol start=\"3\">\n<li><p>confirm（）</p>\n<p>comfirm(“你好吗？”);//消息对话框通常用于允许用户做选择的动作<br>消息对话框通常用于允许用户做选择的动作，点击确定，返回true,点击返回，返回false.</p>\n</li>\n<li>console控制台输出</li>\n</ol>\n<p>Console.log() 控制台输出 普通输出语句<br>Console.warn()  控制台警示<br>Console.error() 控制台错误提示<br>Console.info()  一般<br>Console.debug() 除错信息</p>\n<ol start=\"5\">\n<li>document.write()<br>document.write()直接在HTML文档中写入内容并显示</li>\n</ol>\n<hr>\n<blockquote>\n<h2 id=\"三、-类型、值、变量\"><a href=\"#三、-类型、值、变量\" class=\"headerlink\" title=\"三、 类型、值、变量\"></a>三、 类型、值、变量</h2></blockquote>\n<h3 id=\"3-1类型\"><a href=\"#3-1类型\" class=\"headerlink\" title=\"3.1类型\"></a><strong><em>3.1类型</em></strong></h3><ol>\n<li><ul>\n<li><p>简单的数据类型：</p>\n<ul>\n<li>number     数字类型       </li>\n<li>string     字符串类型     </li>\n<li><p>boolean    布尔类型  </p>\n</li>\n<li><p>undefined<br>在使用var声明变量，但未对其加以初始化时，这个变量的类型就是undefined，且其默认初始化值为undefined。<br>对未声明与初始化的变量，直接使用，那么这个变量的类型也是undefined，但是没有默认初始化值。</p>\n</li>\n<li>null<br>null类型的默认值是null，从逻辑角度讲，是表示一个空对象指针。<br>js高级程序上有讲到，undefined类型是派生自null的，不严格的说二者都是指没有明确赋值的类型，但是细分之后，undefined类型，被用来形容未经初始化的变量，null类型被用来形容空对象指针。<br>所以，如果定义的变量准备在将来用于保存对象（即复杂的数据类型object），那么就该将该变量初始化为null。<br>区分，当一个变量声明后，未初始化，则该值为undefined，如果这个值是为了保存对象，则修改其默认初始化的值，改为null。 所以当检测其类型时，会显示类型为object。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>文／Miss____Du（简书作者）<br>原文链接：<a href=\"http://www.jianshu.com/p/4841fcc6b4e7\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/4841fcc6b4e7</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>\n<pre><code>* 复杂的数据类型\n * object   对象\n</code></pre><ol start=\"2\">\n<li>数据类型转换：<h3 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h3> 数字–&gt;字符串：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 123;</span><br><span class=\"line\">a  = a + &quot;&quot;;</span><br><span class=\"line\">console.log(typeof(a))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>字符串–&gt;数字<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;123&quot;;</span><br><span class=\"line\">a  = a - 0 ;</span><br><span class=\"line\">console.log(typeof(a))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h3><p>数字–&gt;字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 123;</span><br><span class=\"line\">var b = string(a)</span><br><span class=\"line\">   console.log(typeof(b))</span><br><span class=\"line\"> //或用a.toString();</span><br></pre></td></tr></table></figure></p>\n<p>字符串–&gt;数字<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;123&quot;;</span><br><span class=\"line\">var b = Number(a)</span><br><span class=\"line\">   console.log(typeof(b))</span><br></pre></td></tr></table></figure></p>\n<p>转换成整型：parseInt()；<br>转换成浮点型： parseFloat();</p>\n<h3 id=\"3-2变量\"><a href=\"#3-2变量\" class=\"headerlink\" title=\"3.2变量\"></a><strong><em>3.2变量</em></strong></h3><ol>\n<li>变量的命名规范：<br>只能由字母、数字、下划线、美元符号$构成，且不能以数字开头，并且不能是JavaScript关键字保留字。<br>比如：<br>var a ;<br>var $ab123;</li>\n<li>注意要点，<ul>\n<li>变量用var来定义。只有定义之后，这个变量才能够使用，而且不需要考虑他到底是什么类型的，尽管用var来第一即可。</li>\n<li>后面代码要用到变量的时候一定不要加引号，加引号就变成了字符串了，而不是变量。</li>\n<li>大写字母是可以使用的，并且大小写敏感。也就是说A和a是两个变量。</li>\n<li>变量名不能超过255个字符，一半也不会写那么长。。</li>\n<li>如果在声明时没有写var被认为是全局变量。</li>\n<li>javascript里面声明的变量，会提升至函数顶部。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<blockquote>\n<h2 id=\"四、语句\"><a href=\"#四、语句\" class=\"headerlink\" title=\"四、语句\"></a>四、语句</h2><ul>\n<li>if语句<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(表达式)&#123;</span><br><span class=\"line\">  console.log(我就出去玩)；</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">  console.log(我就在家写作业); </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>for循环语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 1 ; i &lt;= 100 ; i++)&#123;</span><br><span class=\"line\">  console.log(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>switch语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var n = null;</span><br><span class=\"line\">switch(n)&#123;</span><br><span class=\"line\">    case 1:</span><br><span class=\"line\">      执行的代码;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    case 2:</span><br><span class=\"line\">      执行的代码;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      执行的代码;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>while语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i = 1；</span><br><span class=\"line\">while（i&lt;10）&#123;</span><br><span class=\"line\">    console.log(i)</span><br><span class=\"line\">    i ++ ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Do..while循环语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i = 1；</span><br><span class=\"line\">do&#123;</span><br><span class=\"line\"> console.log(i)</span><br><span class=\"line\">    i ++ ;</span><br><span class=\"line\">&#125;while(i&lt;10)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>break 语句 和 continue语句<br>break语句：它是结束当前整个这个循环体，跳出该循环体；<br>continue语句：它是结束当前的一个循环，后面的内容不执行，跳入本循环的下一个循环。</p>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"扩展小知识点-序列化和反序列化\"><a href=\"#扩展小知识点-序列化和反序列化\" class=\"headerlink\" title=\"(扩展小知识点)序列化和反序列化\"></a>(扩展小知识点)序列化和反序列化</h2><p>主要用于存储对象状态为另一种通用格式，比如存储为二进制、xml、json等等，把对象转换成这种格式就叫序列化，而反序列化通常是从这种格式转换回来。<br>使用序列化主要是因为跨平台和对象存储的需求，因为网络上只允许字符串或者二进制格式，而文件需要使用二进制流格式，如果想把一个内存中的对象存储下来就必须使用序列化转换为xml（字符串）、json（字符串）或二进制（流）</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>突然发现对js的一些细节知识点记忆几乎遗忘，所以从今天开始我想从新<br>把js基础给过一边，来来巩固一下。</p>\n<blockquote>\n<ul>\n<li>JavaScript和ECMAScript的关系</li>\n<li>程序书写的位置、简单语句</li>\n<li>类型、值、变量</li>\n<li>表达式、运算符</li>\n</ul>\n</blockquote>\n<hr>\n<blockquote>\n<h2 id=\"一、JavaScript和ECMAScript的关系\"><a href=\"#一、JavaScript和ECMAScript的关系\" class=\"headerlink\" title=\"一、JavaScript和ECMAScript的关系\"></a>一、JavaScript和ECMAScript的关系</h2></blockquote>\n<h2 id=\"对于他们的比较，只要知道一句就好了：简单来说ECMAScript不是一门语言，而是一个标准，是js的一个标准。而javascript是一种轻量级语言。\"><a href=\"#对于他们的比较，只要知道一句就好了：简单来说ECMAScript不是一门语言，而是一个标准，是js的一个标准。而javascript是一种轻量级语言。\" class=\"headerlink\" title=\"对于他们的比较，只要知道一句就好了：简单来说ECMAScript不是一门语言，而是一个标准，是js的一个标准。而javascript是一种轻量级语言。\"></a>对于他们的比较，只要知道一句就好了：简单来说ECMAScript不是一门语言，而是一个标准，是js的一个标准。而javascript是一种轻量级语言。</h2><blockquote>\n<h2 id=\"二、程序书写的位置、简单语句\"><a href=\"#二、程序书写的位置、简单语句\" class=\"headerlink\" title=\"二、程序书写的位置、简单语句\"></a>二、程序书写的位置、简单语句</h2></blockquote>\n<h3 id=\"2-1程序书写的位置\"><a href=\"#2-1程序书写的位置\" class=\"headerlink\" title=\"2.1程序书写的位置\"></a><strong><em>2.1程序书写的位置</em></strong></h3><ol>\n<li><p>行内式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onclick=&quot;alert(&apos;你好吗&apos;)&quot;&gt;点击我&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n<p> 一般情况，单双引号是一样的,但是出现了包裹的情况,所以要严格处理这种情况，我们一般采取的是 外双内单的格式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&quot;javascript:void(0);&quot;&gt;&lt;/a&gt;  // 防止跳转</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>内联式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;  //任何一个地方</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>最好放在body标签下面，否则会出现加载顺序的问题。如果要写在head标签里的话需要些一个入口函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">      window.onload = function()&#123; </span><br><span class=\"line\">          alert(&quot;hello&quot;)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<ol start=\"3\">\n<li>外链式：<br>另外建立一个文件，然后以.js为后缀名，里面放你要写的js代码。然后再html里面引入一下代码：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=”text/javascript” src=”js的路径.js”&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"2-2简单语句\"><a href=\"#2-2简单语句\" class=\"headerlink\" title=\"2.2简单语句\"></a><strong><em>2.2简单语句</em></strong></h3><ol>\n<li>alert（）语句：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  window.alert(&quot;今天真好&quot;);</span><br><span class=\"line\">        /* 这里说明一下window是可以省略的 */</span><br><span class=\"line\">&lt;/script&gt;    /*（内联式）*/</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>这是一个弹出框语句，打开页面后，会有一个弹出框。alert就是英语里面的“警报”的意思，用途就是弹出“警告框”。</p>\n<ol start=\"2\">\n<li>prompt（）语句：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">  var a = prompt(&quot;请输入&quot;);</span><br><span class=\"line\">  alert(a);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>prompt就是专门用来弹出能够让用户输入的对话框</p>\n<ol start=\"3\">\n<li><p>confirm（）</p>\n<p>comfirm(“你好吗？”);//消息对话框通常用于允许用户做选择的动作<br>消息对话框通常用于允许用户做选择的动作，点击确定，返回true,点击返回，返回false.</p>\n</li>\n<li>console控制台输出</li>\n</ol>\n<p>Console.log() 控制台输出 普通输出语句<br>Console.warn()  控制台警示<br>Console.error() 控制台错误提示<br>Console.info()  一般<br>Console.debug() 除错信息</p>\n<ol start=\"5\">\n<li>document.write()<br>document.write()直接在HTML文档中写入内容并显示</li>\n</ol>\n<hr>\n<blockquote>\n<h2 id=\"三、-类型、值、变量\"><a href=\"#三、-类型、值、变量\" class=\"headerlink\" title=\"三、 类型、值、变量\"></a>三、 类型、值、变量</h2></blockquote>\n<h3 id=\"3-1类型\"><a href=\"#3-1类型\" class=\"headerlink\" title=\"3.1类型\"></a><strong><em>3.1类型</em></strong></h3><ol>\n<li><ul>\n<li><p>简单的数据类型：</p>\n<ul>\n<li>number     数字类型       </li>\n<li>string     字符串类型     </li>\n<li><p>boolean    布尔类型  </p>\n</li>\n<li><p>undefined<br>在使用var声明变量，但未对其加以初始化时，这个变量的类型就是undefined，且其默认初始化值为undefined。<br>对未声明与初始化的变量，直接使用，那么这个变量的类型也是undefined，但是没有默认初始化值。</p>\n</li>\n<li>null<br>null类型的默认值是null，从逻辑角度讲，是表示一个空对象指针。<br>js高级程序上有讲到，undefined类型是派生自null的，不严格的说二者都是指没有明确赋值的类型，但是细分之后，undefined类型，被用来形容未经初始化的变量，null类型被用来形容空对象指针。<br>所以，如果定义的变量准备在将来用于保存对象（即复杂的数据类型object），那么就该将该变量初始化为null。<br>区分，当一个变量声明后，未初始化，则该值为undefined，如果这个值是为了保存对象，则修改其默认初始化的值，改为null。 所以当检测其类型时，会显示类型为object。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>文／Miss____Du（简书作者）<br>原文链接：<a href=\"http://www.jianshu.com/p/4841fcc6b4e7\" target=\"_blank\" rel=\"noopener\">http://www.jianshu.com/p/4841fcc6b4e7</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>\n<pre><code>* 复杂的数据类型\n * object   对象\n</code></pre><ol start=\"2\">\n<li>数据类型转换：<h3 id=\"隐式类型转换\"><a href=\"#隐式类型转换\" class=\"headerlink\" title=\"隐式类型转换\"></a>隐式类型转换</h3> 数字–&gt;字符串：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 123;</span><br><span class=\"line\">a  = a + &quot;&quot;;</span><br><span class=\"line\">console.log(typeof(a))</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>字符串–&gt;数字<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;123&quot;;</span><br><span class=\"line\">a  = a - 0 ;</span><br><span class=\"line\">console.log(typeof(a))</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h3><p>数字–&gt;字符串<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = 123;</span><br><span class=\"line\">var b = string(a)</span><br><span class=\"line\">   console.log(typeof(b))</span><br><span class=\"line\"> //或用a.toString();</span><br></pre></td></tr></table></figure></p>\n<p>字符串–&gt;数字<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = &quot;123&quot;;</span><br><span class=\"line\">var b = Number(a)</span><br><span class=\"line\">   console.log(typeof(b))</span><br></pre></td></tr></table></figure></p>\n<p>转换成整型：parseInt()；<br>转换成浮点型： parseFloat();</p>\n<h3 id=\"3-2变量\"><a href=\"#3-2变量\" class=\"headerlink\" title=\"3.2变量\"></a><strong><em>3.2变量</em></strong></h3><ol>\n<li>变量的命名规范：<br>只能由字母、数字、下划线、美元符号$构成，且不能以数字开头，并且不能是JavaScript关键字保留字。<br>比如：<br>var a ;<br>var $ab123;</li>\n<li>注意要点，<ul>\n<li>变量用var来定义。只有定义之后，这个变量才能够使用，而且不需要考虑他到底是什么类型的，尽管用var来第一即可。</li>\n<li>后面代码要用到变量的时候一定不要加引号，加引号就变成了字符串了，而不是变量。</li>\n<li>大写字母是可以使用的，并且大小写敏感。也就是说A和a是两个变量。</li>\n<li>变量名不能超过255个字符，一半也不会写那么长。。</li>\n<li>如果在声明时没有写var被认为是全局变量。</li>\n<li>javascript里面声明的变量，会提升至函数顶部。</li>\n</ul>\n</li>\n</ol>\n<hr>\n<blockquote>\n<h2 id=\"四、语句\"><a href=\"#四、语句\" class=\"headerlink\" title=\"四、语句\"></a>四、语句</h2><ul>\n<li>if语句<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(表达式)&#123;</span><br><span class=\"line\">  console.log(我就出去玩)；</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">  console.log(我就在家写作业); </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>for循环语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i = 1 ; i &lt;= 100 ; i++)&#123;</span><br><span class=\"line\">  console.log(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>switch语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var n = null;</span><br><span class=\"line\">switch(n)&#123;</span><br><span class=\"line\">    case 1:</span><br><span class=\"line\">      执行的代码;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">    case 2:</span><br><span class=\"line\">      执行的代码;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">        ......</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      执行的代码;</span><br><span class=\"line\">        break;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>while语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i = 1；</span><br><span class=\"line\">while（i&lt;10）&#123;</span><br><span class=\"line\">    console.log(i)</span><br><span class=\"line\">    i ++ ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Do..while循环语句</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i = 1；</span><br><span class=\"line\">do&#123;</span><br><span class=\"line\"> console.log(i)</span><br><span class=\"line\">    i ++ ;</span><br><span class=\"line\">&#125;while(i&lt;10)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>break 语句 和 continue语句<br>break语句：它是结束当前整个这个循环体，跳出该循环体；<br>continue语句：它是结束当前的一个循环，后面的内容不执行，跳入本循环的下一个循环。</p>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"扩展小知识点-序列化和反序列化\"><a href=\"#扩展小知识点-序列化和反序列化\" class=\"headerlink\" title=\"(扩展小知识点)序列化和反序列化\"></a>(扩展小知识点)序列化和反序列化</h2><p>主要用于存储对象状态为另一种通用格式，比如存储为二进制、xml、json等等，把对象转换成这种格式就叫序列化，而反序列化通常是从这种格式转换回来。<br>使用序列化主要是因为跨平台和对象存储的需求，因为网络上只允许字符串或者二进制格式，而文件需要使用二进制流格式，如果想把一个内存中的对象存储下来就必须使用序列化转换为xml（字符串）、json（字符串）或二进制（流）</p>\n</blockquote>\n"},{"title":"前端工具小总结","_content":"\n今天总结几个前端开发所用到的工具区别，以备后用. \n主要内容为：\n\n> * npm与bower的区别？\n> * svn与git的区别？\n> * 分布式和集群？（后台架构的知识）\n> * gulp与grunt?\n> * gulp与webpack?\n\n## 一、npm与bower的区别？\n我认为的npm和bower其实并没有太大的区别，硬要说的话，我是这么理解这两个工具的：\n\n1.Bower大部分是用来下载前端开发工具，比如CSS、JS插件库等内容进行依赖管理，依赖的下载目录结构可以自定义。NPM主要运用于Node.js项目的内部依赖包管理，安装的模块位于项目根目录下的node_modules文件夹内。\n2.现在看来，npm已基本取代bower，bower已经出局。\n\n## 二、svn与git的区别？\n1.git是分布式的，SVN不是。\n2.git把内容按元数据方式存储，而SVN是按文件\n3.git下载下来后，在离线状态下可以看到所有的Log版本。而SVN需要联网，而且需要先updata一下，忘记就徒增麻烦了。\n(git的特点版本控制可以不依赖网络做任何事情，对分支和合并有更好的支持)\n4.git的内容的完整性要优于SVN:git的内容存储使用的是SHA-1哈希算法(不太熟悉)，但是我知道它能够确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。\n\n## 三、分布式和集群？（后台构架知识）\n1.分布式：一个业务分拆多个子业务，部署在不同的服务器上（比如腾讯QQ是一个总体业务，它可以分出想聊天、视频等等子业务，把这些子业务放在了不同的服务器上，所以每个服务器的业务都不同。来便于维护和管理）\n2.集群：同一个业务，部署在多个服务器上（比如腾讯QQ的聊天业务，不可能只凡在一个服务器上，否则用户那么多，它自己吃不消，他又将该业务部署在了不同的服务器上，而这些服务器实现的业务都是聊天。缓和服务器压力）\n## 四、gulp与grunt?\n1.gulp的语法比grunt语法简洁，用gulp官网的话说，这个叫做“代码优于配置”\n2.gulp构建项目的时间速度快，通过利用Node.js强大的流，不需要往磁盘写中间文件，可以更快地完成构建。\n## 五、gulp与webpack?\nwebpack的有点：\n 1.不用考虑资源位置， webpack 给你做了。 \n 2.不用考虑资源加载方式，异步同步改一下写法就行， webpack 也给你做了。 \n 3.不用考虑 common 资源的整理， webpack 有个 CommonsChunkPlugin 能做。 \n备注：在 webpack 里，你只需要 require 就行了，依赖关系 webpack 帮你处理。而在 gulp 里，你还是需要把所有的 js 或者其他依赖文件用 gulp.src 弄起来。\n\n","source":"_posts/tools_contrast.md","raw":"---\ntitle: 前端工具小总结\n---\n\n今天总结几个前端开发所用到的工具区别，以备后用. \n主要内容为：\n\n> * npm与bower的区别？\n> * svn与git的区别？\n> * 分布式和集群？（后台架构的知识）\n> * gulp与grunt?\n> * gulp与webpack?\n\n## 一、npm与bower的区别？\n我认为的npm和bower其实并没有太大的区别，硬要说的话，我是这么理解这两个工具的：\n\n1.Bower大部分是用来下载前端开发工具，比如CSS、JS插件库等内容进行依赖管理，依赖的下载目录结构可以自定义。NPM主要运用于Node.js项目的内部依赖包管理，安装的模块位于项目根目录下的node_modules文件夹内。\n2.现在看来，npm已基本取代bower，bower已经出局。\n\n## 二、svn与git的区别？\n1.git是分布式的，SVN不是。\n2.git把内容按元数据方式存储，而SVN是按文件\n3.git下载下来后，在离线状态下可以看到所有的Log版本。而SVN需要联网，而且需要先updata一下，忘记就徒增麻烦了。\n(git的特点版本控制可以不依赖网络做任何事情，对分支和合并有更好的支持)\n4.git的内容的完整性要优于SVN:git的内容存储使用的是SHA-1哈希算法(不太熟悉)，但是我知道它能够确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。\n\n## 三、分布式和集群？（后台构架知识）\n1.分布式：一个业务分拆多个子业务，部署在不同的服务器上（比如腾讯QQ是一个总体业务，它可以分出想聊天、视频等等子业务，把这些子业务放在了不同的服务器上，所以每个服务器的业务都不同。来便于维护和管理）\n2.集群：同一个业务，部署在多个服务器上（比如腾讯QQ的聊天业务，不可能只凡在一个服务器上，否则用户那么多，它自己吃不消，他又将该业务部署在了不同的服务器上，而这些服务器实现的业务都是聊天。缓和服务器压力）\n## 四、gulp与grunt?\n1.gulp的语法比grunt语法简洁，用gulp官网的话说，这个叫做“代码优于配置”\n2.gulp构建项目的时间速度快，通过利用Node.js强大的流，不需要往磁盘写中间文件，可以更快地完成构建。\n## 五、gulp与webpack?\nwebpack的有点：\n 1.不用考虑资源位置， webpack 给你做了。 \n 2.不用考虑资源加载方式，异步同步改一下写法就行， webpack 也给你做了。 \n 3.不用考虑 common 资源的整理， webpack 有个 CommonsChunkPlugin 能做。 \n备注：在 webpack 里，你只需要 require 就行了，依赖关系 webpack 帮你处理。而在 gulp 里，你还是需要把所有的 js 或者其他依赖文件用 gulp.src 弄起来。\n\n","slug":"tools_contrast","published":1,"date":"2016-10-17T06:25:52.000Z","updated":"2016-10-17T06:25:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghao8j20007w0ua1csnbjpc","content":"<p>今天总结几个前端开发所用到的工具区别，以备后用.<br>主要内容为：</p>\n<blockquote>\n<ul>\n<li>npm与bower的区别？</li>\n<li>svn与git的区别？</li>\n<li>分布式和集群？（后台架构的知识）</li>\n<li>gulp与grunt?</li>\n<li>gulp与webpack?</li>\n</ul>\n</blockquote>\n<h2 id=\"一、npm与bower的区别？\"><a href=\"#一、npm与bower的区别？\" class=\"headerlink\" title=\"一、npm与bower的区别？\"></a>一、npm与bower的区别？</h2><p>我认为的npm和bower其实并没有太大的区别，硬要说的话，我是这么理解这两个工具的：</p>\n<p>1.Bower大部分是用来下载前端开发工具，比如CSS、JS插件库等内容进行依赖管理，依赖的下载目录结构可以自定义。NPM主要运用于Node.js项目的内部依赖包管理，安装的模块位于项目根目录下的node_modules文件夹内。<br>2.现在看来，npm已基本取代bower，bower已经出局。</p>\n<h2 id=\"二、svn与git的区别？\"><a href=\"#二、svn与git的区别？\" class=\"headerlink\" title=\"二、svn与git的区别？\"></a>二、svn与git的区别？</h2><p>1.git是分布式的，SVN不是。<br>2.git把内容按元数据方式存储，而SVN是按文件<br>3.git下载下来后，在离线状态下可以看到所有的Log版本。而SVN需要联网，而且需要先updata一下，忘记就徒增麻烦了。<br>(git的特点版本控制可以不依赖网络做任何事情，对分支和合并有更好的支持)<br>4.git的内容的完整性要优于SVN:git的内容存储使用的是SHA-1哈希算法(不太熟悉)，但是我知道它能够确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</p>\n<h2 id=\"三、分布式和集群？（后台构架知识）\"><a href=\"#三、分布式和集群？（后台构架知识）\" class=\"headerlink\" title=\"三、分布式和集群？（后台构架知识）\"></a>三、分布式和集群？（后台构架知识）</h2><p>1.分布式：一个业务分拆多个子业务，部署在不同的服务器上（比如腾讯QQ是一个总体业务，它可以分出想聊天、视频等等子业务，把这些子业务放在了不同的服务器上，所以每个服务器的业务都不同。来便于维护和管理）<br>2.集群：同一个业务，部署在多个服务器上（比如腾讯QQ的聊天业务，不可能只凡在一个服务器上，否则用户那么多，它自己吃不消，他又将该业务部署在了不同的服务器上，而这些服务器实现的业务都是聊天。缓和服务器压力）</p>\n<h2 id=\"四、gulp与grunt\"><a href=\"#四、gulp与grunt\" class=\"headerlink\" title=\"四、gulp与grunt?\"></a>四、gulp与grunt?</h2><p>1.gulp的语法比grunt语法简洁，用gulp官网的话说，这个叫做“代码优于配置”<br>2.gulp构建项目的时间速度快，通过利用Node.js强大的流，不需要往磁盘写中间文件，可以更快地完成构建。</p>\n<h2 id=\"五、gulp与webpack\"><a href=\"#五、gulp与webpack\" class=\"headerlink\" title=\"五、gulp与webpack?\"></a>五、gulp与webpack?</h2><p>webpack的有点：<br> 1.不用考虑资源位置， webpack 给你做了。<br> 2.不用考虑资源加载方式，异步同步改一下写法就行， webpack 也给你做了。<br> 3.不用考虑 common 资源的整理， webpack 有个 CommonsChunkPlugin 能做。<br>备注：在 webpack 里，你只需要 require 就行了，依赖关系 webpack 帮你处理。而在 gulp 里，你还是需要把所有的 js 或者其他依赖文件用 gulp.src 弄起来。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天总结几个前端开发所用到的工具区别，以备后用.<br>主要内容为：</p>\n<blockquote>\n<ul>\n<li>npm与bower的区别？</li>\n<li>svn与git的区别？</li>\n<li>分布式和集群？（后台架构的知识）</li>\n<li>gulp与grunt?</li>\n<li>gulp与webpack?</li>\n</ul>\n</blockquote>\n<h2 id=\"一、npm与bower的区别？\"><a href=\"#一、npm与bower的区别？\" class=\"headerlink\" title=\"一、npm与bower的区别？\"></a>一、npm与bower的区别？</h2><p>我认为的npm和bower其实并没有太大的区别，硬要说的话，我是这么理解这两个工具的：</p>\n<p>1.Bower大部分是用来下载前端开发工具，比如CSS、JS插件库等内容进行依赖管理，依赖的下载目录结构可以自定义。NPM主要运用于Node.js项目的内部依赖包管理，安装的模块位于项目根目录下的node_modules文件夹内。<br>2.现在看来，npm已基本取代bower，bower已经出局。</p>\n<h2 id=\"二、svn与git的区别？\"><a href=\"#二、svn与git的区别？\" class=\"headerlink\" title=\"二、svn与git的区别？\"></a>二、svn与git的区别？</h2><p>1.git是分布式的，SVN不是。<br>2.git把内容按元数据方式存储，而SVN是按文件<br>3.git下载下来后，在离线状态下可以看到所有的Log版本。而SVN需要联网，而且需要先updata一下，忘记就徒增麻烦了。<br>(git的特点版本控制可以不依赖网络做任何事情，对分支和合并有更好的支持)<br>4.git的内容的完整性要优于SVN:git的内容存储使用的是SHA-1哈希算法(不太熟悉)，但是我知道它能够确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</p>\n<h2 id=\"三、分布式和集群？（后台构架知识）\"><a href=\"#三、分布式和集群？（后台构架知识）\" class=\"headerlink\" title=\"三、分布式和集群？（后台构架知识）\"></a>三、分布式和集群？（后台构架知识）</h2><p>1.分布式：一个业务分拆多个子业务，部署在不同的服务器上（比如腾讯QQ是一个总体业务，它可以分出想聊天、视频等等子业务，把这些子业务放在了不同的服务器上，所以每个服务器的业务都不同。来便于维护和管理）<br>2.集群：同一个业务，部署在多个服务器上（比如腾讯QQ的聊天业务，不可能只凡在一个服务器上，否则用户那么多，它自己吃不消，他又将该业务部署在了不同的服务器上，而这些服务器实现的业务都是聊天。缓和服务器压力）</p>\n<h2 id=\"四、gulp与grunt\"><a href=\"#四、gulp与grunt\" class=\"headerlink\" title=\"四、gulp与grunt?\"></a>四、gulp与grunt?</h2><p>1.gulp的语法比grunt语法简洁，用gulp官网的话说，这个叫做“代码优于配置”<br>2.gulp构建项目的时间速度快，通过利用Node.js强大的流，不需要往磁盘写中间文件，可以更快地完成构建。</p>\n<h2 id=\"五、gulp与webpack\"><a href=\"#五、gulp与webpack\" class=\"headerlink\" title=\"五、gulp与webpack?\"></a>五、gulp与webpack?</h2><p>webpack的有点：<br> 1.不用考虑资源位置， webpack 给你做了。<br> 2.不用考虑资源加载方式，异步同步改一下写法就行， webpack 也给你做了。<br> 3.不用考虑 common 资源的整理， webpack 有个 CommonsChunkPlugin 能做。<br>备注：在 webpack 里，你只需要 require 就行了，依赖关系 webpack 帮你处理。而在 gulp 里，你还是需要把所有的 js 或者其他依赖文件用 gulp.src 弄起来。</p>\n"},{"title":"([].slice.call(arguments, 1))的理解","_content":"\n------\n\n\n> * [] 是什么？\n> * [].slice是什么？\n> * fn.call()是什么？\n> * arguments是什么？\n\n\n------\n\n## 一. []是什么？\n\n\n```js\nlet arr = []                        \nlet arr1 = new Array()     \n```\n这两者都是创建一个空数组，没有什么不同的。\n\n------\n\n## 二. [].slice是什么?\n它是用来截取数组的.\n\n```js\nvar a = [1, 2, 3, 4, 5];\nvar b = a.slice(3);// b是a从2号位开始的片段// 也就是[4, 5]\nvar c = a.slice(1, 3) // [2, 3]\n```\n\n------\n\n\n## fn.call()是什么？\n\njs一切皆对象，函数也是对象，对象就有一些属性和方法，call就是函数的方法，他是用来改变函数里this指针。\n```js\nvar a = function (n) {    \n   console.log(this.n)\n}\n   \nvar b = {\n  n: 123\n};\n\na.call(b, 2); // log出b对象,123\n```\n\n------\n\n\n## 四. arguments是什么？\n\narguments是一个数组(并不是真正的数组)。每一个js函数内部都有arguments，它代表传入的参数数组（类数组）。\n\n```js\nfunction a () {\n\n   console.log(arguments) \n\n}\n\na(1, 2, 3) // [1, 2 ,3]\n\n```\n\n------\n\n\n## 五. 来理解[].slice.call(arguments, 1)\n\n直接看下代码：\n\n```js\nvar a = function(f){   \n\n  console.log([].slice.call(arguments, 1));\n\n}\n\na('abc', [1, 2, 3, 4, 5]); // 返回[Array[4]]\n```\n你会想是不是直接这样写就好理解了：arguments.slice(1),其实arguments是个类数组，不是真正的数组，他没有slice方法\n```js\nvar a = function(f){\n\n console.log(arguments instanceof Array)   \n\n console.log(arguments.slice(1));\n\n}\n\na('abc', [1, 2, 3, 4, 5]);\n\n// false\n\n// 结果报错：arguments.slice is not a function...\n```\n所以在使用slice方法的时候，需要用类似[].slice.call(arguments, 1) 的这种方式去调用\n","source":"_posts/slice.call.md","raw":"---\ntitle: ([].slice.call(arguments, 1))的理解\n---\n\n------\n\n\n> * [] 是什么？\n> * [].slice是什么？\n> * fn.call()是什么？\n> * arguments是什么？\n\n\n------\n\n## 一. []是什么？\n\n\n```js\nlet arr = []                        \nlet arr1 = new Array()     \n```\n这两者都是创建一个空数组，没有什么不同的。\n\n------\n\n## 二. [].slice是什么?\n它是用来截取数组的.\n\n```js\nvar a = [1, 2, 3, 4, 5];\nvar b = a.slice(3);// b是a从2号位开始的片段// 也就是[4, 5]\nvar c = a.slice(1, 3) // [2, 3]\n```\n\n------\n\n\n## fn.call()是什么？\n\njs一切皆对象，函数也是对象，对象就有一些属性和方法，call就是函数的方法，他是用来改变函数里this指针。\n```js\nvar a = function (n) {    \n   console.log(this.n)\n}\n   \nvar b = {\n  n: 123\n};\n\na.call(b, 2); // log出b对象,123\n```\n\n------\n\n\n## 四. arguments是什么？\n\narguments是一个数组(并不是真正的数组)。每一个js函数内部都有arguments，它代表传入的参数数组（类数组）。\n\n```js\nfunction a () {\n\n   console.log(arguments) \n\n}\n\na(1, 2, 3) // [1, 2 ,3]\n\n```\n\n------\n\n\n## 五. 来理解[].slice.call(arguments, 1)\n\n直接看下代码：\n\n```js\nvar a = function(f){   \n\n  console.log([].slice.call(arguments, 1));\n\n}\n\na('abc', [1, 2, 3, 4, 5]); // 返回[Array[4]]\n```\n你会想是不是直接这样写就好理解了：arguments.slice(1),其实arguments是个类数组，不是真正的数组，他没有slice方法\n```js\nvar a = function(f){\n\n console.log(arguments instanceof Array)   \n\n console.log(arguments.slice(1));\n\n}\n\na('abc', [1, 2, 3, 4, 5]);\n\n// false\n\n// 结果报错：arguments.slice is not a function...\n```\n所以在使用slice方法的时候，需要用类似[].slice.call(arguments, 1) 的这种方式去调用\n","slug":"slice.call","published":1,"date":"2018-04-26T02:10:05.654Z","updated":"2018-04-26T02:52:38.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghao8j40008w0uay9avhgpa","content":"<hr>\n<blockquote>\n<ul>\n<li>[] 是什么？</li>\n<li>[].slice是什么？</li>\n<li>fn.call()是什么？</li>\n<li>arguments是什么？</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"一-是什么？\"><a href=\"#一-是什么？\" class=\"headerlink\" title=\"一. []是什么？\"></a>一. []是什么？</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = []                        </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>()</span><br></pre></td></tr></table></figure>\n<p>这两者都是创建一个空数组，没有什么不同的。</p>\n<hr>\n<h2 id=\"二-slice是什么\"><a href=\"#二-slice是什么\" class=\"headerlink\" title=\"二. [].slice是什么?\"></a>二. [].slice是什么?</h2><p>它是用来截取数组的.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.slice(<span class=\"number\">3</span>);<span class=\"comment\">// b是a从2号位开始的片段// 也就是[4, 5]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a.slice(<span class=\"number\">1</span>, <span class=\"number\">3</span>) <span class=\"comment\">// [2, 3]</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"fn-call-是什么？\"><a href=\"#fn-call-是什么？\" class=\"headerlink\" title=\"fn.call()是什么？\"></a>fn.call()是什么？</h2><p>js一切皆对象，函数也是对象，对象就有一些属性和方法，call就是函数的方法，他是用来改变函数里this指针。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;    </span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.n)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;</span><br><span class=\"line\">  n: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a.call(b, <span class=\"number\">2</span>); <span class=\"comment\">// log出b对象,123</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"四-arguments是什么？\"><a href=\"#四-arguments是什么？\" class=\"headerlink\" title=\"四. arguments是什么？\"></a>四. arguments是什么？</h2><p>arguments是一个数组(并不是真正的数组)。每一个js函数内部都有arguments，它代表传入的参数数组（类数组）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// [1, 2 ,3]</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"五-来理解-slice-call-arguments-1\"><a href=\"#五-来理解-slice-call-arguments-1\" class=\"headerlink\" title=\"五. 来理解[].slice.call(arguments, 1)\"></a>五. 来理解[].slice.call(arguments, 1)</h2><p>直接看下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>)</span>&#123;   </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log([].slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a(<span class=\"string\">'abc'</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// 返回[Array[4]]</span></span><br></pre></td></tr></table></figure>\n<p>你会想是不是直接这样写就好理解了：arguments.slice(1),其实arguments是个类数组，不是真正的数组，他没有slice方法<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)   </span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.slice(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a(<span class=\"string\">'abc'</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果报错：arguments.slice is not a function...</span></span><br></pre></td></tr></table></figure></p>\n<p>所以在使用slice方法的时候，需要用类似[].slice.call(arguments, 1) 的这种方式去调用</p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<blockquote>\n<ul>\n<li>[] 是什么？</li>\n<li>[].slice是什么？</li>\n<li>fn.call()是什么？</li>\n<li>arguments是什么？</li>\n</ul>\n</blockquote>\n<hr>\n<h2 id=\"一-是什么？\"><a href=\"#一-是什么？\" class=\"headerlink\" title=\"一. []是什么？\"></a>一. []是什么？</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = []                        </span><br><span class=\"line\"><span class=\"keyword\">let</span> arr1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>()</span><br></pre></td></tr></table></figure>\n<p>这两者都是创建一个空数组，没有什么不同的。</p>\n<hr>\n<h2 id=\"二-slice是什么\"><a href=\"#二-slice是什么\" class=\"headerlink\" title=\"二. [].slice是什么?\"></a>二. [].slice是什么?</h2><p>它是用来截取数组的.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = a.slice(<span class=\"number\">3</span>);<span class=\"comment\">// b是a从2号位开始的片段// 也就是[4, 5]</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = a.slice(<span class=\"number\">1</span>, <span class=\"number\">3</span>) <span class=\"comment\">// [2, 3]</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"fn-call-是什么？\"><a href=\"#fn-call-是什么？\" class=\"headerlink\" title=\"fn.call()是什么？\"></a>fn.call()是什么？</h2><p>js一切皆对象，函数也是对象，对象就有一些属性和方法，call就是函数的方法，他是用来改变函数里this指针。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">n</span>) </span>&#123;    </span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"keyword\">this</span>.n)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"keyword\">var</span> b = &#123;</span><br><span class=\"line\">  n: <span class=\"number\">123</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">a.call(b, <span class=\"number\">2</span>); <span class=\"comment\">// log出b对象,123</span></span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"四-arguments是什么？\"><a href=\"#四-arguments是什么？\" class=\"headerlink\" title=\"四. arguments是什么？\"></a>四. arguments是什么？</h2><p>arguments是一个数组(并不是真正的数组)。每一个js函数内部都有arguments，它代表传入的参数数组（类数组）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>) </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>) <span class=\"comment\">// [1, 2 ,3]</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"五-来理解-slice-call-arguments-1\"><a href=\"#五-来理解-slice-call-arguments-1\" class=\"headerlink\" title=\"五. 来理解[].slice.call(arguments, 1)\"></a>五. 来理解[].slice.call(arguments, 1)</h2><p>直接看下代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>)</span>&#123;   </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log([].slice.call(<span class=\"built_in\">arguments</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a(<span class=\"string\">'abc'</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]); <span class=\"comment\">// 返回[Array[4]]</span></span><br></pre></td></tr></table></figure>\n<p>你会想是不是直接这样写就好理解了：arguments.slice(1),其实arguments是个类数组，不是真正的数组，他没有slice方法<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">f</span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span> <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)   </span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"built_in\">arguments</span>.slice(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">a(<span class=\"string\">'abc'</span>, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结果报错：arguments.slice is not a function...</span></span><br></pre></td></tr></table></figure></p>\n<p>所以在使用slice方法的时候，需要用类似[].slice.call(arguments, 1) 的这种方式去调用</p>\n"},{"title":"Vue.js学习资料集（持续更新中）","_content":"\n------\n\n版权声明： 转自 SkyeTang http://blog.csdn.net/skyetang/article/details/51823876\n\n最近为了能快速进入工作状态，找了许多学习vue.js的资料。。唉~坚持就是胜利！！！\n\n> * 一、资源类\n> * 二、社区\n> * 三、组件\n> * 四、开发工具\n> * 五、优秀项目\n> * 六、优秀文章教程\n\n\n\n## 一、资源类\n\n文档\n\nvue官方文档[http://cn.vuejs.org/]\nvue论坛[http://http//forum.vuejs.org/]\n\n视频教程\nvue1.0入门教程[https://laravist.com/series/vue-js-1-0-in-action-series]\n台湾小凡视频教程[https://github.com/bhnddowinf/vuejs-learn]\n\n\n------\n\n## 二、社区\n\nsegmentfault-vue[https://segmentfault.com/t/vue.js]\n知乎-vue[https://www.zhihu.com/topic/20022242/questions]\n\n------\n\n## 三、组件\n\n1、官方组件\n\nLoader \nhtml-loader-for-webpack[https://github.com/vuejs/vue-html-loader]\nRouter \nvue-router-demo[https://github.com/lazyhero/vue-spa-demo]\nvue-router文档[http://router.vuejs.org/zh-cn/index.html]\nVuex（专门为 Vue.js 应用设计的状态管理架构） \nvuex文档[http://vuex.vuejs.org/zh-cn/intro.html]\nAjax \nvue-async-data[https://github.com/vuejs/vue-async-data]\nVue-cli（快速搭建vue项目） \nvue-cli[https://github.com/vuejs/vue-cli]\n2、其它组件\n\nUI组件 \nmint-ui：移动端组件[https://github.com/ElemeFE/mint-ui]\nvux：基于vue与weui的移动端UI组件[https://github.com/airyland/vux]\nvue-weui[https://github.com/aidenzou/vue-weui]\nLazyload \n图片懒加载[https://github.com/hilongjw/vue-lazyload]\nDrag \nvue-drag and drop[https://github.com/james2doyle/vue-drag-and-drop]\nInfinite无限加载 \nvue-infinite-load[https://github.com/ElemeFE/vue-infinite-scroll]\n\n------\n\n## 四、开发工具\nVue-devtools[https://github.com/vuejs/vue-devtools]\n\n------\n\n## 五、优秀项目\n\n青城 [https://github.com/zerqu/qingcheng]\nvue-blog[https://github.com/V-Tom/vue-blog]\n\n------\n\n## 六、优秀文章教程\n\nVue.js 快速入门[https://segmentfault.com/a/1190000003968020]\n基于vue和webpack的chat项目[https://segmentfault.com/a/1190000003630417]\nVue + webpack 项目实践【顶】[http://jiongks.name/blog/just-vue/]\n使用node+vue.js实现SPA应用[https://segmentfault.com/a/1190000004372736]","source":"_posts/vuejs学习资料.md","raw":"---\ntitle: Vue.js学习资料集（持续更新中）\n---\n\n------\n\n版权声明： 转自 SkyeTang http://blog.csdn.net/skyetang/article/details/51823876\n\n最近为了能快速进入工作状态，找了许多学习vue.js的资料。。唉~坚持就是胜利！！！\n\n> * 一、资源类\n> * 二、社区\n> * 三、组件\n> * 四、开发工具\n> * 五、优秀项目\n> * 六、优秀文章教程\n\n\n\n## 一、资源类\n\n文档\n\nvue官方文档[http://cn.vuejs.org/]\nvue论坛[http://http//forum.vuejs.org/]\n\n视频教程\nvue1.0入门教程[https://laravist.com/series/vue-js-1-0-in-action-series]\n台湾小凡视频教程[https://github.com/bhnddowinf/vuejs-learn]\n\n\n------\n\n## 二、社区\n\nsegmentfault-vue[https://segmentfault.com/t/vue.js]\n知乎-vue[https://www.zhihu.com/topic/20022242/questions]\n\n------\n\n## 三、组件\n\n1、官方组件\n\nLoader \nhtml-loader-for-webpack[https://github.com/vuejs/vue-html-loader]\nRouter \nvue-router-demo[https://github.com/lazyhero/vue-spa-demo]\nvue-router文档[http://router.vuejs.org/zh-cn/index.html]\nVuex（专门为 Vue.js 应用设计的状态管理架构） \nvuex文档[http://vuex.vuejs.org/zh-cn/intro.html]\nAjax \nvue-async-data[https://github.com/vuejs/vue-async-data]\nVue-cli（快速搭建vue项目） \nvue-cli[https://github.com/vuejs/vue-cli]\n2、其它组件\n\nUI组件 \nmint-ui：移动端组件[https://github.com/ElemeFE/mint-ui]\nvux：基于vue与weui的移动端UI组件[https://github.com/airyland/vux]\nvue-weui[https://github.com/aidenzou/vue-weui]\nLazyload \n图片懒加载[https://github.com/hilongjw/vue-lazyload]\nDrag \nvue-drag and drop[https://github.com/james2doyle/vue-drag-and-drop]\nInfinite无限加载 \nvue-infinite-load[https://github.com/ElemeFE/vue-infinite-scroll]\n\n------\n\n## 四、开发工具\nVue-devtools[https://github.com/vuejs/vue-devtools]\n\n------\n\n## 五、优秀项目\n\n青城 [https://github.com/zerqu/qingcheng]\nvue-blog[https://github.com/V-Tom/vue-blog]\n\n------\n\n## 六、优秀文章教程\n\nVue.js 快速入门[https://segmentfault.com/a/1190000003968020]\n基于vue和webpack的chat项目[https://segmentfault.com/a/1190000003630417]\nVue + webpack 项目实践【顶】[http://jiongks.name/blog/just-vue/]\n使用node+vue.js实现SPA应用[https://segmentfault.com/a/1190000004372736]","slug":"vuejs学习资料","published":1,"date":"2016-11-27T11:39:07.000Z","updated":"2016-11-16T11:55:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghao8j50009w0ual32527vp","content":"<hr>\n<p>版权声明： 转自 SkyeTang <a href=\"http://blog.csdn.net/skyetang/article/details/51823876\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/skyetang/article/details/51823876</a></p>\n<p>最近为了能快速进入工作状态，找了许多学习vue.js的资料。。唉~坚持就是胜利！！！</p>\n<blockquote>\n<ul>\n<li>一、资源类</li>\n<li>二、社区</li>\n<li>三、组件</li>\n<li>四、开发工具</li>\n<li>五、优秀项目</li>\n<li>六、优秀文章教程</li>\n</ul>\n</blockquote>\n<h2 id=\"一、资源类\"><a href=\"#一、资源类\" class=\"headerlink\" title=\"一、资源类\"></a>一、资源类</h2><p>文档</p>\n<p>vue官方文档[<a href=\"http://cn.vuejs.org/]\" target=\"_blank\" rel=\"noopener\">http://cn.vuejs.org/]</a><br>vue论坛[<a href=\"http://http//forum.vuejs.org/]\" target=\"_blank\" rel=\"noopener\">http://http//forum.vuejs.org/]</a></p>\n<p>视频教程<br>vue1.0入门教程[<a href=\"https://laravist.com/series/vue-js-1-0-in-action-series]\" target=\"_blank\" rel=\"noopener\">https://laravist.com/series/vue-js-1-0-in-action-series]</a><br>台湾小凡视频教程[<a href=\"https://github.com/bhnddowinf/vuejs-learn]\" target=\"_blank\" rel=\"noopener\">https://github.com/bhnddowinf/vuejs-learn]</a></p>\n<hr>\n<h2 id=\"二、社区\"><a href=\"#二、社区\" class=\"headerlink\" title=\"二、社区\"></a>二、社区</h2><p>segmentfault-vue[<a href=\"https://segmentfault.com/t/vue.js]\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/t/vue.js]</a><br>知乎-vue[<a href=\"https://www.zhihu.com/topic/20022242/questions]\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/topic/20022242/questions]</a></p>\n<hr>\n<h2 id=\"三、组件\"><a href=\"#三、组件\" class=\"headerlink\" title=\"三、组件\"></a>三、组件</h2><p>1、官方组件</p>\n<p>Loader<br>html-loader-for-webpack[<a href=\"https://github.com/vuejs/vue-html-loader]\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vue-html-loader]</a><br>Router<br>vue-router-demo[<a href=\"https://github.com/lazyhero/vue-spa-demo]\" target=\"_blank\" rel=\"noopener\">https://github.com/lazyhero/vue-spa-demo]</a><br>vue-router文档[<a href=\"http://router.vuejs.org/zh-cn/index.html]\" target=\"_blank\" rel=\"noopener\">http://router.vuejs.org/zh-cn/index.html]</a><br>Vuex（专门为 Vue.js 应用设计的状态管理架构）<br>vuex文档[<a href=\"http://vuex.vuejs.org/zh-cn/intro.html]\" target=\"_blank\" rel=\"noopener\">http://vuex.vuejs.org/zh-cn/intro.html]</a><br>Ajax<br>vue-async-data[<a href=\"https://github.com/vuejs/vue-async-data]\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vue-async-data]</a><br>Vue-cli（快速搭建vue项目）<br>vue-cli[<a href=\"https://github.com/vuejs/vue-cli]\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vue-cli]</a><br>2、其它组件</p>\n<p>UI组件<br>mint-ui：移动端组件[<a href=\"https://github.com/ElemeFE/mint-ui]\" target=\"_blank\" rel=\"noopener\">https://github.com/ElemeFE/mint-ui]</a><br>vux：基于vue与weui的移动端UI组件[<a href=\"https://github.com/airyland/vux]\" target=\"_blank\" rel=\"noopener\">https://github.com/airyland/vux]</a><br>vue-weui[<a href=\"https://github.com/aidenzou/vue-weui]\" target=\"_blank\" rel=\"noopener\">https://github.com/aidenzou/vue-weui]</a><br>Lazyload<br>图片懒加载[<a href=\"https://github.com/hilongjw/vue-lazyload]\" target=\"_blank\" rel=\"noopener\">https://github.com/hilongjw/vue-lazyload]</a><br>Drag<br>vue-drag and drop[<a href=\"https://github.com/james2doyle/vue-drag-and-drop]\" target=\"_blank\" rel=\"noopener\">https://github.com/james2doyle/vue-drag-and-drop]</a><br>Infinite无限加载<br>vue-infinite-load[<a href=\"https://github.com/ElemeFE/vue-infinite-scroll]\" target=\"_blank\" rel=\"noopener\">https://github.com/ElemeFE/vue-infinite-scroll]</a></p>\n<hr>\n<h2 id=\"四、开发工具\"><a href=\"#四、开发工具\" class=\"headerlink\" title=\"四、开发工具\"></a>四、开发工具</h2><p>Vue-devtools[<a href=\"https://github.com/vuejs/vue-devtools]\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vue-devtools]</a></p>\n<hr>\n<h2 id=\"五、优秀项目\"><a href=\"#五、优秀项目\" class=\"headerlink\" title=\"五、优秀项目\"></a>五、优秀项目</h2><p>青城 [<a href=\"https://github.com/zerqu/qingcheng]\" target=\"_blank\" rel=\"noopener\">https://github.com/zerqu/qingcheng]</a><br>vue-blog[<a href=\"https://github.com/V-Tom/vue-blog]\" target=\"_blank\" rel=\"noopener\">https://github.com/V-Tom/vue-blog]</a></p>\n<hr>\n<h2 id=\"六、优秀文章教程\"><a href=\"#六、优秀文章教程\" class=\"headerlink\" title=\"六、优秀文章教程\"></a>六、优秀文章教程</h2><p>Vue.js 快速入门[<a href=\"https://segmentfault.com/a/1190000003968020]\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000003968020]</a><br>基于vue和webpack的chat项目[<a href=\"https://segmentfault.com/a/1190000003630417]\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000003630417]</a><br>Vue + webpack 项目实践【顶】[<a href=\"http://jiongks.name/blog/just-vue/]\" target=\"_blank\" rel=\"noopener\">http://jiongks.name/blog/just-vue/]</a><br>使用node+vue.js实现SPA应用[<a href=\"https://segmentfault.com/a/1190000004372736]\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000004372736]</a></p>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<p>版权声明： 转自 SkyeTang <a href=\"http://blog.csdn.net/skyetang/article/details/51823876\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/skyetang/article/details/51823876</a></p>\n<p>最近为了能快速进入工作状态，找了许多学习vue.js的资料。。唉~坚持就是胜利！！！</p>\n<blockquote>\n<ul>\n<li>一、资源类</li>\n<li>二、社区</li>\n<li>三、组件</li>\n<li>四、开发工具</li>\n<li>五、优秀项目</li>\n<li>六、优秀文章教程</li>\n</ul>\n</blockquote>\n<h2 id=\"一、资源类\"><a href=\"#一、资源类\" class=\"headerlink\" title=\"一、资源类\"></a>一、资源类</h2><p>文档</p>\n<p>vue官方文档[<a href=\"http://cn.vuejs.org/]\" target=\"_blank\" rel=\"noopener\">http://cn.vuejs.org/]</a><br>vue论坛[<a href=\"http://http//forum.vuejs.org/]\" target=\"_blank\" rel=\"noopener\">http://http//forum.vuejs.org/]</a></p>\n<p>视频教程<br>vue1.0入门教程[<a href=\"https://laravist.com/series/vue-js-1-0-in-action-series]\" target=\"_blank\" rel=\"noopener\">https://laravist.com/series/vue-js-1-0-in-action-series]</a><br>台湾小凡视频教程[<a href=\"https://github.com/bhnddowinf/vuejs-learn]\" target=\"_blank\" rel=\"noopener\">https://github.com/bhnddowinf/vuejs-learn]</a></p>\n<hr>\n<h2 id=\"二、社区\"><a href=\"#二、社区\" class=\"headerlink\" title=\"二、社区\"></a>二、社区</h2><p>segmentfault-vue[<a href=\"https://segmentfault.com/t/vue.js]\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/t/vue.js]</a><br>知乎-vue[<a href=\"https://www.zhihu.com/topic/20022242/questions]\" target=\"_blank\" rel=\"noopener\">https://www.zhihu.com/topic/20022242/questions]</a></p>\n<hr>\n<h2 id=\"三、组件\"><a href=\"#三、组件\" class=\"headerlink\" title=\"三、组件\"></a>三、组件</h2><p>1、官方组件</p>\n<p>Loader<br>html-loader-for-webpack[<a href=\"https://github.com/vuejs/vue-html-loader]\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vue-html-loader]</a><br>Router<br>vue-router-demo[<a href=\"https://github.com/lazyhero/vue-spa-demo]\" target=\"_blank\" rel=\"noopener\">https://github.com/lazyhero/vue-spa-demo]</a><br>vue-router文档[<a href=\"http://router.vuejs.org/zh-cn/index.html]\" target=\"_blank\" rel=\"noopener\">http://router.vuejs.org/zh-cn/index.html]</a><br>Vuex（专门为 Vue.js 应用设计的状态管理架构）<br>vuex文档[<a href=\"http://vuex.vuejs.org/zh-cn/intro.html]\" target=\"_blank\" rel=\"noopener\">http://vuex.vuejs.org/zh-cn/intro.html]</a><br>Ajax<br>vue-async-data[<a href=\"https://github.com/vuejs/vue-async-data]\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vue-async-data]</a><br>Vue-cli（快速搭建vue项目）<br>vue-cli[<a href=\"https://github.com/vuejs/vue-cli]\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vue-cli]</a><br>2、其它组件</p>\n<p>UI组件<br>mint-ui：移动端组件[<a href=\"https://github.com/ElemeFE/mint-ui]\" target=\"_blank\" rel=\"noopener\">https://github.com/ElemeFE/mint-ui]</a><br>vux：基于vue与weui的移动端UI组件[<a href=\"https://github.com/airyland/vux]\" target=\"_blank\" rel=\"noopener\">https://github.com/airyland/vux]</a><br>vue-weui[<a href=\"https://github.com/aidenzou/vue-weui]\" target=\"_blank\" rel=\"noopener\">https://github.com/aidenzou/vue-weui]</a><br>Lazyload<br>图片懒加载[<a href=\"https://github.com/hilongjw/vue-lazyload]\" target=\"_blank\" rel=\"noopener\">https://github.com/hilongjw/vue-lazyload]</a><br>Drag<br>vue-drag and drop[<a href=\"https://github.com/james2doyle/vue-drag-and-drop]\" target=\"_blank\" rel=\"noopener\">https://github.com/james2doyle/vue-drag-and-drop]</a><br>Infinite无限加载<br>vue-infinite-load[<a href=\"https://github.com/ElemeFE/vue-infinite-scroll]\" target=\"_blank\" rel=\"noopener\">https://github.com/ElemeFE/vue-infinite-scroll]</a></p>\n<hr>\n<h2 id=\"四、开发工具\"><a href=\"#四、开发工具\" class=\"headerlink\" title=\"四、开发工具\"></a>四、开发工具</h2><p>Vue-devtools[<a href=\"https://github.com/vuejs/vue-devtools]\" target=\"_blank\" rel=\"noopener\">https://github.com/vuejs/vue-devtools]</a></p>\n<hr>\n<h2 id=\"五、优秀项目\"><a href=\"#五、优秀项目\" class=\"headerlink\" title=\"五、优秀项目\"></a>五、优秀项目</h2><p>青城 [<a href=\"https://github.com/zerqu/qingcheng]\" target=\"_blank\" rel=\"noopener\">https://github.com/zerqu/qingcheng]</a><br>vue-blog[<a href=\"https://github.com/V-Tom/vue-blog]\" target=\"_blank\" rel=\"noopener\">https://github.com/V-Tom/vue-blog]</a></p>\n<hr>\n<h2 id=\"六、优秀文章教程\"><a href=\"#六、优秀文章教程\" class=\"headerlink\" title=\"六、优秀文章教程\"></a>六、优秀文章教程</h2><p>Vue.js 快速入门[<a href=\"https://segmentfault.com/a/1190000003968020]\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000003968020]</a><br>基于vue和webpack的chat项目[<a href=\"https://segmentfault.com/a/1190000003630417]\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000003630417]</a><br>Vue + webpack 项目实践【顶】[<a href=\"http://jiongks.name/blog/just-vue/]\" target=\"_blank\" rel=\"noopener\">http://jiongks.name/blog/just-vue/]</a><br>使用node+vue.js实现SPA应用[<a href=\"https://segmentfault.com/a/1190000004372736]\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000004372736]</a></p>\n"},{"title":"webpack的搭建","_content":"\n  大半夜洗了个头，估计一时半会儿还睡不了觉。突然想到以后可能要用到webpack，今天就回顾一下webpack的搭建，方便自己以后用起来顺手些。\n  主要步骤为：\n\n> * 1.引入webpack依赖，全局安装webpack\n> * 2.把运行命令配置到npm的script中(方便运行)\n> * 3.常用加载器介绍(类似gulp插件)\n\n------\n\n>## 一、引入webpack依赖\n\n### **1.1安装全局webpack**\n在一个盘符中创建一个工程，（注意不要放在中文目录，以免不必要的麻烦）然后打开CMD，输入以下命令。\n\n`npm install webpack -g`\n\n### ***1.2创建配置文件***\n在项目工程的根目录创建三个或多个webpack配置文件\n（1）web.base.config.js  //公用的配置放在这里面\n（2）web.develop.config.js  //开发环境中用到的配置文件\n（3）web.publish.config.js   //生产环境中用到的配置文件\n\n\n#### ***1.2.1在develop中配置基本内容***\n```\nvar path = require('path');\n\nmodule.exports = {\n    entry:path.resolve(__dirname,'src/js/app.js'),//文件入口\n    output: {                                     //输出文件配置信息\n        path: path.resolve(__dirname, 'deploy/js'),\n        filename: 'bundle.js',\n    }\n}\n```\n备注：这里说明一下，这里用到的时一种模块化的规范conmmonjs,想一行代码是导入，第三行是导出。\n#### ***1.2.2运行检错***\n 法一：在根目录运行webpack的命令，默认会去查找名称为webpack.config.js的文件执行，如果没有就会报配置信息没有配置的错误。。\n 法二：还可以通过运行下面的命令进行要执行的配置文件的选择\nwebpack –-config  web.develop.config.js\n\n。。。未完待续。。。（好吧，我承认我困得睁不开眼了，，睡觉去~）\n\n>## 二、把运行命令配置到npm的script中\n\n这里要说明一下，因为webpack的命令会很长，所以需要配置一下，方便运行。\n#### ***2.1简单配置***\n具体操作是：\n        1. npm init --------------->会导出pakage.json\n        2.这里需要安装webpack的局部变量：npm install webpack --save\n        3.在pakeg.json中找到scripts，然后写:\n`'develop' : 'webpack –-config web.develop.config.js'`\n        4.测试运行：npm run develop\n#### ***2.2为发布目录启动服务***\n在这里我摘抄一段，便于理解：\n> 如果需要一直输入 npm run develop 确实是一件非常无聊的事情，幸运的是，我们可以把让他安静的运行，让我们设置 webpack-dev-server\n除了提供模块打包功能，Webpack还提供了一个基于Node.js Express框架的开发服务器，它是一个静态资源Web服务器，对于简单静态页面或者仅依赖于独立服务的前端页面，都可以直接使用这个开发服务器进行开 发。在开发过程中，开发服务器会监听每一个文件的变化，进行实时打包，并且可以推送通知前端页面代码发生了变化，从而可以实现页面的自动刷新。\n\n1.安装webpack-dev-server   `npm install webpack-dev-server --save`\n2.调整npm的package.json scripts 部分中开发命令的配置\n```\n \"scripts\": {\n \"develop\": \"webpack-dev-server  --config web.develop.config.js --devtool eval --progress --colors --hot --content-base src\"\n }\n\n```\n备注：webpack-dev-server - 在 localhost:8080 建立一个 Web 服务器。\n当你运行 npm run develop的时候，会启动一个Web服务器，然后监听文件修改，然后自动重新合并你的代码。真的非常简洁！\n#### ***2.3 浏览器自动刷新***\n在develop中的的入口文件前添加这两句：\n`'webpack/hot/dev-server'` `'webpack-dev-server/client?http://localhost:8080',`\n如：\n```\nmodule.exports = {\n    entry:[\n        'webpack/hot/dev-server',\n        'webpack-dev-server/client?http://localhost:8080',\n        path.resolve(__dirname,'src/js/app.js')\n    ]\n```\n>##三、常用加载器介绍(类似gulp插件)--->摘抄\n\nLoader：这是webpack准备的一些预处理工具\n**3.1 编译jsx和ES6到原生js（将es6转化成浏览器能识别的解析的es5）**\n3.1.1首先安装下面的所有依赖\nnpm install babel-loader --save-dev\nnpm install babel-core babel-preset-es2015 babel-preset-react --save-dev\n3.1.2修改开发配置文件\n```\nmodule: {\n    loaders: [\n        {\n            test: /\\.jsx?$/, // 用正则来匹配文件路径，这段意思是匹配 js 或者 jsx\n            loader: 'babel',// 加载模块 \"babel\" 是 \"babel-loader\" 的缩写\n            query: {\n                presets: ['es2015', 'react']\n            }\n        }\n    ]\n}\n\n```\n3.1.2使用\n直接从新运行npm run develop即可\n**3.2加载css**\nWebpack允许像加载任何代码一样加载 CSS。你可以选择你所需要的方式，但是你可以为每个组件把所有你的 CSS 加载到入口主文件中来做任何事情。\n加载 CSS 需要 css-loader 和 style-loader，他们做两件不同的事情，css-loader会遍历 CSS 文件，然后找到 url() 表达式然后处理他们，style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中。\n3.2.1首先下载依赖\nnpm install css-loader style-loader --save-dev\n3.2.2修改配置文件\n{\n \ttest: /\\.css$/, // Only .css files\n\tloader: 'style!css' // Run both loaders\n}\n！用来定义loader的串联关系，\"-loader\"是可以省略不写的，多个loader之间用“!”连接起来\n3.2.3 Css加载策略\n在你的主入口文件中，比如 src/app.js 你可以为整个项目加载所有的 CSS\n\tImport  './project-styles.css';\nCSS 就完全包含在合并的应用中，再也不需要重新下载。\n懒加载（推荐）\n如果你想发挥应用中多重入口文件的优势，你可以在每个入口点包含各自的 CSS。\n你把你的模块用文件夹分离，每个文件夹有各自的 CSS 和 JavaScript 文件。再次，当应用发布的时候，导入的 CSS 已经加载到每个入口文件中。\n \n定制组件css\n你可以根据这个策略为每个组件创建 CSS 文件，可以让组件名和 CSS 中的 class 使用一个命名空间，来避免一个组件中的一些 class 干扰到另外一些组件的 class。\n \n\t使用内联样式取代 CSS 文件\n在 “React Native” 中你不再需要使用任何 CSS 文件，你只需要使用 style 属性，可以把你的 CSS 定义成一个对象，那样就可以根据你的项目重新来考略你的 CSS 策略。\n注意：这点的样式都没有-\n \n**3.3加载sass**\n3.3.1下载依赖\nnpm install sass-loader  --save-dev\n3.3.2修改配置文件\n\n\n    {\n     test: /\\.scss$/,\n     loader: 'style!css!sass'\n    }\n\n \n**3.4图片处理**\n直到 HTTP/2 你才能在应用加载的时候避免设置太多 HTTP 请求。根据浏览器不同你必须设置你的并行请求数，如果你在你的 CSS 中加载了太多图片的话，可以自动把这些图片转成 BASE64 字符串然后内联到 CSS 里来降低必要的请求数，这个方法取决与你的图片大小。你需要为你的应用平衡下载的大小和下载的数量，不过 Webpack 可以让这个平衡十分轻松适应。\n3.4.1下载依赖\nnpm install url-loader --save-dev\n3.4.2修改配置文件\n```\n{\n      test: /\\.(png|jpg)$/,\n      loader: 'url?limit=25000&name=images/[name].[ext]'\n }\n```\n加载器，它会把需要转换的路径变成 BASE64 字符串，在其他的 Webpack 书中提到的这方面会把你 CSS 中的 “url()” 像其他 require 或者 import 来处理。意味着如果我们可以通过它来处理我们的图片文件。\nurl-loader 传入的 limit 参数是告诉它图片如果不大于 25KB 的话要自动在它从属的 css 文件中转成 BASE64 字符串。\n3.4.3大图片处理\n在代码中是一下情况：\n```\ndiv.img{\n    background: url(../image/xxx.jpg)\n}\n\n//或者\nvar img = document.createElement(\"img\");\nimg.src = require(\"../image/xxx.jpg\");\ndocument.body.appendChild(img);\n```\n你可以这样配置\n```\nmodule: {\n    {\n      test: /\\.(png|jpg)$/,\n      loader: 'url-loader?limit=10000&name=build/[name].[ext]'\n    }]\n}\n```\n针对上面的两种使用方式，loader可以自动识别并处理。根据loader中的设置，webpack会将小于指点大小的文件转化成 base64 格式的 dataUrl，其他图片会做适当的压缩并存放在指定目录中。\n\n\n**3.5文件处理**\n3.5.1说明\n现在webpack处理css中的图片还是可以的，但是处理html中的图片能力有限，所以有图片的地方最好放在css中，或者使用require的方式\n \n3.5.2下载依赖\nnpm install file-loader –save-dev\n3.5.2修改配置文件\n```\n{\n    test: /\\.(png|jpeg|gif|jpg)$/,\n    loader: 'file-loader?name=images/[name].[ext]'\n}\n```\n注意：这点由于一直加载不上图片，所以我把输出的配置改为了\n```\noutput: {\n    path: path.resolve(__dirname, 'deploy'),\n    filename: 'bundle.js',\n},\n```\n我把下面的loader注释了，影响图片的加载\n```\n    {\n        test: /\\.(png|jpg)$/,\n        loader: 'url?limit=25000'\n    }\n    \n```\n**3.6内联fonts**\n字体实在是非常难引入正确，首先，通常我们有 4 种不一样的格式，但是只有其中一种会被对应的浏览器使用到。你肯定不会想引入全部四种格式，这样只会让 CSS 文件更加膨胀，然后又没办法优化。\n取决与你的项目，你可能可以选择出一种字体格式，如果你不考略 Opera Mini，所有的浏览器都支持 .woff 和 .svg 格式。问题是不同格式下在各种浏览器下字体看起来会有一点点不同。所以测试 .woff 和 .svg，然后找出能够在所有浏览器中看起来最好的那个。\n{\n      test: /\\.woff$/,\n      loader: 'url?limit=100000'\n}\n\n\n>## 四、常用插件介绍\n\nwebpack提供了[丰富的组件]用来满足不同的需求，当然我们也可以自行实现一个组件来满足自己的需求：\nplugins: [\n     //your plugins list\n ]\n详细的请看这里：\nhttp://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin\n注释：Word中出现的所有的包，都可以通过npm进行包查找，然后查看具体的使用方法。\n**4.1压缩插件**\n这个插件是自带的\n \n**4.2提取css插件**\n在webpack中编写js文件时，可以通过require的方式引入其他的静态资源，可通过loader对文件自动解析并打包文件。通常会将js 文件打包合并，css文件会在页面的header中嵌入style的方式载入页面。但开发过程中我们并不想将样式打在脚本中，最好可以独立生成css文件，以外链的形式加载。这时extract-text-webpack-plugin插件可以帮我们达到想要的效果。需要使用npm的方式加载插件，然后 参见下面的配置，就可以将js中的css文件提取，并以指定的文件名来进行加载。\nnpm install extract-text-webpack-plugin --save-dev\n我发现这个有一个问题，就是他只能把css抽出来，但是sass的样式不能分离出来。\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n分离css\nloader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\") \n分离scss\nloader: ExtractTextPlugin.extract('style', \"css!sass\")\nnew ExtractTextPlugin(\"app.css\")\n\n**4.3合并配置文件插件**\nwebpack-config\nhttps://github.com/mdreizin/webpack-config\n**4.4创建index.Html页面插件**\nhtml-webpack-plugin\nnpm install html-webpack-plugin --save-dev\n\n//引用模块\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n// 配置生成index.html\nnew HtmlWebpackPlugin({\n            title: 'Custom template using Handlebars',\n            template: './src/index.html'\n        })\n**4.5自动打开浏览器插件**\nopen-browser-webpack-plugin\nnpm install --save-dev open-browser-webpack-plugin\n\n\n\n//引用模块\nvar OpenBrowserPlugin = require('open-browser-webpack-plugin');\n//配置打开浏览器\nnew OpenBrowserPlugin()\n\n\n","source":"_posts/webpack.md","raw":"---\ntitle: webpack的搭建\n---\n\n  大半夜洗了个头，估计一时半会儿还睡不了觉。突然想到以后可能要用到webpack，今天就回顾一下webpack的搭建，方便自己以后用起来顺手些。\n  主要步骤为：\n\n> * 1.引入webpack依赖，全局安装webpack\n> * 2.把运行命令配置到npm的script中(方便运行)\n> * 3.常用加载器介绍(类似gulp插件)\n\n------\n\n>## 一、引入webpack依赖\n\n### **1.1安装全局webpack**\n在一个盘符中创建一个工程，（注意不要放在中文目录，以免不必要的麻烦）然后打开CMD，输入以下命令。\n\n`npm install webpack -g`\n\n### ***1.2创建配置文件***\n在项目工程的根目录创建三个或多个webpack配置文件\n（1）web.base.config.js  //公用的配置放在这里面\n（2）web.develop.config.js  //开发环境中用到的配置文件\n（3）web.publish.config.js   //生产环境中用到的配置文件\n\n\n#### ***1.2.1在develop中配置基本内容***\n```\nvar path = require('path');\n\nmodule.exports = {\n    entry:path.resolve(__dirname,'src/js/app.js'),//文件入口\n    output: {                                     //输出文件配置信息\n        path: path.resolve(__dirname, 'deploy/js'),\n        filename: 'bundle.js',\n    }\n}\n```\n备注：这里说明一下，这里用到的时一种模块化的规范conmmonjs,想一行代码是导入，第三行是导出。\n#### ***1.2.2运行检错***\n 法一：在根目录运行webpack的命令，默认会去查找名称为webpack.config.js的文件执行，如果没有就会报配置信息没有配置的错误。。\n 法二：还可以通过运行下面的命令进行要执行的配置文件的选择\nwebpack –-config  web.develop.config.js\n\n。。。未完待续。。。（好吧，我承认我困得睁不开眼了，，睡觉去~）\n\n>## 二、把运行命令配置到npm的script中\n\n这里要说明一下，因为webpack的命令会很长，所以需要配置一下，方便运行。\n#### ***2.1简单配置***\n具体操作是：\n        1. npm init --------------->会导出pakage.json\n        2.这里需要安装webpack的局部变量：npm install webpack --save\n        3.在pakeg.json中找到scripts，然后写:\n`'develop' : 'webpack –-config web.develop.config.js'`\n        4.测试运行：npm run develop\n#### ***2.2为发布目录启动服务***\n在这里我摘抄一段，便于理解：\n> 如果需要一直输入 npm run develop 确实是一件非常无聊的事情，幸运的是，我们可以把让他安静的运行，让我们设置 webpack-dev-server\n除了提供模块打包功能，Webpack还提供了一个基于Node.js Express框架的开发服务器，它是一个静态资源Web服务器，对于简单静态页面或者仅依赖于独立服务的前端页面，都可以直接使用这个开发服务器进行开 发。在开发过程中，开发服务器会监听每一个文件的变化，进行实时打包，并且可以推送通知前端页面代码发生了变化，从而可以实现页面的自动刷新。\n\n1.安装webpack-dev-server   `npm install webpack-dev-server --save`\n2.调整npm的package.json scripts 部分中开发命令的配置\n```\n \"scripts\": {\n \"develop\": \"webpack-dev-server  --config web.develop.config.js --devtool eval --progress --colors --hot --content-base src\"\n }\n\n```\n备注：webpack-dev-server - 在 localhost:8080 建立一个 Web 服务器。\n当你运行 npm run develop的时候，会启动一个Web服务器，然后监听文件修改，然后自动重新合并你的代码。真的非常简洁！\n#### ***2.3 浏览器自动刷新***\n在develop中的的入口文件前添加这两句：\n`'webpack/hot/dev-server'` `'webpack-dev-server/client?http://localhost:8080',`\n如：\n```\nmodule.exports = {\n    entry:[\n        'webpack/hot/dev-server',\n        'webpack-dev-server/client?http://localhost:8080',\n        path.resolve(__dirname,'src/js/app.js')\n    ]\n```\n>##三、常用加载器介绍(类似gulp插件)--->摘抄\n\nLoader：这是webpack准备的一些预处理工具\n**3.1 编译jsx和ES6到原生js（将es6转化成浏览器能识别的解析的es5）**\n3.1.1首先安装下面的所有依赖\nnpm install babel-loader --save-dev\nnpm install babel-core babel-preset-es2015 babel-preset-react --save-dev\n3.1.2修改开发配置文件\n```\nmodule: {\n    loaders: [\n        {\n            test: /\\.jsx?$/, // 用正则来匹配文件路径，这段意思是匹配 js 或者 jsx\n            loader: 'babel',// 加载模块 \"babel\" 是 \"babel-loader\" 的缩写\n            query: {\n                presets: ['es2015', 'react']\n            }\n        }\n    ]\n}\n\n```\n3.1.2使用\n直接从新运行npm run develop即可\n**3.2加载css**\nWebpack允许像加载任何代码一样加载 CSS。你可以选择你所需要的方式，但是你可以为每个组件把所有你的 CSS 加载到入口主文件中来做任何事情。\n加载 CSS 需要 css-loader 和 style-loader，他们做两件不同的事情，css-loader会遍历 CSS 文件，然后找到 url() 表达式然后处理他们，style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中。\n3.2.1首先下载依赖\nnpm install css-loader style-loader --save-dev\n3.2.2修改配置文件\n{\n \ttest: /\\.css$/, // Only .css files\n\tloader: 'style!css' // Run both loaders\n}\n！用来定义loader的串联关系，\"-loader\"是可以省略不写的，多个loader之间用“!”连接起来\n3.2.3 Css加载策略\n在你的主入口文件中，比如 src/app.js 你可以为整个项目加载所有的 CSS\n\tImport  './project-styles.css';\nCSS 就完全包含在合并的应用中，再也不需要重新下载。\n懒加载（推荐）\n如果你想发挥应用中多重入口文件的优势，你可以在每个入口点包含各自的 CSS。\n你把你的模块用文件夹分离，每个文件夹有各自的 CSS 和 JavaScript 文件。再次，当应用发布的时候，导入的 CSS 已经加载到每个入口文件中。\n \n定制组件css\n你可以根据这个策略为每个组件创建 CSS 文件，可以让组件名和 CSS 中的 class 使用一个命名空间，来避免一个组件中的一些 class 干扰到另外一些组件的 class。\n \n\t使用内联样式取代 CSS 文件\n在 “React Native” 中你不再需要使用任何 CSS 文件，你只需要使用 style 属性，可以把你的 CSS 定义成一个对象，那样就可以根据你的项目重新来考略你的 CSS 策略。\n注意：这点的样式都没有-\n \n**3.3加载sass**\n3.3.1下载依赖\nnpm install sass-loader  --save-dev\n3.3.2修改配置文件\n\n\n    {\n     test: /\\.scss$/,\n     loader: 'style!css!sass'\n    }\n\n \n**3.4图片处理**\n直到 HTTP/2 你才能在应用加载的时候避免设置太多 HTTP 请求。根据浏览器不同你必须设置你的并行请求数，如果你在你的 CSS 中加载了太多图片的话，可以自动把这些图片转成 BASE64 字符串然后内联到 CSS 里来降低必要的请求数，这个方法取决与你的图片大小。你需要为你的应用平衡下载的大小和下载的数量，不过 Webpack 可以让这个平衡十分轻松适应。\n3.4.1下载依赖\nnpm install url-loader --save-dev\n3.4.2修改配置文件\n```\n{\n      test: /\\.(png|jpg)$/,\n      loader: 'url?limit=25000&name=images/[name].[ext]'\n }\n```\n加载器，它会把需要转换的路径变成 BASE64 字符串，在其他的 Webpack 书中提到的这方面会把你 CSS 中的 “url()” 像其他 require 或者 import 来处理。意味着如果我们可以通过它来处理我们的图片文件。\nurl-loader 传入的 limit 参数是告诉它图片如果不大于 25KB 的话要自动在它从属的 css 文件中转成 BASE64 字符串。\n3.4.3大图片处理\n在代码中是一下情况：\n```\ndiv.img{\n    background: url(../image/xxx.jpg)\n}\n\n//或者\nvar img = document.createElement(\"img\");\nimg.src = require(\"../image/xxx.jpg\");\ndocument.body.appendChild(img);\n```\n你可以这样配置\n```\nmodule: {\n    {\n      test: /\\.(png|jpg)$/,\n      loader: 'url-loader?limit=10000&name=build/[name].[ext]'\n    }]\n}\n```\n针对上面的两种使用方式，loader可以自动识别并处理。根据loader中的设置，webpack会将小于指点大小的文件转化成 base64 格式的 dataUrl，其他图片会做适当的压缩并存放在指定目录中。\n\n\n**3.5文件处理**\n3.5.1说明\n现在webpack处理css中的图片还是可以的，但是处理html中的图片能力有限，所以有图片的地方最好放在css中，或者使用require的方式\n \n3.5.2下载依赖\nnpm install file-loader –save-dev\n3.5.2修改配置文件\n```\n{\n    test: /\\.(png|jpeg|gif|jpg)$/,\n    loader: 'file-loader?name=images/[name].[ext]'\n}\n```\n注意：这点由于一直加载不上图片，所以我把输出的配置改为了\n```\noutput: {\n    path: path.resolve(__dirname, 'deploy'),\n    filename: 'bundle.js',\n},\n```\n我把下面的loader注释了，影响图片的加载\n```\n    {\n        test: /\\.(png|jpg)$/,\n        loader: 'url?limit=25000'\n    }\n    \n```\n**3.6内联fonts**\n字体实在是非常难引入正确，首先，通常我们有 4 种不一样的格式，但是只有其中一种会被对应的浏览器使用到。你肯定不会想引入全部四种格式，这样只会让 CSS 文件更加膨胀，然后又没办法优化。\n取决与你的项目，你可能可以选择出一种字体格式，如果你不考略 Opera Mini，所有的浏览器都支持 .woff 和 .svg 格式。问题是不同格式下在各种浏览器下字体看起来会有一点点不同。所以测试 .woff 和 .svg，然后找出能够在所有浏览器中看起来最好的那个。\n{\n      test: /\\.woff$/,\n      loader: 'url?limit=100000'\n}\n\n\n>## 四、常用插件介绍\n\nwebpack提供了[丰富的组件]用来满足不同的需求，当然我们也可以自行实现一个组件来满足自己的需求：\nplugins: [\n     //your plugins list\n ]\n详细的请看这里：\nhttp://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin\n注释：Word中出现的所有的包，都可以通过npm进行包查找，然后查看具体的使用方法。\n**4.1压缩插件**\n这个插件是自带的\n \n**4.2提取css插件**\n在webpack中编写js文件时，可以通过require的方式引入其他的静态资源，可通过loader对文件自动解析并打包文件。通常会将js 文件打包合并，css文件会在页面的header中嵌入style的方式载入页面。但开发过程中我们并不想将样式打在脚本中，最好可以独立生成css文件，以外链的形式加载。这时extract-text-webpack-plugin插件可以帮我们达到想要的效果。需要使用npm的方式加载插件，然后 参见下面的配置，就可以将js中的css文件提取，并以指定的文件名来进行加载。\nnpm install extract-text-webpack-plugin --save-dev\n我发现这个有一个问题，就是他只能把css抽出来，但是sass的样式不能分离出来。\nvar ExtractTextPlugin = require(\"extract-text-webpack-plugin\");\n分离css\nloader: ExtractTextPlugin.extract(\"style-loader\", \"css-loader\") \n分离scss\nloader: ExtractTextPlugin.extract('style', \"css!sass\")\nnew ExtractTextPlugin(\"app.css\")\n\n**4.3合并配置文件插件**\nwebpack-config\nhttps://github.com/mdreizin/webpack-config\n**4.4创建index.Html页面插件**\nhtml-webpack-plugin\nnpm install html-webpack-plugin --save-dev\n\n//引用模块\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\n// 配置生成index.html\nnew HtmlWebpackPlugin({\n            title: 'Custom template using Handlebars',\n            template: './src/index.html'\n        })\n**4.5自动打开浏览器插件**\nopen-browser-webpack-plugin\nnpm install --save-dev open-browser-webpack-plugin\n\n\n\n//引用模块\nvar OpenBrowserPlugin = require('open-browser-webpack-plugin');\n//配置打开浏览器\nnew OpenBrowserPlugin()\n\n\n","slug":"webpack","published":1,"date":"2016-11-16T09:38:41.000Z","updated":"2016-11-16T10:06:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghao8j8000aw0ua8v0z4q8r","content":"<p>  大半夜洗了个头，估计一时半会儿还睡不了觉。突然想到以后可能要用到webpack，今天就回顾一下webpack的搭建，方便自己以后用起来顺手些。<br>  主要步骤为：</p>\n<blockquote>\n<ul>\n<li>1.引入webpack依赖，全局安装webpack</li>\n<li>2.把运行命令配置到npm的script中(方便运行)</li>\n<li>3.常用加载器介绍(类似gulp插件)</li>\n</ul>\n</blockquote>\n<hr>\n<blockquote>\n<h2 id=\"一、引入webpack依赖\"><a href=\"#一、引入webpack依赖\" class=\"headerlink\" title=\"一、引入webpack依赖\"></a>一、引入webpack依赖</h2></blockquote>\n<h3 id=\"1-1安装全局webpack\"><a href=\"#1-1安装全局webpack\" class=\"headerlink\" title=\"1.1安装全局webpack\"></a><strong>1.1安装全局webpack</strong></h3><p>在一个盘符中创建一个工程，（注意不要放在中文目录，以免不必要的麻烦）然后打开CMD，输入以下命令。</p>\n<p><code>npm install webpack -g</code></p>\n<h3 id=\"1-2创建配置文件\"><a href=\"#1-2创建配置文件\" class=\"headerlink\" title=\"1.2创建配置文件\"></a><strong><em>1.2创建配置文件</em></strong></h3><p>在项目工程的根目录创建三个或多个webpack配置文件<br>（1）web.base.config.js  //公用的配置放在这里面<br>（2）web.develop.config.js  //开发环境中用到的配置文件<br>（3）web.publish.config.js   //生产环境中用到的配置文件</p>\n<h4 id=\"1-2-1在develop中配置基本内容\"><a href=\"#1-2-1在develop中配置基本内容\" class=\"headerlink\" title=\"1.2.1在develop中配置基本内容\"></a><strong><em>1.2.1在develop中配置基本内容</em></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var path = require(&apos;path&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry:path.resolve(__dirname,&apos;src/js/app.js&apos;),//文件入口</span><br><span class=\"line\">    output: &#123;                                     //输出文件配置信息</span><br><span class=\"line\">        path: path.resolve(__dirname, &apos;deploy/js&apos;),</span><br><span class=\"line\">        filename: &apos;bundle.js&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>备注：这里说明一下，这里用到的时一种模块化的规范conmmonjs,想一行代码是导入，第三行是导出。</p>\n<h4 id=\"1-2-2运行检错\"><a href=\"#1-2-2运行检错\" class=\"headerlink\" title=\"1.2.2运行检错\"></a><strong><em>1.2.2运行检错</em></strong></h4><p> 法一：在根目录运行webpack的命令，默认会去查找名称为webpack.config.js的文件执行，如果没有就会报配置信息没有配置的错误。。<br> 法二：还可以通过运行下面的命令进行要执行的配置文件的选择<br>webpack –-config  web.develop.config.js</p>\n<p>。。。未完待续。。。（好吧，我承认我困得睁不开眼了，，睡觉去~）</p>\n<blockquote>\n<h2 id=\"二、把运行命令配置到npm的script中\"><a href=\"#二、把运行命令配置到npm的script中\" class=\"headerlink\" title=\"二、把运行命令配置到npm的script中\"></a>二、把运行命令配置到npm的script中</h2></blockquote>\n<p>这里要说明一下，因为webpack的命令会很长，所以需要配置一下，方便运行。</p>\n<h4 id=\"2-1简单配置\"><a href=\"#2-1简单配置\" class=\"headerlink\" title=\"2.1简单配置\"></a><strong><em>2.1简单配置</em></strong></h4><p>具体操作是：</p>\n<pre><code>1. npm init ---------------&gt;会导出pakage.json\n2.这里需要安装webpack的局部变量：npm install webpack --save\n3.在pakeg.json中找到scripts，然后写:\n</code></pre><p><code>&#39;develop&#39; : &#39;webpack –-config web.develop.config.js&#39;</code><br>        4.测试运行：npm run develop</p>\n<h4 id=\"2-2为发布目录启动服务\"><a href=\"#2-2为发布目录启动服务\" class=\"headerlink\" title=\"2.2为发布目录启动服务\"></a><strong><em>2.2为发布目录启动服务</em></strong></h4><p>在这里我摘抄一段，便于理解：</p>\n<blockquote>\n<p>如果需要一直输入 npm run develop 确实是一件非常无聊的事情，幸运的是，我们可以把让他安静的运行，让我们设置 webpack-dev-server<br>除了提供模块打包功能，Webpack还提供了一个基于Node.js Express框架的开发服务器，它是一个静态资源Web服务器，对于简单静态页面或者仅依赖于独立服务的前端页面，都可以直接使用这个开发服务器进行开 发。在开发过程中，开发服务器会监听每一个文件的变化，进行实时打包，并且可以推送通知前端页面代码发生了变化，从而可以实现页面的自动刷新。</p>\n</blockquote>\n<p>1.安装webpack-dev-server   <code>npm install webpack-dev-server --save</code><br>2.调整npm的package.json scripts 部分中开发命令的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">&quot;develop&quot;: &quot;webpack-dev-server  --config web.develop.config.js --devtool eval --progress --colors --hot --content-base src&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>备注：webpack-dev-server - 在 localhost:8080 建立一个 Web 服务器。<br>当你运行 npm run develop的时候，会启动一个Web服务器，然后监听文件修改，然后自动重新合并你的代码。真的非常简洁！</p>\n<h4 id=\"2-3-浏览器自动刷新\"><a href=\"#2-3-浏览器自动刷新\" class=\"headerlink\" title=\"2.3 浏览器自动刷新\"></a><strong><em>2.3 浏览器自动刷新</em></strong></h4><p>在develop中的的入口文件前添加这两句：<br><code>&#39;webpack/hot/dev-server&#39;</code> <code>&#39;webpack-dev-server/client?http://localhost:8080&#39;,</code><br>如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry:[</span><br><span class=\"line\">        &apos;webpack/hot/dev-server&apos;,</span><br><span class=\"line\">        &apos;webpack-dev-server/client?http://localhost:8080&apos;,</span><br><span class=\"line\">        path.resolve(__dirname,&apos;src/js/app.js&apos;)</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>##三、常用加载器介绍(类似gulp插件)—&gt;摘抄</p>\n</blockquote>\n<p>Loader：这是webpack准备的一些预处理工具<br><strong>3.1 编译jsx和ES6到原生js（将es6转化成浏览器能识别的解析的es5）</strong><br>3.1.1首先安装下面的所有依赖<br>npm install babel-loader –save-dev<br>npm install babel-core babel-preset-es2015 babel-preset-react –save-dev<br>3.1.2修改开发配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            test: /\\.jsx?$/, // 用正则来匹配文件路径，这段意思是匹配 js 或者 jsx</span><br><span class=\"line\">            loader: &apos;babel&apos;,// 加载模块 &quot;babel&quot; 是 &quot;babel-loader&quot; 的缩写</span><br><span class=\"line\">            query: &#123;</span><br><span class=\"line\">                presets: [&apos;es2015&apos;, &apos;react&apos;]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.1.2使用<br>直接从新运行npm run develop即可<br><strong>3.2加载css</strong><br>Webpack允许像加载任何代码一样加载 CSS。你可以选择你所需要的方式，但是你可以为每个组件把所有你的 CSS 加载到入口主文件中来做任何事情。<br>加载 CSS 需要 css-loader 和 style-loader，他们做两件不同的事情，css-loader会遍历 CSS 文件，然后找到 url() 表达式然后处理他们，style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中。<br>3.2.1首先下载依赖<br>npm install css-loader style-loader –save-dev<br>3.2.2修改配置文件<br>{<br>     test: /.css$/, // Only .css files<br>    loader: ‘style!css’ // Run both loaders<br>}<br>！用来定义loader的串联关系，”-loader”是可以省略不写的，多个loader之间用“!”连接起来<br>3.2.3 Css加载策略<br>在你的主入口文件中，比如 src/app.js 你可以为整个项目加载所有的 CSS<br>    Import  ‘./project-styles.css’;<br>CSS 就完全包含在合并的应用中，再也不需要重新下载。<br>懒加载（推荐）<br>如果你想发挥应用中多重入口文件的优势，你可以在每个入口点包含各自的 CSS。<br>你把你的模块用文件夹分离，每个文件夹有各自的 CSS 和 JavaScript 文件。再次，当应用发布的时候，导入的 CSS 已经加载到每个入口文件中。</p>\n<p>定制组件css<br>你可以根据这个策略为每个组件创建 CSS 文件，可以让组件名和 CSS 中的 class 使用一个命名空间，来避免一个组件中的一些 class 干扰到另外一些组件的 class。</p>\n<pre><code>使用内联样式取代 CSS 文件\n</code></pre><p>在 “React Native” 中你不再需要使用任何 CSS 文件，你只需要使用 style 属性，可以把你的 CSS 定义成一个对象，那样就可以根据你的项目重新来考略你的 CSS 策略。<br>注意：这点的样式都没有-</p>\n<p><strong>3.3加载sass</strong><br>3.3.1下载依赖<br>npm install sass-loader  –save-dev<br>3.3.2修改配置文件</p>\n<pre><code>{\n test: /\\.scss$/,\n loader: &apos;style!css!sass&apos;\n}\n</code></pre><p><strong>3.4图片处理</strong><br>直到 HTTP/2 你才能在应用加载的时候避免设置太多 HTTP 请求。根据浏览器不同你必须设置你的并行请求数，如果你在你的 CSS 中加载了太多图片的话，可以自动把这些图片转成 BASE64 字符串然后内联到 CSS 里来降低必要的请求数，这个方法取决与你的图片大小。你需要为你的应用平衡下载的大小和下载的数量，不过 Webpack 可以让这个平衡十分轻松适应。<br>3.4.1下载依赖<br>npm install url-loader –save-dev<br>3.4.2修改配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      test: /\\.(png|jpg)$/,</span><br><span class=\"line\">      loader: &apos;url?limit=25000&amp;name=images/[name].[ext]&apos;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>加载器，它会把需要转换的路径变成 BASE64 字符串，在其他的 Webpack 书中提到的这方面会把你 CSS 中的 “url()” 像其他 require 或者 import 来处理。意味着如果我们可以通过它来处理我们的图片文件。<br>url-loader 传入的 limit 参数是告诉它图片如果不大于 25KB 的话要自动在它从属的 css 文件中转成 BASE64 字符串。<br>3.4.3大图片处理<br>在代码中是一下情况：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.img&#123;</span><br><span class=\"line\">    background: url(../image/xxx.jpg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//或者</span><br><span class=\"line\">var img = document.createElement(&quot;img&quot;);</span><br><span class=\"line\">img.src = require(&quot;../image/xxx.jpg&quot;);</span><br><span class=\"line\">document.body.appendChild(img);</span><br></pre></td></tr></table></figure></p>\n<p>你可以这样配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module: &#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: /\\.(png|jpg)$/,</span><br><span class=\"line\">      loader: &apos;url-loader?limit=10000&amp;name=build/[name].[ext]&apos;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>针对上面的两种使用方式，loader可以自动识别并处理。根据loader中的设置，webpack会将小于指点大小的文件转化成 base64 格式的 dataUrl，其他图片会做适当的压缩并存放在指定目录中。</p>\n<p><strong>3.5文件处理</strong><br>3.5.1说明<br>现在webpack处理css中的图片还是可以的，但是处理html中的图片能力有限，所以有图片的地方最好放在css中，或者使用require的方式</p>\n<p>3.5.2下载依赖<br>npm install file-loader –save-dev<br>3.5.2修改配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: /\\.(png|jpeg|gif|jpg)$/,</span><br><span class=\"line\">    loader: &apos;file-loader?name=images/[name].[ext]&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意：这点由于一直加载不上图片，所以我把输出的配置改为了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, &apos;deploy&apos;),</span><br><span class=\"line\">    filename: &apos;bundle.js&apos;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>我把下面的loader注释了，影响图片的加载<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: /\\.(png|jpg)$/,</span><br><span class=\"line\">    loader: &apos;url?limit=25000&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>3.6内联fonts</strong><br>字体实在是非常难引入正确，首先，通常我们有 4 种不一样的格式，但是只有其中一种会被对应的浏览器使用到。你肯定不会想引入全部四种格式，这样只会让 CSS 文件更加膨胀，然后又没办法优化。<br>取决与你的项目，你可能可以选择出一种字体格式，如果你不考略 Opera Mini，所有的浏览器都支持 .woff 和 .svg 格式。问题是不同格式下在各种浏览器下字体看起来会有一点点不同。所以测试 .woff 和 .svg，然后找出能够在所有浏览器中看起来最好的那个。<br>{<br>      test: /.woff$/,<br>      loader: ‘url?limit=100000’<br>}</p>\n<blockquote>\n<h2 id=\"四、常用插件介绍\"><a href=\"#四、常用插件介绍\" class=\"headerlink\" title=\"四、常用插件介绍\"></a>四、常用插件介绍</h2></blockquote>\n<p>webpack提供了[丰富的组件]用来满足不同的需求，当然我们也可以自行实现一个组件来满足自己的需求：<br>plugins: [<br>     //your plugins list<br> ]<br>详细的请看这里：<br><a href=\"http://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin\" target=\"_blank\" rel=\"noopener\">http://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin</a><br>注释：Word中出现的所有的包，都可以通过npm进行包查找，然后查看具体的使用方法。<br><strong>4.1压缩插件</strong><br>这个插件是自带的</p>\n<p><strong>4.2提取css插件</strong><br>在webpack中编写js文件时，可以通过require的方式引入其他的静态资源，可通过loader对文件自动解析并打包文件。通常会将js 文件打包合并，css文件会在页面的header中嵌入style的方式载入页面。但开发过程中我们并不想将样式打在脚本中，最好可以独立生成css文件，以外链的形式加载。这时extract-text-webpack-plugin插件可以帮我们达到想要的效果。需要使用npm的方式加载插件，然后 参见下面的配置，就可以将js中的css文件提取，并以指定的文件名来进行加载。<br>npm install extract-text-webpack-plugin –save-dev<br>我发现这个有一个问题，就是他只能把css抽出来，但是sass的样式不能分离出来。<br>var ExtractTextPlugin = require(“extract-text-webpack-plugin”);<br>分离css<br>loader: ExtractTextPlugin.extract(“style-loader”, “css-loader”)<br>分离scss<br>loader: ExtractTextPlugin.extract(‘style’, “css!sass”)<br>new ExtractTextPlugin(“app.css”)</p>\n<p><strong>4.3合并配置文件插件</strong><br>webpack-config<br><a href=\"https://github.com/mdreizin/webpack-config\" target=\"_blank\" rel=\"noopener\">https://github.com/mdreizin/webpack-config</a><br><strong>4.4创建index.Html页面插件</strong><br>html-webpack-plugin<br>npm install html-webpack-plugin –save-dev</p>\n<p>//引用模块<br>var HtmlWebpackPlugin = require(‘html-webpack-plugin’);<br>// 配置生成index.html<br>new HtmlWebpackPlugin({<br>            title: ‘Custom template using Handlebars’,<br>            template: ‘./src/index.html’<br>        })<br><strong>4.5自动打开浏览器插件</strong><br>open-browser-webpack-plugin<br>npm install –save-dev open-browser-webpack-plugin</p>\n<p>//引用模块<br>var OpenBrowserPlugin = require(‘open-browser-webpack-plugin’);<br>//配置打开浏览器<br>new OpenBrowserPlugin()</p>\n","site":{"data":{}},"excerpt":"","more":"<p>  大半夜洗了个头，估计一时半会儿还睡不了觉。突然想到以后可能要用到webpack，今天就回顾一下webpack的搭建，方便自己以后用起来顺手些。<br>  主要步骤为：</p>\n<blockquote>\n<ul>\n<li>1.引入webpack依赖，全局安装webpack</li>\n<li>2.把运行命令配置到npm的script中(方便运行)</li>\n<li>3.常用加载器介绍(类似gulp插件)</li>\n</ul>\n</blockquote>\n<hr>\n<blockquote>\n<h2 id=\"一、引入webpack依赖\"><a href=\"#一、引入webpack依赖\" class=\"headerlink\" title=\"一、引入webpack依赖\"></a>一、引入webpack依赖</h2></blockquote>\n<h3 id=\"1-1安装全局webpack\"><a href=\"#1-1安装全局webpack\" class=\"headerlink\" title=\"1.1安装全局webpack\"></a><strong>1.1安装全局webpack</strong></h3><p>在一个盘符中创建一个工程，（注意不要放在中文目录，以免不必要的麻烦）然后打开CMD，输入以下命令。</p>\n<p><code>npm install webpack -g</code></p>\n<h3 id=\"1-2创建配置文件\"><a href=\"#1-2创建配置文件\" class=\"headerlink\" title=\"1.2创建配置文件\"></a><strong><em>1.2创建配置文件</em></strong></h3><p>在项目工程的根目录创建三个或多个webpack配置文件<br>（1）web.base.config.js  //公用的配置放在这里面<br>（2）web.develop.config.js  //开发环境中用到的配置文件<br>（3）web.publish.config.js   //生产环境中用到的配置文件</p>\n<h4 id=\"1-2-1在develop中配置基本内容\"><a href=\"#1-2-1在develop中配置基本内容\" class=\"headerlink\" title=\"1.2.1在develop中配置基本内容\"></a><strong><em>1.2.1在develop中配置基本内容</em></strong></h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var path = require(&apos;path&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry:path.resolve(__dirname,&apos;src/js/app.js&apos;),//文件入口</span><br><span class=\"line\">    output: &#123;                                     //输出文件配置信息</span><br><span class=\"line\">        path: path.resolve(__dirname, &apos;deploy/js&apos;),</span><br><span class=\"line\">        filename: &apos;bundle.js&apos;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>备注：这里说明一下，这里用到的时一种模块化的规范conmmonjs,想一行代码是导入，第三行是导出。</p>\n<h4 id=\"1-2-2运行检错\"><a href=\"#1-2-2运行检错\" class=\"headerlink\" title=\"1.2.2运行检错\"></a><strong><em>1.2.2运行检错</em></strong></h4><p> 法一：在根目录运行webpack的命令，默认会去查找名称为webpack.config.js的文件执行，如果没有就会报配置信息没有配置的错误。。<br> 法二：还可以通过运行下面的命令进行要执行的配置文件的选择<br>webpack –-config  web.develop.config.js</p>\n<p>。。。未完待续。。。（好吧，我承认我困得睁不开眼了，，睡觉去~）</p>\n<blockquote>\n<h2 id=\"二、把运行命令配置到npm的script中\"><a href=\"#二、把运行命令配置到npm的script中\" class=\"headerlink\" title=\"二、把运行命令配置到npm的script中\"></a>二、把运行命令配置到npm的script中</h2></blockquote>\n<p>这里要说明一下，因为webpack的命令会很长，所以需要配置一下，方便运行。</p>\n<h4 id=\"2-1简单配置\"><a href=\"#2-1简单配置\" class=\"headerlink\" title=\"2.1简单配置\"></a><strong><em>2.1简单配置</em></strong></h4><p>具体操作是：</p>\n<pre><code>1. npm init ---------------&gt;会导出pakage.json\n2.这里需要安装webpack的局部变量：npm install webpack --save\n3.在pakeg.json中找到scripts，然后写:\n</code></pre><p><code>&#39;develop&#39; : &#39;webpack –-config web.develop.config.js&#39;</code><br>        4.测试运行：npm run develop</p>\n<h4 id=\"2-2为发布目录启动服务\"><a href=\"#2-2为发布目录启动服务\" class=\"headerlink\" title=\"2.2为发布目录启动服务\"></a><strong><em>2.2为发布目录启动服务</em></strong></h4><p>在这里我摘抄一段，便于理解：</p>\n<blockquote>\n<p>如果需要一直输入 npm run develop 确实是一件非常无聊的事情，幸运的是，我们可以把让他安静的运行，让我们设置 webpack-dev-server<br>除了提供模块打包功能，Webpack还提供了一个基于Node.js Express框架的开发服务器，它是一个静态资源Web服务器，对于简单静态页面或者仅依赖于独立服务的前端页面，都可以直接使用这个开发服务器进行开 发。在开发过程中，开发服务器会监听每一个文件的变化，进行实时打包，并且可以推送通知前端页面代码发生了变化，从而可以实现页面的自动刷新。</p>\n</blockquote>\n<p>1.安装webpack-dev-server   <code>npm install webpack-dev-server --save</code><br>2.调整npm的package.json scripts 部分中开发命令的配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">&quot;develop&quot;: &quot;webpack-dev-server  --config web.develop.config.js --devtool eval --progress --colors --hot --content-base src&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>备注：webpack-dev-server - 在 localhost:8080 建立一个 Web 服务器。<br>当你运行 npm run develop的时候，会启动一个Web服务器，然后监听文件修改，然后自动重新合并你的代码。真的非常简洁！</p>\n<h4 id=\"2-3-浏览器自动刷新\"><a href=\"#2-3-浏览器自动刷新\" class=\"headerlink\" title=\"2.3 浏览器自动刷新\"></a><strong><em>2.3 浏览器自动刷新</em></strong></h4><p>在develop中的的入口文件前添加这两句：<br><code>&#39;webpack/hot/dev-server&#39;</code> <code>&#39;webpack-dev-server/client?http://localhost:8080&#39;,</code><br>如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">    entry:[</span><br><span class=\"line\">        &apos;webpack/hot/dev-server&apos;,</span><br><span class=\"line\">        &apos;webpack-dev-server/client?http://localhost:8080&apos;,</span><br><span class=\"line\">        path.resolve(__dirname,&apos;src/js/app.js&apos;)</span><br><span class=\"line\">    ]</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>##三、常用加载器介绍(类似gulp插件)—&gt;摘抄</p>\n</blockquote>\n<p>Loader：这是webpack准备的一些预处理工具<br><strong>3.1 编译jsx和ES6到原生js（将es6转化成浏览器能识别的解析的es5）</strong><br>3.1.1首先安装下面的所有依赖<br>npm install babel-loader –save-dev<br>npm install babel-core babel-preset-es2015 babel-preset-react –save-dev<br>3.1.2修改开发配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module: &#123;</span><br><span class=\"line\">    loaders: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            test: /\\.jsx?$/, // 用正则来匹配文件路径，这段意思是匹配 js 或者 jsx</span><br><span class=\"line\">            loader: &apos;babel&apos;,// 加载模块 &quot;babel&quot; 是 &quot;babel-loader&quot; 的缩写</span><br><span class=\"line\">            query: &#123;</span><br><span class=\"line\">                presets: [&apos;es2015&apos;, &apos;react&apos;]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>3.1.2使用<br>直接从新运行npm run develop即可<br><strong>3.2加载css</strong><br>Webpack允许像加载任何代码一样加载 CSS。你可以选择你所需要的方式，但是你可以为每个组件把所有你的 CSS 加载到入口主文件中来做任何事情。<br>加载 CSS 需要 css-loader 和 style-loader，他们做两件不同的事情，css-loader会遍历 CSS 文件，然后找到 url() 表达式然后处理他们，style-loader 会把原来的 CSS 代码插入页面中的一个 style 标签中。<br>3.2.1首先下载依赖<br>npm install css-loader style-loader –save-dev<br>3.2.2修改配置文件<br>{<br>     test: /.css$/, // Only .css files<br>    loader: ‘style!css’ // Run both loaders<br>}<br>！用来定义loader的串联关系，”-loader”是可以省略不写的，多个loader之间用“!”连接起来<br>3.2.3 Css加载策略<br>在你的主入口文件中，比如 src/app.js 你可以为整个项目加载所有的 CSS<br>    Import  ‘./project-styles.css’;<br>CSS 就完全包含在合并的应用中，再也不需要重新下载。<br>懒加载（推荐）<br>如果你想发挥应用中多重入口文件的优势，你可以在每个入口点包含各自的 CSS。<br>你把你的模块用文件夹分离，每个文件夹有各自的 CSS 和 JavaScript 文件。再次，当应用发布的时候，导入的 CSS 已经加载到每个入口文件中。</p>\n<p>定制组件css<br>你可以根据这个策略为每个组件创建 CSS 文件，可以让组件名和 CSS 中的 class 使用一个命名空间，来避免一个组件中的一些 class 干扰到另外一些组件的 class。</p>\n<pre><code>使用内联样式取代 CSS 文件\n</code></pre><p>在 “React Native” 中你不再需要使用任何 CSS 文件，你只需要使用 style 属性，可以把你的 CSS 定义成一个对象，那样就可以根据你的项目重新来考略你的 CSS 策略。<br>注意：这点的样式都没有-</p>\n<p><strong>3.3加载sass</strong><br>3.3.1下载依赖<br>npm install sass-loader  –save-dev<br>3.3.2修改配置文件</p>\n<pre><code>{\n test: /\\.scss$/,\n loader: &apos;style!css!sass&apos;\n}\n</code></pre><p><strong>3.4图片处理</strong><br>直到 HTTP/2 你才能在应用加载的时候避免设置太多 HTTP 请求。根据浏览器不同你必须设置你的并行请求数，如果你在你的 CSS 中加载了太多图片的话，可以自动把这些图片转成 BASE64 字符串然后内联到 CSS 里来降低必要的请求数，这个方法取决与你的图片大小。你需要为你的应用平衡下载的大小和下载的数量，不过 Webpack 可以让这个平衡十分轻松适应。<br>3.4.1下载依赖<br>npm install url-loader –save-dev<br>3.4.2修改配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">      test: /\\.(png|jpg)$/,</span><br><span class=\"line\">      loader: &apos;url?limit=25000&amp;name=images/[name].[ext]&apos;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>加载器，它会把需要转换的路径变成 BASE64 字符串，在其他的 Webpack 书中提到的这方面会把你 CSS 中的 “url()” 像其他 require 或者 import 来处理。意味着如果我们可以通过它来处理我们的图片文件。<br>url-loader 传入的 limit 参数是告诉它图片如果不大于 25KB 的话要自动在它从属的 css 文件中转成 BASE64 字符串。<br>3.4.3大图片处理<br>在代码中是一下情况：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div.img&#123;</span><br><span class=\"line\">    background: url(../image/xxx.jpg)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//或者</span><br><span class=\"line\">var img = document.createElement(&quot;img&quot;);</span><br><span class=\"line\">img.src = require(&quot;../image/xxx.jpg&quot;);</span><br><span class=\"line\">document.body.appendChild(img);</span><br></pre></td></tr></table></figure></p>\n<p>你可以这样配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module: &#123;</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      test: /\\.(png|jpg)$/,</span><br><span class=\"line\">      loader: &apos;url-loader?limit=10000&amp;name=build/[name].[ext]&apos;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>针对上面的两种使用方式，loader可以自动识别并处理。根据loader中的设置，webpack会将小于指点大小的文件转化成 base64 格式的 dataUrl，其他图片会做适当的压缩并存放在指定目录中。</p>\n<p><strong>3.5文件处理</strong><br>3.5.1说明<br>现在webpack处理css中的图片还是可以的，但是处理html中的图片能力有限，所以有图片的地方最好放在css中，或者使用require的方式</p>\n<p>3.5.2下载依赖<br>npm install file-loader –save-dev<br>3.5.2修改配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: /\\.(png|jpeg|gif|jpg)$/,</span><br><span class=\"line\">    loader: &apos;file-loader?name=images/[name].[ext]&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>注意：这点由于一直加载不上图片，所以我把输出的配置改为了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">    path: path.resolve(__dirname, &apos;deploy&apos;),</span><br><span class=\"line\">    filename: &apos;bundle.js&apos;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure></p>\n<p>我把下面的loader注释了，影响图片的加载<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: /\\.(png|jpg)$/,</span><br><span class=\"line\">    loader: &apos;url?limit=25000&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>3.6内联fonts</strong><br>字体实在是非常难引入正确，首先，通常我们有 4 种不一样的格式，但是只有其中一种会被对应的浏览器使用到。你肯定不会想引入全部四种格式，这样只会让 CSS 文件更加膨胀，然后又没办法优化。<br>取决与你的项目，你可能可以选择出一种字体格式，如果你不考略 Opera Mini，所有的浏览器都支持 .woff 和 .svg 格式。问题是不同格式下在各种浏览器下字体看起来会有一点点不同。所以测试 .woff 和 .svg，然后找出能够在所有浏览器中看起来最好的那个。<br>{<br>      test: /.woff$/,<br>      loader: ‘url?limit=100000’<br>}</p>\n<blockquote>\n<h2 id=\"四、常用插件介绍\"><a href=\"#四、常用插件介绍\" class=\"headerlink\" title=\"四、常用插件介绍\"></a>四、常用插件介绍</h2></blockquote>\n<p>webpack提供了[丰富的组件]用来满足不同的需求，当然我们也可以自行实现一个组件来满足自己的需求：<br>plugins: [<br>     //your plugins list<br> ]<br>详细的请看这里：<br><a href=\"http://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin\" target=\"_blank\" rel=\"noopener\">http://webpack.github.io/docs/list-of-plugins.html#uglifyjsplugin</a><br>注释：Word中出现的所有的包，都可以通过npm进行包查找，然后查看具体的使用方法。<br><strong>4.1压缩插件</strong><br>这个插件是自带的</p>\n<p><strong>4.2提取css插件</strong><br>在webpack中编写js文件时，可以通过require的方式引入其他的静态资源，可通过loader对文件自动解析并打包文件。通常会将js 文件打包合并，css文件会在页面的header中嵌入style的方式载入页面。但开发过程中我们并不想将样式打在脚本中，最好可以独立生成css文件，以外链的形式加载。这时extract-text-webpack-plugin插件可以帮我们达到想要的效果。需要使用npm的方式加载插件，然后 参见下面的配置，就可以将js中的css文件提取，并以指定的文件名来进行加载。<br>npm install extract-text-webpack-plugin –save-dev<br>我发现这个有一个问题，就是他只能把css抽出来，但是sass的样式不能分离出来。<br>var ExtractTextPlugin = require(“extract-text-webpack-plugin”);<br>分离css<br>loader: ExtractTextPlugin.extract(“style-loader”, “css-loader”)<br>分离scss<br>loader: ExtractTextPlugin.extract(‘style’, “css!sass”)<br>new ExtractTextPlugin(“app.css”)</p>\n<p><strong>4.3合并配置文件插件</strong><br>webpack-config<br><a href=\"https://github.com/mdreizin/webpack-config\" target=\"_blank\" rel=\"noopener\">https://github.com/mdreizin/webpack-config</a><br><strong>4.4创建index.Html页面插件</strong><br>html-webpack-plugin<br>npm install html-webpack-plugin –save-dev</p>\n<p>//引用模块<br>var HtmlWebpackPlugin = require(‘html-webpack-plugin’);<br>// 配置生成index.html<br>new HtmlWebpackPlugin({<br>            title: ‘Custom template using Handlebars’,<br>            template: ‘./src/index.html’<br>        })<br><strong>4.5自动打开浏览器插件</strong><br>open-browser-webpack-plugin<br>npm install –save-dev open-browser-webpack-plugin</p>\n<p>//引用模块<br>var OpenBrowserPlugin = require(‘open-browser-webpack-plugin’);<br>//配置打开浏览器<br>new OpenBrowserPlugin()</p>\n"},{"_content":"# translate模拟滚动\n\n------\n\n基于VUE实现的模拟滚动，(适合用于移动的webview)可提高性能\n\n------\n\n\n### 1. 设置可视区域\n```html\n<template>\n  <div class='match-team-style'>\n    <div class='base-data'>\n      <p>ping1和ping3为可是区域，里面的内容可滚动</p>\n      <div class='ping1'>\n        <ul ref='u1' :style='movedist'>\n          <li v-for='n in 100'>{{n}}</li>\n        </ul>\n      </div>\n      <div class='ping2'>\n        <ul>\n          <li v-for='n in 100'>{{n}}</li>\n        </ul>\n      </div>\n      <div class='ping3'>\n        <ul ref='u3' :style='movedist3'>\n          <li v-for='n in 100'>{{n}}</li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n```\n\n```css\n<style lang='less'>\n\t.match-team-style{\n     border:1px solid red;\n     width: 100%;\n     height: 100%;\n     >div{\n      border:1px solid yellow;\n      height: 100%;\n      >div{\n        margin-top: 100px;\n        width:80px;\n        border:1px solid blue;\n        display: inline-block;\n        height: 300px;\n        overflow: hidden;\n        ul{\n          border: 1px solid red;\n        }\n      }\n     }\n\t}\n</style>\n```\n### 2. 通过监听touch事件来动态改变u1和u3的translate\n\n```js\n<script>\nexport default {\n  components: {},\n  data () {\n    return {\n      movedist: '',\n      movedist3: ''\n    }\n  },\n  mounted () {\n    this.$nextTick(() => {\n      this.moveDiv(this.$refs.u1, this.$refs.u3)\n    })\n  },\n  methods: {\n    moveDiv (dom1, dom2) {\n      // 滑动dom1,滑动dom2,dom1和dom2有连锁滑动效果\n      // self.movedist、self.movedist3是dom1和2的style\n      let startY1 = ''\n      let moveY1 = ''\n      let movedis = 0\n      let translates = 0\n      let self = this\n      dom1.addEventListener('touchstart', function (e) {\n        startY1 = e.changedTouches[0].pageY\n      })\n      dom1.addEventListener('touchmove', function (e) {\n        moveY1 = e.changedTouches[0].pageY\n        movedis = translates + moveY1 - startY1\n        if (movedis > 0) {\n          movedis = 0\n        } else if (movedis < -(dom1.offsetHeight - 300)) {\n          movedis = -(dom1.offsetHeight - 300)\n        }\n        self.movedist = `transform: translateY(${movedis}px)`\n        self.movedist3 = `transform: translateY(${movedis}px)`\n      })\n      dom1.addEventListener('touchend', function (e) {\n        translates = movedis\n      })\n      let startY3 = ''\n      let moveY3 = ''\n      dom2.addEventListener('touchstart', function (e) {\n        startY3 = e.changedTouches[0].pageY\n      })\n      dom2.addEventListener('touchmove', function (e) {\n        moveY3 = e.changedTouches[0].pageY\n        movedis = translates + moveY3 - startY3\n        if (movedis > 0) {\n          movedis = 0\n        } else if (movedis < -(dom1.offsetHeight - 300)) {\n          movedis = -(dom1.offsetHeight - 300)\n        }\n        self.movedist = `transform: translateY(${movedis}px)`\n        self.movedist3 = `transform: translateY(${movedis}px)`\n      })\n      dom2.addEventListener('touchend', function (e) {\n        translates = movedis\n      })\n    }\n  }\n}\n</script>\n```\n关键代码就是在监听touchmove里实时计算滑动的距离，来设置u1和u3的滚动距离。\n","source":"_posts/translate.md","raw":"# translate模拟滚动\n\n------\n\n基于VUE实现的模拟滚动，(适合用于移动的webview)可提高性能\n\n------\n\n\n### 1. 设置可视区域\n```html\n<template>\n  <div class='match-team-style'>\n    <div class='base-data'>\n      <p>ping1和ping3为可是区域，里面的内容可滚动</p>\n      <div class='ping1'>\n        <ul ref='u1' :style='movedist'>\n          <li v-for='n in 100'>{{n}}</li>\n        </ul>\n      </div>\n      <div class='ping2'>\n        <ul>\n          <li v-for='n in 100'>{{n}}</li>\n        </ul>\n      </div>\n      <div class='ping3'>\n        <ul ref='u3' :style='movedist3'>\n          <li v-for='n in 100'>{{n}}</li>\n        </ul>\n      </div>\n    </div>\n  </div>\n</template>\n```\n\n```css\n<style lang='less'>\n\t.match-team-style{\n     border:1px solid red;\n     width: 100%;\n     height: 100%;\n     >div{\n      border:1px solid yellow;\n      height: 100%;\n      >div{\n        margin-top: 100px;\n        width:80px;\n        border:1px solid blue;\n        display: inline-block;\n        height: 300px;\n        overflow: hidden;\n        ul{\n          border: 1px solid red;\n        }\n      }\n     }\n\t}\n</style>\n```\n### 2. 通过监听touch事件来动态改变u1和u3的translate\n\n```js\n<script>\nexport default {\n  components: {},\n  data () {\n    return {\n      movedist: '',\n      movedist3: ''\n    }\n  },\n  mounted () {\n    this.$nextTick(() => {\n      this.moveDiv(this.$refs.u1, this.$refs.u3)\n    })\n  },\n  methods: {\n    moveDiv (dom1, dom2) {\n      // 滑动dom1,滑动dom2,dom1和dom2有连锁滑动效果\n      // self.movedist、self.movedist3是dom1和2的style\n      let startY1 = ''\n      let moveY1 = ''\n      let movedis = 0\n      let translates = 0\n      let self = this\n      dom1.addEventListener('touchstart', function (e) {\n        startY1 = e.changedTouches[0].pageY\n      })\n      dom1.addEventListener('touchmove', function (e) {\n        moveY1 = e.changedTouches[0].pageY\n        movedis = translates + moveY1 - startY1\n        if (movedis > 0) {\n          movedis = 0\n        } else if (movedis < -(dom1.offsetHeight - 300)) {\n          movedis = -(dom1.offsetHeight - 300)\n        }\n        self.movedist = `transform: translateY(${movedis}px)`\n        self.movedist3 = `transform: translateY(${movedis}px)`\n      })\n      dom1.addEventListener('touchend', function (e) {\n        translates = movedis\n      })\n      let startY3 = ''\n      let moveY3 = ''\n      dom2.addEventListener('touchstart', function (e) {\n        startY3 = e.changedTouches[0].pageY\n      })\n      dom2.addEventListener('touchmove', function (e) {\n        moveY3 = e.changedTouches[0].pageY\n        movedis = translates + moveY3 - startY3\n        if (movedis > 0) {\n          movedis = 0\n        } else if (movedis < -(dom1.offsetHeight - 300)) {\n          movedis = -(dom1.offsetHeight - 300)\n        }\n        self.movedist = `transform: translateY(${movedis}px)`\n        self.movedist3 = `transform: translateY(${movedis}px)`\n      })\n      dom2.addEventListener('touchend', function (e) {\n        translates = movedis\n      })\n    }\n  }\n}\n</script>\n```\n关键代码就是在监听touchmove里实时计算滑动的距离，来设置u1和u3的滚动距离。\n","slug":"translate","published":1,"date":"2017-09-23T06:42:07.000Z","updated":"2017-09-23T06:55:53.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghao8j9000bw0uazlof1dw1","content":"<h1 id=\"translate模拟滚动\"><a href=\"#translate模拟滚动\" class=\"headerlink\" title=\"translate模拟滚动\"></a>translate模拟滚动</h1><hr>\n<p>基于VUE实现的模拟滚动，(适合用于移动的webview)可提高性能</p>\n<hr>\n<h3 id=\"1-设置可视区域\"><a href=\"#1-设置可视区域\" class=\"headerlink\" title=\"1. 设置可视区域\"></a>1. 设置可视区域</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'match-team-style'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'base-data'</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>ping1和ping3为可是区域，里面的内容可滚动<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'ping1'</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">ref</span>=<span class=\"string\">'u1'</span> <span class=\"attr\">:style</span>=<span class=\"string\">'movedist'</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">'n in 100'</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'ping2'</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">'n in 100'</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'ping3'</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">ref</span>=<span class=\"string\">'u3'</span> <span class=\"attr\">:style</span>=<span class=\"string\">'movedist3'</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">'n in 100'</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style lang='less'&gt;</span><br><span class=\"line\">\t<span class=\"selector-class\">.match-team-style</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">     &gt;div&#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">border</span><span class=\"selector-pseudo\">:1px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">yellow</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">height</span>: 100%;</span><br><span class=\"line\">      &gt;<span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">margin-top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>:<span class=\"number\">80px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid blue;</span><br><span class=\"line\">        <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">        ul&#123;</span><br><span class=\"line\">          <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">red</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-通过监听touch事件来动态改变u1和u3的translate\"><a href=\"#2-通过监听touch事件来动态改变u1和u3的translate\" class=\"headerlink\" title=\"2. 通过监听touch事件来动态改变u1和u3的translate\"></a>2. 通过监听touch事件来动态改变u1和u3的translate</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  components: &#123;&#125;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      movedist: <span class=\"string\">''</span>,</span><br><span class=\"line\">      movedist3: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.moveDiv(<span class=\"keyword\">this</span>.$refs.u1, <span class=\"keyword\">this</span>.$refs.u3)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    moveDiv (dom1, dom2) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 滑动dom1,滑动dom2,dom1和dom2有连锁滑动效果</span></span><br><span class=\"line\">      <span class=\"comment\">// self.movedist、self.movedist3是dom1和2的style</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> startY1 = <span class=\"string\">''</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> moveY1 = <span class=\"string\">''</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> movedis = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> translates = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> self = <span class=\"keyword\">this</span></span><br><span class=\"line\">      dom1.addEventListener(<span class=\"string\">'touchstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        startY1 = e.changedTouches[<span class=\"number\">0</span>].pageY</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      dom1.addEventListener(<span class=\"string\">'touchmove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        moveY1 = e.changedTouches[<span class=\"number\">0</span>].pageY</span><br><span class=\"line\">        movedis = translates + moveY1 - startY1</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (movedis &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          movedis = <span class=\"number\">0</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (movedis &lt; -(dom1.offsetHeight - <span class=\"number\">300</span>)) &#123;</span><br><span class=\"line\">          movedis = -(dom1.offsetHeight - <span class=\"number\">300</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        self.movedist = <span class=\"string\">`transform: translateY(<span class=\"subst\">$&#123;movedis&#125;</span>px)`</span></span><br><span class=\"line\">        self.movedist3 = <span class=\"string\">`transform: translateY(<span class=\"subst\">$&#123;movedis&#125;</span>px)`</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      dom1.addEventListener(<span class=\"string\">'touchend'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        translates = movedis</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> startY3 = <span class=\"string\">''</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> moveY3 = <span class=\"string\">''</span></span><br><span class=\"line\">      dom2.addEventListener(<span class=\"string\">'touchstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        startY3 = e.changedTouches[<span class=\"number\">0</span>].pageY</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      dom2.addEventListener(<span class=\"string\">'touchmove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        moveY3 = e.changedTouches[<span class=\"number\">0</span>].pageY</span><br><span class=\"line\">        movedis = translates + moveY3 - startY3</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (movedis &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          movedis = <span class=\"number\">0</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (movedis &lt; -(dom1.offsetHeight - <span class=\"number\">300</span>)) &#123;</span><br><span class=\"line\">          movedis = -(dom1.offsetHeight - <span class=\"number\">300</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        self.movedist = <span class=\"string\">`transform: translateY(<span class=\"subst\">$&#123;movedis&#125;</span>px)`</span></span><br><span class=\"line\">        self.movedist3 = <span class=\"string\">`transform: translateY(<span class=\"subst\">$&#123;movedis&#125;</span>px)`</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      dom2.addEventListener(<span class=\"string\">'touchend'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        translates = movedis</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>关键代码就是在监听touchmove里实时计算滑动的距离，来设置u1和u3的滚动距离。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"translate模拟滚动\"><a href=\"#translate模拟滚动\" class=\"headerlink\" title=\"translate模拟滚动\"></a>translate模拟滚动</h1><hr>\n<p>基于VUE实现的模拟滚动，(适合用于移动的webview)可提高性能</p>\n<hr>\n<h3 id=\"1-设置可视区域\"><a href=\"#1-设置可视区域\" class=\"headerlink\" title=\"1. 设置可视区域\"></a>1. 设置可视区域</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'match-team-style'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'base-data'</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>ping1和ping3为可是区域，里面的内容可滚动<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'ping1'</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">ref</span>=<span class=\"string\">'u1'</span> <span class=\"attr\">:style</span>=<span class=\"string\">'movedist'</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">'n in 100'</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'ping2'</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">'n in 100'</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">'ping3'</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">ref</span>=<span class=\"string\">'u3'</span> <span class=\"attr\">:style</span>=<span class=\"string\">'movedist3'</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">'n in 100'</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style lang='less'&gt;</span><br><span class=\"line\">\t<span class=\"selector-class\">.match-team-style</span>&#123;</span><br><span class=\"line\">     <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid red;</span><br><span class=\"line\">     <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">     <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">     &gt;div&#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">border</span><span class=\"selector-pseudo\">:1px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">yellow</span>;</span><br><span class=\"line\">      <span class=\"selector-tag\">height</span>: 100%;</span><br><span class=\"line\">      &gt;<span class=\"selector-tag\">div</span>&#123;</span><br><span class=\"line\">        <span class=\"attribute\">margin-top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">width</span>:<span class=\"number\">80px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">border</span>:<span class=\"number\">1px</span> solid blue;</span><br><span class=\"line\">        <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">        <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">        <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">        ul&#123;</span><br><span class=\"line\">          <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span> <span class=\"selector-tag\">red</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-通过监听touch事件来动态改变u1和u3的translate\"><a href=\"#2-通过监听touch事件来动态改变u1和u3的translate\" class=\"headerlink\" title=\"2. 通过监听touch事件来动态改变u1和u3的translate\"></a>2. 通过监听touch事件来动态改变u1和u3的translate</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  components: &#123;&#125;,</span><br><span class=\"line\">  data () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      movedist: <span class=\"string\">''</span>,</span><br><span class=\"line\">      movedist3: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.$nextTick(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">this</span>.moveDiv(<span class=\"keyword\">this</span>.$refs.u1, <span class=\"keyword\">this</span>.$refs.u3)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    moveDiv (dom1, dom2) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 滑动dom1,滑动dom2,dom1和dom2有连锁滑动效果</span></span><br><span class=\"line\">      <span class=\"comment\">// self.movedist、self.movedist3是dom1和2的style</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> startY1 = <span class=\"string\">''</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> moveY1 = <span class=\"string\">''</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> movedis = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> translates = <span class=\"number\">0</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> self = <span class=\"keyword\">this</span></span><br><span class=\"line\">      dom1.addEventListener(<span class=\"string\">'touchstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        startY1 = e.changedTouches[<span class=\"number\">0</span>].pageY</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      dom1.addEventListener(<span class=\"string\">'touchmove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        moveY1 = e.changedTouches[<span class=\"number\">0</span>].pageY</span><br><span class=\"line\">        movedis = translates + moveY1 - startY1</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (movedis &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          movedis = <span class=\"number\">0</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (movedis &lt; -(dom1.offsetHeight - <span class=\"number\">300</span>)) &#123;</span><br><span class=\"line\">          movedis = -(dom1.offsetHeight - <span class=\"number\">300</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        self.movedist = <span class=\"string\">`transform: translateY(<span class=\"subst\">$&#123;movedis&#125;</span>px)`</span></span><br><span class=\"line\">        self.movedist3 = <span class=\"string\">`transform: translateY(<span class=\"subst\">$&#123;movedis&#125;</span>px)`</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      dom1.addEventListener(<span class=\"string\">'touchend'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        translates = movedis</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">let</span> startY3 = <span class=\"string\">''</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> moveY3 = <span class=\"string\">''</span></span><br><span class=\"line\">      dom2.addEventListener(<span class=\"string\">'touchstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        startY3 = e.changedTouches[<span class=\"number\">0</span>].pageY</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      dom2.addEventListener(<span class=\"string\">'touchmove'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        moveY3 = e.changedTouches[<span class=\"number\">0</span>].pageY</span><br><span class=\"line\">        movedis = translates + moveY3 - startY3</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (movedis &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          movedis = <span class=\"number\">0</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (movedis &lt; -(dom1.offsetHeight - <span class=\"number\">300</span>)) &#123;</span><br><span class=\"line\">          movedis = -(dom1.offsetHeight - <span class=\"number\">300</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        self.movedist = <span class=\"string\">`transform: translateY(<span class=\"subst\">$&#123;movedis&#125;</span>px)`</span></span><br><span class=\"line\">        self.movedist3 = <span class=\"string\">`transform: translateY(<span class=\"subst\">$&#123;movedis&#125;</span>px)`</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      dom2.addEventListener(<span class=\"string\">'touchend'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">        translates = movedis</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p>关键代码就是在监听touchmove里实时计算滑动的距离，来设置u1和u3的滚动距离。</p>\n"},{"title":"键盘事件","_content":"> 随笔，小记。。\n\n### 键盘事件执行顺序？\n\n触发键盘事件，顺序为keydown -> keypress ->keyup。\n\n------\n### ta们之间的区别？\n\n1、keydown和keypress事件表示手指按下瞬间，和按下不松手的这种状态下的事件，事件触发在单词还没敲进文本框时，如果在keydown、keypress事件中输出文本框中的文本，得到的是触发键盘事件前的文本。而keyup事件触发时整个键盘事件的操作已经完成，获得的是触发键盘事件后的文本。\n\n2、keypress对中文输入法支持不好，无法响应中文输入,无法响应系统功能键（如delete，空格键）。\n\n3、keyup事件中无法阻止浏览器默认事件，因为在keypress时，浏览器默认行为已经完成，用e.preventDefault和event.teturnValue=false都不能阻止在文本框中输入文字的行为，如要阻止在文本框中输入文字，必须在keydown或keypress时进行阻止。\n\n4、textInput事件\n若把textInpput也加进来，触发的顺序为：keydown -> keypress ->textInput -> keyup\ntextInput事件是后来支持的，主要用来替换keypress，与keypress的主要差别在于添加了对中文输入法的支持，还有一点就是textInput只在可编辑文本区才能触发（如input、textarea），而keypress是任何能获得焦点的控件的能触发（如button），但是textInput事件的支持还不是很好。\n\n备注：*** 只会在用户输入可视字符时触发 ***\n\n\n------\n","source":"_posts/键盘事件.md","raw":"---\ntitle: 键盘事件\n---\n> 随笔，小记。。\n\n### 键盘事件执行顺序？\n\n触发键盘事件，顺序为keydown -> keypress ->keyup。\n\n------\n### ta们之间的区别？\n\n1、keydown和keypress事件表示手指按下瞬间，和按下不松手的这种状态下的事件，事件触发在单词还没敲进文本框时，如果在keydown、keypress事件中输出文本框中的文本，得到的是触发键盘事件前的文本。而keyup事件触发时整个键盘事件的操作已经完成，获得的是触发键盘事件后的文本。\n\n2、keypress对中文输入法支持不好，无法响应中文输入,无法响应系统功能键（如delete，空格键）。\n\n3、keyup事件中无法阻止浏览器默认事件，因为在keypress时，浏览器默认行为已经完成，用e.preventDefault和event.teturnValue=false都不能阻止在文本框中输入文字的行为，如要阻止在文本框中输入文字，必须在keydown或keypress时进行阻止。\n\n4、textInput事件\n若把textInpput也加进来，触发的顺序为：keydown -> keypress ->textInput -> keyup\ntextInput事件是后来支持的，主要用来替换keypress，与keypress的主要差别在于添加了对中文输入法的支持，还有一点就是textInput只在可编辑文本区才能触发（如input、textarea），而keypress是任何能获得焦点的控件的能触发（如button），但是textInput事件的支持还不是很好。\n\n备注：*** 只会在用户输入可视字符时触发 ***\n\n\n------\n","slug":"键盘事件","published":1,"date":"2016-10-28T04:54:52.000Z","updated":"2016-10-28T04:57:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghao8jb000cw0uajymsw5qy","content":"<blockquote>\n<p>随笔，小记。。</p>\n</blockquote>\n<h3 id=\"键盘事件执行顺序？\"><a href=\"#键盘事件执行顺序？\" class=\"headerlink\" title=\"键盘事件执行顺序？\"></a>键盘事件执行顺序？</h3><p>触发键盘事件，顺序为keydown -&gt; keypress -&gt;keyup。</p>\n<hr>\n<h3 id=\"ta们之间的区别？\"><a href=\"#ta们之间的区别？\" class=\"headerlink\" title=\"ta们之间的区别？\"></a>ta们之间的区别？</h3><p>1、keydown和keypress事件表示手指按下瞬间，和按下不松手的这种状态下的事件，事件触发在单词还没敲进文本框时，如果在keydown、keypress事件中输出文本框中的文本，得到的是触发键盘事件前的文本。而keyup事件触发时整个键盘事件的操作已经完成，获得的是触发键盘事件后的文本。</p>\n<p>2、keypress对中文输入法支持不好，无法响应中文输入,无法响应系统功能键（如delete，空格键）。</p>\n<p>3、keyup事件中无法阻止浏览器默认事件，因为在keypress时，浏览器默认行为已经完成，用e.preventDefault和event.teturnValue=false都不能阻止在文本框中输入文字的行为，如要阻止在文本框中输入文字，必须在keydown或keypress时进行阻止。</p>\n<p>4、textInput事件<br>若把textInpput也加进来，触发的顺序为：keydown -&gt; keypress -&gt;textInput -&gt; keyup<br>textInput事件是后来支持的，主要用来替换keypress，与keypress的主要差别在于添加了对中文输入法的支持，还有一点就是textInput只在可编辑文本区才能触发（如input、textarea），而keypress是任何能获得焦点的控件的能触发（如button），但是textInput事件的支持还不是很好。</p>\n<p>备注：<strong><em> 只会在用户输入可视字符时触发 </em></strong></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>随笔，小记。。</p>\n</blockquote>\n<h3 id=\"键盘事件执行顺序？\"><a href=\"#键盘事件执行顺序？\" class=\"headerlink\" title=\"键盘事件执行顺序？\"></a>键盘事件执行顺序？</h3><p>触发键盘事件，顺序为keydown -&gt; keypress -&gt;keyup。</p>\n<hr>\n<h3 id=\"ta们之间的区别？\"><a href=\"#ta们之间的区别？\" class=\"headerlink\" title=\"ta们之间的区别？\"></a>ta们之间的区别？</h3><p>1、keydown和keypress事件表示手指按下瞬间，和按下不松手的这种状态下的事件，事件触发在单词还没敲进文本框时，如果在keydown、keypress事件中输出文本框中的文本，得到的是触发键盘事件前的文本。而keyup事件触发时整个键盘事件的操作已经完成，获得的是触发键盘事件后的文本。</p>\n<p>2、keypress对中文输入法支持不好，无法响应中文输入,无法响应系统功能键（如delete，空格键）。</p>\n<p>3、keyup事件中无法阻止浏览器默认事件，因为在keypress时，浏览器默认行为已经完成，用e.preventDefault和event.teturnValue=false都不能阻止在文本框中输入文字的行为，如要阻止在文本框中输入文字，必须在keydown或keypress时进行阻止。</p>\n<p>4、textInput事件<br>若把textInpput也加进来，触发的顺序为：keydown -&gt; keypress -&gt;textInput -&gt; keyup<br>textInput事件是后来支持的，主要用来替换keypress，与keypress的主要差别在于添加了对中文输入法的支持，还有一点就是textInput只在可编辑文本区才能触发（如input、textarea），而keypress是任何能获得焦点的控件的能触发（如button），但是textInput事件的支持还不是很好。</p>\n<p>备注：<strong><em> 只会在用户输入可视字符时触发 </em></strong></p>\n<hr>\n"},{"title":"数组去重的五种方法","_content":"\n\n摘自hanzichi的github,欢迎支持原文：点击原文链接即可查看；\nhttps://github.com/hanzichi/underscore-analysis/issues/9\n\n数组去重，一般需求是给你一个数组，调用去重方法，返回数值副本，副本中没有重复元素。一般来说，两个元素通过 === 比较返回 true 的视为相同元素，需要去重，所以，1 和 \"1\" 是不同的元素，1 和 new Number(1) 是不同的元素，{} 和 {} 是不同的元素（引用不同）。（当然如果需求认为 {} 和 {} 算作相同的元素，那么解法就不一样了）\n\n\n------\n\n## 方法一\n\n无需思考，我们可以得到 O(n^2) 复杂度的解法。定义一个变量数组 res 保存结果，遍历需要去重的数组，如果该元素已经存在在 res 中了，则说明是重复的元素，如果没有，则放入 res 中。\n\n```js\nfunction unique(a) {\n\n var res = [];\n\n for (var i = 0, len = a.length; i < len; i++) {\n\n  var item = a[i];\n\n  for (var j = 0, jLen = res.length; j < jLen; j++) {\n\n    if (res[j] === item)\n\n    break;\n\n  }\n\n  if (j === jLen)\n\n    res.push(item);\n\n }\n\n return res;\n\n}\n\nvar a = [1, 1, '1', '2', 1];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [1, \"1\", \"2\"]  \n```\n代码非常简单，那么是否能更简洁些？如果不考虑浏览器兼容，我们可以用 ES5 提供的 Array.prototype.indexOf 方法来简化代码。\n\n```\nfunction unique(a) {\n\n var res = [];\n\n for (var i = 0, len = a.length; i < len; i++) {\n\n var item = a[i];\n\n  (res.indexOf(item) === -1) && res.push(item);\n\n }\n\n  return res;\n\n}\n\nvar a = [1, 1, '1', '2', 1];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [1, \"1\", \"2\"]\n```\n既然用了 indexOf，那么不妨再加上 filter\n```\nfunction unique(a) {\n\n  var res = a.filter(function(item, index, array) {\n\n    return array.indexOf(item) === index;\n\n   });\n\n return res;\n\n}\n\nvar a = [1, 1, '1', '2', 1];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [1, \"1\", \"2\"]\n```\n\n------\n\n## 方法二\n法一是将原数组中的元素和结果数组中的元素一一比较，我们可以换个思路，将原数组中重复元素的最后一个元素放入结果数组中。\n\n```js\nfunction unique(a) {  \n\n  var res = [];  \n\n  for (var i = 0, len = a.length; i < len; i++) {   \n\n    for (var j = i + 1; j < len; j++) {      \n\n      // 这一步十分巧妙\n\n      // 如果发现相同元素\n\n      // 则 i 自增进入下一个循环比较\n\n      if (a[i] === a[j])\n\n       j = ++i;\n\n    }    \n\n    res.push(a[i]);\n\n  }  \n\n    return res;\n\n}\n\n    \n\nvar a = [1, 1, '1', '2', 1];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [\"1\", \"2\", 1]\n```\n虽然复杂度还是 O(n^2)，但是可以看到结果不同，1 出现在了数组最后面，因为结果数组取的是元素最后一次出现的位置。\n\n------\n\n\n## 方法三（sort)\n\n如果笔试面试时只答出了上面这样 O(n^2) 的方案，可能还不能使面试官满意，下面就来说几种进阶方案。\n\n将数组用 sort 排序后，理论上相同的元素会被放在相邻的位置，那么比较前后位置的元素就可以了。\n```js\nfunction unique(a) {  \n\n  return a.concat().sort().filter(function(item, pos, ary) {    \n\n    return !pos || item != ary[pos - 1];\n\n  });\n\n}\n\n\n\nvar a = [1, 1, 3, 2, 1, 2, 4];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [1, 2, 3, 4]\n```\n但是问题又来了，1 和 \"1\" 会被排在一起，不同的 Object 会被排在一起，因为它们 toString() 的结果相同，所以会出现这样的错误：\n```\nvar a = [1, 1, 3, 2, 1, 2, 4, '1'];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [1, 2, 3, 4]\n```\n当然你完全可以针对数组中可能出现的不同类型，来写这个比较函数。不过这似乎有点麻烦。\n\n------\n\n\n## 方法四 （object）\n\n用 JavaScript 中的 Object 对象来当做哈希表，这也是几年前笔试时的解法，跟 sort 一样，可以去重完全由 Number 基本类型组成的数组。\n\n```js\nfunction unique(a) {  \n\n   var seen = {};  \n\n   return a.filter(function(item) {   \n\n    return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n\n  });\n\n}\n\n    \n\nvar a = [1, 1, 3, 2, 1, 2, 4];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [1, 3, 2, 4]\n\n```\n还是和方法三一样的问题，因为 Object 的 key 值都是 String 类型，所以对于 1 和 \"1\" 无法分别，我们可以稍微改进下，将类型也存入 key 中。\n```\nfunction unique(a) {  \n\n  var ret = [];  \n\n  var hash = {};  \n\n  for (var i = 0, len = a.length; i < len; i++) {    \n\n    var item = a[i];    \n\n    var key = typeof(item) + item;    \n\n    if (hash[key] !== 1) {      \n\n      ret.push(item);\n\n      hash[key] = 1;\n\n    }\n\n  }  \n\n  return ret;\n\n}\n\n\n\nvar a = [1, 1, 3, 2, '4', 1, 2, 4, '1'];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [1, 3, 2, \"4\", 4, \"1\"]\n```\n虽然解决了讨厌的 1 和 \"1\" 的问题，但是还有别的问题！\n```\nvar a = [{name: \"hanzichi\"}, {age: 30}, new String(1), new Number(1)];\n\nvar ans = unique(a);console.log(ans); // => [Object, String]\n```\n但是如果数组元素全部是基础类型的 Number 值，键值对法应该是最高效的！\n\n------\n\n\n## 方法五 （ES6）\n\nES6 部署了 Set 以及 Array.from 方法，太强大了！如果浏览器支持，完全可以这样：\n\n```js\nfunction unique(a) {  \n\n  return Array.from(new Set(a));\n\n}\n\nvar a = [{name: \"hanzichi\"}, {age: 30}, new String(1), new Number(1)];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [Object, Object, String, Number]\n```\n\n\n","source":"_posts/数组去重的五种方法.md","raw":"---\ntitle: 数组去重的五种方法\n---\n\n\n摘自hanzichi的github,欢迎支持原文：点击原文链接即可查看；\nhttps://github.com/hanzichi/underscore-analysis/issues/9\n\n数组去重，一般需求是给你一个数组，调用去重方法，返回数值副本，副本中没有重复元素。一般来说，两个元素通过 === 比较返回 true 的视为相同元素，需要去重，所以，1 和 \"1\" 是不同的元素，1 和 new Number(1) 是不同的元素，{} 和 {} 是不同的元素（引用不同）。（当然如果需求认为 {} 和 {} 算作相同的元素，那么解法就不一样了）\n\n\n------\n\n## 方法一\n\n无需思考，我们可以得到 O(n^2) 复杂度的解法。定义一个变量数组 res 保存结果，遍历需要去重的数组，如果该元素已经存在在 res 中了，则说明是重复的元素，如果没有，则放入 res 中。\n\n```js\nfunction unique(a) {\n\n var res = [];\n\n for (var i = 0, len = a.length; i < len; i++) {\n\n  var item = a[i];\n\n  for (var j = 0, jLen = res.length; j < jLen; j++) {\n\n    if (res[j] === item)\n\n    break;\n\n  }\n\n  if (j === jLen)\n\n    res.push(item);\n\n }\n\n return res;\n\n}\n\nvar a = [1, 1, '1', '2', 1];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [1, \"1\", \"2\"]  \n```\n代码非常简单，那么是否能更简洁些？如果不考虑浏览器兼容，我们可以用 ES5 提供的 Array.prototype.indexOf 方法来简化代码。\n\n```\nfunction unique(a) {\n\n var res = [];\n\n for (var i = 0, len = a.length; i < len; i++) {\n\n var item = a[i];\n\n  (res.indexOf(item) === -1) && res.push(item);\n\n }\n\n  return res;\n\n}\n\nvar a = [1, 1, '1', '2', 1];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [1, \"1\", \"2\"]\n```\n既然用了 indexOf，那么不妨再加上 filter\n```\nfunction unique(a) {\n\n  var res = a.filter(function(item, index, array) {\n\n    return array.indexOf(item) === index;\n\n   });\n\n return res;\n\n}\n\nvar a = [1, 1, '1', '2', 1];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [1, \"1\", \"2\"]\n```\n\n------\n\n## 方法二\n法一是将原数组中的元素和结果数组中的元素一一比较，我们可以换个思路，将原数组中重复元素的最后一个元素放入结果数组中。\n\n```js\nfunction unique(a) {  \n\n  var res = [];  \n\n  for (var i = 0, len = a.length; i < len; i++) {   \n\n    for (var j = i + 1; j < len; j++) {      \n\n      // 这一步十分巧妙\n\n      // 如果发现相同元素\n\n      // 则 i 自增进入下一个循环比较\n\n      if (a[i] === a[j])\n\n       j = ++i;\n\n    }    \n\n    res.push(a[i]);\n\n  }  \n\n    return res;\n\n}\n\n    \n\nvar a = [1, 1, '1', '2', 1];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [\"1\", \"2\", 1]\n```\n虽然复杂度还是 O(n^2)，但是可以看到结果不同，1 出现在了数组最后面，因为结果数组取的是元素最后一次出现的位置。\n\n------\n\n\n## 方法三（sort)\n\n如果笔试面试时只答出了上面这样 O(n^2) 的方案，可能还不能使面试官满意，下面就来说几种进阶方案。\n\n将数组用 sort 排序后，理论上相同的元素会被放在相邻的位置，那么比较前后位置的元素就可以了。\n```js\nfunction unique(a) {  \n\n  return a.concat().sort().filter(function(item, pos, ary) {    \n\n    return !pos || item != ary[pos - 1];\n\n  });\n\n}\n\n\n\nvar a = [1, 1, 3, 2, 1, 2, 4];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [1, 2, 3, 4]\n```\n但是问题又来了，1 和 \"1\" 会被排在一起，不同的 Object 会被排在一起，因为它们 toString() 的结果相同，所以会出现这样的错误：\n```\nvar a = [1, 1, 3, 2, 1, 2, 4, '1'];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [1, 2, 3, 4]\n```\n当然你完全可以针对数组中可能出现的不同类型，来写这个比较函数。不过这似乎有点麻烦。\n\n------\n\n\n## 方法四 （object）\n\n用 JavaScript 中的 Object 对象来当做哈希表，这也是几年前笔试时的解法，跟 sort 一样，可以去重完全由 Number 基本类型组成的数组。\n\n```js\nfunction unique(a) {  \n\n   var seen = {};  \n\n   return a.filter(function(item) {   \n\n    return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n\n  });\n\n}\n\n    \n\nvar a = [1, 1, 3, 2, 1, 2, 4];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [1, 3, 2, 4]\n\n```\n还是和方法三一样的问题，因为 Object 的 key 值都是 String 类型，所以对于 1 和 \"1\" 无法分别，我们可以稍微改进下，将类型也存入 key 中。\n```\nfunction unique(a) {  \n\n  var ret = [];  \n\n  var hash = {};  \n\n  for (var i = 0, len = a.length; i < len; i++) {    \n\n    var item = a[i];    \n\n    var key = typeof(item) + item;    \n\n    if (hash[key] !== 1) {      \n\n      ret.push(item);\n\n      hash[key] = 1;\n\n    }\n\n  }  \n\n  return ret;\n\n}\n\n\n\nvar a = [1, 1, 3, 2, '4', 1, 2, 4, '1'];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [1, 3, 2, \"4\", 4, \"1\"]\n```\n虽然解决了讨厌的 1 和 \"1\" 的问题，但是还有别的问题！\n```\nvar a = [{name: \"hanzichi\"}, {age: 30}, new String(1), new Number(1)];\n\nvar ans = unique(a);console.log(ans); // => [Object, String]\n```\n但是如果数组元素全部是基础类型的 Number 值，键值对法应该是最高效的！\n\n------\n\n\n## 方法五 （ES6）\n\nES6 部署了 Set 以及 Array.from 方法，太强大了！如果浏览器支持，完全可以这样：\n\n```js\nfunction unique(a) {  \n\n  return Array.from(new Set(a));\n\n}\n\nvar a = [{name: \"hanzichi\"}, {age: 30}, new String(1), new Number(1)];\n\nvar ans = unique(a);\n\nconsole.log(ans); // => [Object, Object, String, Number]\n```\n\n\n","slug":"数组去重的五种方法","published":1,"date":"2018-04-26T02:10:05.670Z","updated":"2018-04-26T02:45:27.305Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghao8jc000dw0uazt6ut0ko","content":"<p>摘自hanzichi的github,欢迎支持原文：点击原文链接即可查看；<br><a href=\"https://github.com/hanzichi/underscore-analysis/issues/9\" target=\"_blank\" rel=\"noopener\">https://github.com/hanzichi/underscore-analysis/issues/9</a></p>\n<p>数组去重，一般需求是给你一个数组，调用去重方法，返回数值副本，副本中没有重复元素。一般来说，两个元素通过 === 比较返回 true 的视为相同元素，需要去重，所以，1 和 “1” 是不同的元素，1 和 new Number(1) 是不同的元素，{} 和 {} 是不同的元素（引用不同）。（当然如果需求认为 {} 和 {} 算作相同的元素，那么解法就不一样了）</p>\n<hr>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>无需思考，我们可以得到 O(n^2) 复杂度的解法。定义一个变量数组 res 保存结果，遍历需要去重的数组，如果该元素已经存在在 res 中了，则说明是重复的元素，如果没有，则放入 res 中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = a.length; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> item = a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, jLen = res.length; j &lt; jLen; j++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res[j] === item)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (j === jLen)</span><br><span class=\"line\"></span><br><span class=\"line\">    res.push(item);</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans); <span class=\"comment\">// =&gt; [1, \"1\", \"2\"]</span></span><br></pre></td></tr></table></figure>\n<p>代码非常简单，那么是否能更简洁些？如果不考虑浏览器兼容，我们可以用 ES5 提供的 Array.prototype.indexOf 方法来简化代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function unique(a) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> var res = [];</span><br><span class=\"line\"></span><br><span class=\"line\"> for (var i = 0, len = a.length; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> var item = a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">  (res.indexOf(item) === -1) &amp;&amp; res.push(item);</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return res;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = [1, 1, &apos;1&apos;, &apos;2&apos;, 1];</span><br><span class=\"line\"></span><br><span class=\"line\">var ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(ans); // =&gt; [1, &quot;1&quot;, &quot;2&quot;]</span><br></pre></td></tr></table></figure>\n<p>既然用了 indexOf，那么不妨再加上 filter<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function unique(a) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var res = a.filter(function(item, index, array) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return array.indexOf(item) === index;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> return res;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = [1, 1, &apos;1&apos;, &apos;2&apos;, 1];</span><br><span class=\"line\"></span><br><span class=\"line\">var ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(ans); // =&gt; [1, &quot;1&quot;, &quot;2&quot;]</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>法一是将原数组中的元素和结果数组中的元素一一比较，我们可以换个思路，将原数组中重复元素的最后一个元素放入结果数组中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">a</span>) </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = [];  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = a.length; i &lt; len; i++) &#123;   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;      </span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 这一步十分巧妙</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果发现相同元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 则 i 自增进入下一个循环比较</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a[i] === a[j])</span><br><span class=\"line\"></span><br><span class=\"line\">       j = ++i;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">    res.push(a[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans); <span class=\"comment\">// =&gt; [\"1\", \"2\", 1]</span></span><br></pre></td></tr></table></figure>\n<p>虽然复杂度还是 O(n^2)，但是可以看到结果不同，1 出现在了数组最后面，因为结果数组取的是元素最后一次出现的位置。</p>\n<hr>\n<h2 id=\"方法三（sort\"><a href=\"#方法三（sort\" class=\"headerlink\" title=\"方法三（sort)\"></a>方法三（sort)</h2><p>如果笔试面试时只答出了上面这样 O(n^2) 的方案，可能还不能使面试官满意，下面就来说几种进阶方案。</p>\n<p>将数组用 sort 排序后，理论上相同的元素会被放在相邻的位置，那么比较前后位置的元素就可以了。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">a</span>) </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.concat().sort().filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, pos, ary</span>) </span>&#123;    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !pos || item != ary[pos - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans); <span class=\"comment\">// =&gt; [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></p>\n<p>但是问题又来了，1 和 “1” 会被排在一起，不同的 Object 会被排在一起，因为它们 toString() 的结果相同，所以会出现这样的错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = [1, 1, 3, 2, 1, 2, 4, &apos;1&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">var ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(ans); // =&gt; [1, 2, 3, 4]</span><br></pre></td></tr></table></figure></p>\n<p>当然你完全可以针对数组中可能出现的不同类型，来写这个比较函数。不过这似乎有点麻烦。</p>\n<hr>\n<h2 id=\"方法四-（object）\"><a href=\"#方法四-（object）\" class=\"headerlink\" title=\"方法四 （object）\"></a>方法四 （object）</h2><p>用 JavaScript 中的 Object 对象来当做哈希表，这也是几年前笔试时的解法，跟 sort 一样，可以去重完全由 Number 基本类型组成的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">a</span>) </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> seen = &#123;&#125;;  </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> a.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> seen.hasOwnProperty(item) ? <span class=\"literal\">false</span> : (seen[item] = <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans); <span class=\"comment\">// =&gt; [1, 3, 2, 4]</span></span><br></pre></td></tr></table></figure>\n<p>还是和方法三一样的问题，因为 Object 的 key 值都是 String 类型，所以对于 1 和 “1” 无法分别，我们可以稍微改进下，将类型也存入 key 中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function unique(a) &#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">  var ret = [];  </span><br><span class=\"line\"></span><br><span class=\"line\">  var hash = &#123;&#125;;  </span><br><span class=\"line\"></span><br><span class=\"line\">  for (var i = 0, len = a.length; i &lt; len; i++) &#123;    </span><br><span class=\"line\"></span><br><span class=\"line\">    var item = a[i];    </span><br><span class=\"line\"></span><br><span class=\"line\">    var key = typeof(item) + item;    </span><br><span class=\"line\"></span><br><span class=\"line\">    if (hash[key] !== 1) &#123;      </span><br><span class=\"line\"></span><br><span class=\"line\">      ret.push(item);</span><br><span class=\"line\"></span><br><span class=\"line\">      hash[key] = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">  return ret;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var a = [1, 1, 3, 2, &apos;4&apos;, 1, 2, 4, &apos;1&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">var ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(ans); // =&gt; [1, 3, 2, &quot;4&quot;, 4, &quot;1&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>虽然解决了讨厌的 1 和 “1” 的问题，但是还有别的问题！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = [&#123;name: &quot;hanzichi&quot;&#125;, &#123;age: 30&#125;, new String(1), new Number(1)];</span><br><span class=\"line\"></span><br><span class=\"line\">var ans = unique(a);console.log(ans); // =&gt; [Object, String]</span><br></pre></td></tr></table></figure></p>\n<p>但是如果数组元素全部是基础类型的 Number 值，键值对法应该是最高效的！</p>\n<hr>\n<h2 id=\"方法五-（ES6）\"><a href=\"#方法五-（ES6）\" class=\"headerlink\" title=\"方法五 （ES6）\"></a>方法五 （ES6）</h2><p>ES6 部署了 Set 以及 Array.from 方法，太强大了！如果浏览器支持，完全可以这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">a</span>) </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(a));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"hanzichi\"</span>&#125;, &#123;<span class=\"attr\">age</span>: <span class=\"number\">30</span>&#125;, <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"number\">1</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>)];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans); <span class=\"comment\">// =&gt; [Object, Object, String, Number]</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>摘自hanzichi的github,欢迎支持原文：点击原文链接即可查看；<br><a href=\"https://github.com/hanzichi/underscore-analysis/issues/9\" target=\"_blank\" rel=\"noopener\">https://github.com/hanzichi/underscore-analysis/issues/9</a></p>\n<p>数组去重，一般需求是给你一个数组，调用去重方法，返回数值副本，副本中没有重复元素。一般来说，两个元素通过 === 比较返回 true 的视为相同元素，需要去重，所以，1 和 “1” 是不同的元素，1 和 new Number(1) 是不同的元素，{} 和 {} 是不同的元素（引用不同）。（当然如果需求认为 {} 和 {} 算作相同的元素，那么解法就不一样了）</p>\n<hr>\n<h2 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h2><p>无需思考，我们可以得到 O(n^2) 复杂度的解法。定义一个变量数组 res 保存结果，遍历需要去重的数组，如果该元素已经存在在 res 中了，则说明是重复的元素，如果没有，则放入 res 中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">a</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">var</span> res = [];</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = a.length; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> item = a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>, jLen = res.length; j &lt; jLen; j++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (res[j] === item)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (j === jLen)</span><br><span class=\"line\"></span><br><span class=\"line\">    res.push(item);</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans); <span class=\"comment\">// =&gt; [1, \"1\", \"2\"]</span></span><br></pre></td></tr></table></figure>\n<p>代码非常简单，那么是否能更简洁些？如果不考虑浏览器兼容，我们可以用 ES5 提供的 Array.prototype.indexOf 方法来简化代码。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function unique(a) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> var res = [];</span><br><span class=\"line\"></span><br><span class=\"line\"> for (var i = 0, len = a.length; i &lt; len; i++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"> var item = a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">  (res.indexOf(item) === -1) &amp;&amp; res.push(item);</span><br><span class=\"line\"></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  return res;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = [1, 1, &apos;1&apos;, &apos;2&apos;, 1];</span><br><span class=\"line\"></span><br><span class=\"line\">var ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(ans); // =&gt; [1, &quot;1&quot;, &quot;2&quot;]</span><br></pre></td></tr></table></figure>\n<p>既然用了 indexOf，那么不妨再加上 filter<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function unique(a) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  var res = a.filter(function(item, index, array) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    return array.indexOf(item) === index;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"> return res;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var a = [1, 1, &apos;1&apos;, &apos;2&apos;, 1];</span><br><span class=\"line\"></span><br><span class=\"line\">var ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(ans); // =&gt; [1, &quot;1&quot;, &quot;2&quot;]</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"方法二\"><a href=\"#方法二\" class=\"headerlink\" title=\"方法二\"></a>方法二</h2><p>法一是将原数组中的元素和结果数组中的元素一一比较，我们可以换个思路，将原数组中重复元素的最后一个元素放入结果数组中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">a</span>) </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> res = [];  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = a.length; i &lt; len; i++) &#123;   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;      </span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 这一步十分巧妙</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 如果发现相同元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 则 i 自增进入下一个循环比较</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (a[i] === a[j])</span><br><span class=\"line\"></span><br><span class=\"line\">       j = ++i;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\"></span><br><span class=\"line\">    res.push(a[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"string\">'1'</span>, <span class=\"string\">'2'</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans); <span class=\"comment\">// =&gt; [\"1\", \"2\", 1]</span></span><br></pre></td></tr></table></figure>\n<p>虽然复杂度还是 O(n^2)，但是可以看到结果不同，1 出现在了数组最后面，因为结果数组取的是元素最后一次出现的位置。</p>\n<hr>\n<h2 id=\"方法三（sort\"><a href=\"#方法三（sort\" class=\"headerlink\" title=\"方法三（sort)\"></a>方法三（sort)</h2><p>如果笔试面试时只答出了上面这样 O(n^2) 的方案，可能还不能使面试官满意，下面就来说几种进阶方案。</p>\n<p>将数组用 sort 排序后，理论上相同的元素会被放在相邻的位置，那么比较前后位置的元素就可以了。<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">a</span>) </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a.concat().sort().filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item, pos, ary</span>) </span>&#123;    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> !pos || item != ary[pos - <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans); <span class=\"comment\">// =&gt; [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure></p>\n<p>但是问题又来了，1 和 “1” 会被排在一起，不同的 Object 会被排在一起，因为它们 toString() 的结果相同，所以会出现这样的错误：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = [1, 1, 3, 2, 1, 2, 4, &apos;1&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">var ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(ans); // =&gt; [1, 2, 3, 4]</span><br></pre></td></tr></table></figure></p>\n<p>当然你完全可以针对数组中可能出现的不同类型，来写这个比较函数。不过这似乎有点麻烦。</p>\n<hr>\n<h2 id=\"方法四-（object）\"><a href=\"#方法四-（object）\" class=\"headerlink\" title=\"方法四 （object）\"></a>方法四 （object）</h2><p>用 JavaScript 中的 Object 对象来当做哈希表，这也是几年前笔试时的解法，跟 sort 一样，可以去重完全由 Number 基本类型组成的数组。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">a</span>) </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">var</span> seen = &#123;&#125;;  </span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> a.filter(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;   </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> seen.hasOwnProperty(item) ? <span class=\"literal\">false</span> : (seen[item] = <span class=\"literal\">true</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans); <span class=\"comment\">// =&gt; [1, 3, 2, 4]</span></span><br></pre></td></tr></table></figure>\n<p>还是和方法三一样的问题，因为 Object 的 key 值都是 String 类型，所以对于 1 和 “1” 无法分别，我们可以稍微改进下，将类型也存入 key 中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function unique(a) &#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">  var ret = [];  </span><br><span class=\"line\"></span><br><span class=\"line\">  var hash = &#123;&#125;;  </span><br><span class=\"line\"></span><br><span class=\"line\">  for (var i = 0, len = a.length; i &lt; len; i++) &#123;    </span><br><span class=\"line\"></span><br><span class=\"line\">    var item = a[i];    </span><br><span class=\"line\"></span><br><span class=\"line\">    var key = typeof(item) + item;    </span><br><span class=\"line\"></span><br><span class=\"line\">    if (hash[key] !== 1) &#123;      </span><br><span class=\"line\"></span><br><span class=\"line\">      ret.push(item);</span><br><span class=\"line\"></span><br><span class=\"line\">      hash[key] = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\"></span><br><span class=\"line\">  return ret;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var a = [1, 1, 3, 2, &apos;4&apos;, 1, 2, 4, &apos;1&apos;];</span><br><span class=\"line\"></span><br><span class=\"line\">var ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(ans); // =&gt; [1, 3, 2, &quot;4&quot;, 4, &quot;1&quot;]</span><br></pre></td></tr></table></figure></p>\n<p>虽然解决了讨厌的 1 和 “1” 的问题，但是还有别的问题！<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a = [&#123;name: &quot;hanzichi&quot;&#125;, &#123;age: 30&#125;, new String(1), new Number(1)];</span><br><span class=\"line\"></span><br><span class=\"line\">var ans = unique(a);console.log(ans); // =&gt; [Object, String]</span><br></pre></td></tr></table></figure></p>\n<p>但是如果数组元素全部是基础类型的 Number 值，键值对法应该是最高效的！</p>\n<hr>\n<h2 id=\"方法五-（ES6）\"><a href=\"#方法五-（ES6）\" class=\"headerlink\" title=\"方法五 （ES6）\"></a>方法五 （ES6）</h2><p>ES6 部署了 Set 以及 Array.from 方法，太强大了！如果浏览器支持，完全可以这样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unique</span>(<span class=\"params\">a</span>) </span>&#123;  </span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(a));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [&#123;<span class=\"attr\">name</span>: <span class=\"string\">\"hanzichi\"</span>&#125;, &#123;<span class=\"attr\">age</span>: <span class=\"number\">30</span>&#125;, <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"number\">1</span>), <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">1</span>)];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ans = unique(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ans); <span class=\"comment\">// =&gt; [Object, Object, String, Number]</span></span><br></pre></td></tr></table></figure>\n"},{"title":"JS逻辑运算符&&与||的短路运算","_content":"\n> 小记\n\n最近看到一个面试题,题目如下:\n\n```\n   alert(1&&2);//弹出什么？\n\n```\n\n  正确的结果是 2.\n\n这结果让我觉得自己对于逻辑运算符的理解还很浅~在网上搜集了一下资料，发现一个专业名词-->（短路计算原则）。。。那么来研究研究吧~~~\n\n1.在MDN上面找到相应描述逻辑运算符的说明:\n\n逻辑与 (&&) expr1&&expr2 如果expr1 能转换成false则返回expr1,否则返回expr2. 因此, 在Boolean环境中使用时, 两个操作结果都为true时返回true,否则返回false. \n逻辑或 (||) expr1||expr2 如果expr1能转换成true则返回expr1,否则返回expr2. 因此,在boolean环境(在if的条件判断中)中使用时, 二者操作结果中只要有一个为true,返回true;二者操作结果都为false时返回false. \n逻辑非(!) !expr 如果单个表达式能转换为true的话返回false,否则返回true. \n\n能够转换为false的表达式有:false,\"\"(空字符串),0和NaN,null,undefined.\n\n能够转化为true的值为:true,任何非空字符串，任何非零数字值(包括无穷大),任何对象\n\n以上规则已经再次确认，摘自\"javascript高级程序设计(第3版)\"这本书\n\n \n\n那么上面的题就好理解了，（1&&2）1返回的是true不是false所以无法返回第一个值,则返回的是数字2.\n\n \n\n2. 短路计算原则:\n\n由于逻辑表达式的运算的顺序是从左到右,也可以用以下规则进行\"短路\"计算:\nfalse && (anything)  短路计算的结果为false.\ntrue || (anything)  短路计算的结果为 true\n\n3.一些简单逻辑运算例子理解\n\n(1)逻辑与\n```\n\"a\" && \"b\"     \t\t//结果为 b\nfalse && \"a\"     \t// f && t 结果为 false\n\"a\" && false     \t// t && f 结果为 false\ntrue  && 2 && \"a\"   //结果为\"a\"\n\n```\n(2)逻辑或\n\n\nfalse || (2 == 4)  \t  // f || f 结果为 false\n\"a\" || \"b\"    \t\t  // t || t 结果为 a\nfalse || \"a\"    \t  // f || t 结果为 a(这个例子非常迷惑人)\n\"a\" || false    \t  // t || f 结果为 a\n","source":"_posts/逻辑运算符.md","raw":"---\ntitle: JS逻辑运算符&&与||的短路运算 \n---\n\n> 小记\n\n最近看到一个面试题,题目如下:\n\n```\n   alert(1&&2);//弹出什么？\n\n```\n\n  正确的结果是 2.\n\n这结果让我觉得自己对于逻辑运算符的理解还很浅~在网上搜集了一下资料，发现一个专业名词-->（短路计算原则）。。。那么来研究研究吧~~~\n\n1.在MDN上面找到相应描述逻辑运算符的说明:\n\n逻辑与 (&&) expr1&&expr2 如果expr1 能转换成false则返回expr1,否则返回expr2. 因此, 在Boolean环境中使用时, 两个操作结果都为true时返回true,否则返回false. \n逻辑或 (||) expr1||expr2 如果expr1能转换成true则返回expr1,否则返回expr2. 因此,在boolean环境(在if的条件判断中)中使用时, 二者操作结果中只要有一个为true,返回true;二者操作结果都为false时返回false. \n逻辑非(!) !expr 如果单个表达式能转换为true的话返回false,否则返回true. \n\n能够转换为false的表达式有:false,\"\"(空字符串),0和NaN,null,undefined.\n\n能够转化为true的值为:true,任何非空字符串，任何非零数字值(包括无穷大),任何对象\n\n以上规则已经再次确认，摘自\"javascript高级程序设计(第3版)\"这本书\n\n \n\n那么上面的题就好理解了，（1&&2）1返回的是true不是false所以无法返回第一个值,则返回的是数字2.\n\n \n\n2. 短路计算原则:\n\n由于逻辑表达式的运算的顺序是从左到右,也可以用以下规则进行\"短路\"计算:\nfalse && (anything)  短路计算的结果为false.\ntrue || (anything)  短路计算的结果为 true\n\n3.一些简单逻辑运算例子理解\n\n(1)逻辑与\n```\n\"a\" && \"b\"     \t\t//结果为 b\nfalse && \"a\"     \t// f && t 结果为 false\n\"a\" && false     \t// t && f 结果为 false\ntrue  && 2 && \"a\"   //结果为\"a\"\n\n```\n(2)逻辑或\n\n\nfalse || (2 == 4)  \t  // f || f 结果为 false\n\"a\" || \"b\"    \t\t  // t || t 结果为 a\nfalse || \"a\"    \t  // f || t 结果为 a(这个例子非常迷惑人)\n\"a\" || false    \t  // t || f 结果为 a\n","slug":"逻辑运算符","published":1,"date":"2016-11-16T11:29:03.000Z","updated":"2016-11-16T11:55:53.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjghao8jd000ew0uaf4z2n91u","content":"<blockquote>\n<p>小记</p>\n</blockquote>\n<p>最近看到一个面试题,题目如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(1&amp;&amp;2);//弹出什么？</span><br></pre></td></tr></table></figure>\n<p>  正确的结果是 2.</p>\n<p>这结果让我觉得自己对于逻辑运算符的理解还很浅~在网上搜集了一下资料，发现一个专业名词–&gt;（短路计算原则）。。。那么来研究研究吧~~~</p>\n<p>1.在MDN上面找到相应描述逻辑运算符的说明:</p>\n<p>逻辑与 (&amp;&amp;) expr1&amp;&amp;expr2 如果expr1 能转换成false则返回expr1,否则返回expr2. 因此, 在Boolean环境中使用时, 两个操作结果都为true时返回true,否则返回false.<br>逻辑或 (||) expr1||expr2 如果expr1能转换成true则返回expr1,否则返回expr2. 因此,在boolean环境(在if的条件判断中)中使用时, 二者操作结果中只要有一个为true,返回true;二者操作结果都为false时返回false.<br>逻辑非(!) !expr 如果单个表达式能转换为true的话返回false,否则返回true. </p>\n<p>能够转换为false的表达式有:false,””(空字符串),0和NaN,null,undefined.</p>\n<p>能够转化为true的值为:true,任何非空字符串，任何非零数字值(包括无穷大),任何对象</p>\n<p>以上规则已经再次确认，摘自”javascript高级程序设计(第3版)”这本书</p>\n<p>那么上面的题就好理解了，（1&amp;&amp;2）1返回的是true不是false所以无法返回第一个值,则返回的是数字2.</p>\n<ol start=\"2\">\n<li>短路计算原则:</li>\n</ol>\n<p>由于逻辑表达式的运算的顺序是从左到右,也可以用以下规则进行”短路”计算:<br>false &amp;&amp; (anything)  短路计算的结果为false.<br>true || (anything)  短路计算的结果为 true</p>\n<p>3.一些简单逻辑运算例子理解</p>\n<p>(1)逻辑与<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;a&quot; &amp;&amp; &quot;b&quot;     \t\t//结果为 b</span><br><span class=\"line\">false &amp;&amp; &quot;a&quot;     \t// f &amp;&amp; t 结果为 false</span><br><span class=\"line\">&quot;a&quot; &amp;&amp; false     \t// t &amp;&amp; f 结果为 false</span><br><span class=\"line\">true  &amp;&amp; 2 &amp;&amp; &quot;a&quot;   //结果为&quot;a&quot;</span><br></pre></td></tr></table></figure></p>\n<p>(2)逻辑或</p>\n<p>false || (2 == 4)        // f || f 结果为 false<br>“a” || “b”              // t || t 结果为 a<br>false || “a”          // f || t 结果为 a(这个例子非常迷惑人)<br>“a” || false          // t || f 结果为 a</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>小记</p>\n</blockquote>\n<p>最近看到一个面试题,题目如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(1&amp;&amp;2);//弹出什么？</span><br></pre></td></tr></table></figure>\n<p>  正确的结果是 2.</p>\n<p>这结果让我觉得自己对于逻辑运算符的理解还很浅~在网上搜集了一下资料，发现一个专业名词–&gt;（短路计算原则）。。。那么来研究研究吧~~~</p>\n<p>1.在MDN上面找到相应描述逻辑运算符的说明:</p>\n<p>逻辑与 (&amp;&amp;) expr1&amp;&amp;expr2 如果expr1 能转换成false则返回expr1,否则返回expr2. 因此, 在Boolean环境中使用时, 两个操作结果都为true时返回true,否则返回false.<br>逻辑或 (||) expr1||expr2 如果expr1能转换成true则返回expr1,否则返回expr2. 因此,在boolean环境(在if的条件判断中)中使用时, 二者操作结果中只要有一个为true,返回true;二者操作结果都为false时返回false.<br>逻辑非(!) !expr 如果单个表达式能转换为true的话返回false,否则返回true. </p>\n<p>能够转换为false的表达式有:false,””(空字符串),0和NaN,null,undefined.</p>\n<p>能够转化为true的值为:true,任何非空字符串，任何非零数字值(包括无穷大),任何对象</p>\n<p>以上规则已经再次确认，摘自”javascript高级程序设计(第3版)”这本书</p>\n<p>那么上面的题就好理解了，（1&amp;&amp;2）1返回的是true不是false所以无法返回第一个值,则返回的是数字2.</p>\n<ol start=\"2\">\n<li>短路计算原则:</li>\n</ol>\n<p>由于逻辑表达式的运算的顺序是从左到右,也可以用以下规则进行”短路”计算:<br>false &amp;&amp; (anything)  短路计算的结果为false.<br>true || (anything)  短路计算的结果为 true</p>\n<p>3.一些简单逻辑运算例子理解</p>\n<p>(1)逻辑与<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;a&quot; &amp;&amp; &quot;b&quot;     \t\t//结果为 b</span><br><span class=\"line\">false &amp;&amp; &quot;a&quot;     \t// f &amp;&amp; t 结果为 false</span><br><span class=\"line\">&quot;a&quot; &amp;&amp; false     \t// t &amp;&amp; f 结果为 false</span><br><span class=\"line\">true  &amp;&amp; 2 &amp;&amp; &quot;a&quot;   //结果为&quot;a&quot;</span><br></pre></td></tr></table></figure></p>\n<p>(2)逻辑或</p>\n<p>false || (2 == 4)        // f || f 结果为 false<br>“a” || “b”              // t || t 结果为 a<br>false || “a”          // f || t 结果为 a(这个例子非常迷惑人)<br>“a” || false          // t || f 结果为 a</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}